
MyRefreezerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000144c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  00001500  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4e  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e15  00000000  00000000  00003342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6a  00000000  00000000  00004157  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a9  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000172a  00000000  00000000  00005a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00007133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c1       	rjmp	.+754    	; 0x304 <__vector_4>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <getInsideTemp+0xb8>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e1       	ldi	r29, 0x10	; 16
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	ec e4       	ldi	r30, 0x4C	; 76
      fa:	f4 e1       	ldi	r31, 0x14	; 20
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 32       	cpi	r26, 0x20	; 32
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a0 e2       	ldi	r26, 0x20	; 32
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a4 32       	cpi	r26, 0x24	; 36
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0a d1       	rcall	.+532    	; 0x332 <main>
     11e:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CLCD_DataTransmitter>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     124:	ef e9       	ldi	r30, 0x9F	; 159
     126:	ff e0       	ldi	r31, 0x0F	; 15
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <CLCD_DataTransmitter+0x4>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <CLCD_DataTransmitter+0xa>
     12e:	00 00       	nop

/*It is a function based on 8bit data bus.*/

void CLCD_DataTransmitter(char data){
	_delay_ms(1);
	PORTE = RS; 
     130:	94 e0       	ldi	r25, 0x04	; 4
     132:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	f5 e0       	ldi	r31, 0x05	; 5
     136:	fa 95       	dec	r31
     138:	f1 f7       	brne	.-4      	; 0x136 <CLCD_DataTransmitter+0x12>
     13a:	00 00       	nop
	_delay_us(1); 
	PORTE = (RS | E); 
     13c:	95 e0       	ldi	r25, 0x05	; 5
     13e:	93 b9       	out	0x03, r25	; 3
     140:	95 e0       	ldi	r25, 0x05	; 5
     142:	9a 95       	dec	r25
     144:	f1 f7       	brne	.-4      	; 0x142 <CLCD_DataTransmitter+0x1e>
     146:	00 00       	nop
	_delay_us(1);
	PORTB = data; 
     148:	88 bb       	out	0x18, r24	; 24
     14a:	e5 e0       	ldi	r30, 0x05	; 5
     14c:	ea 95       	dec	r30
     14e:	f1 f7       	brne	.-4      	; 0x14c <CLCD_DataTransmitter+0x28>
     150:	00 00       	nop
	_delay_us(1);
	PORTE = RW;	
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	83 b9       	out	0x03, r24	; 3
     156:	08 95       	ret

00000158 <CLCD_Controller>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	2f ef       	ldi	r18, 0xFF	; 255
     15a:	36 e7       	ldi	r19, 0x76	; 118
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	30 40       	sbci	r19, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <CLCD_Controller+0x6>
     166:	00 c0       	rjmp	.+0      	; 0x168 <CLCD_Controller+0x10>
     168:	00 00       	nop
}

void CLCD_Controller(char ctl){
	_delay_ms(30);
	PORTE = 0x00; //RW clear
     16a:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16c:	25 e0       	ldi	r18, 0x05	; 5
     16e:	2a 95       	dec	r18
     170:	f1 f7       	brne	.-4      	; 0x16e <CLCD_Controller+0x16>
     172:	00 00       	nop
	_delay_us(1);
	PORTE = E;
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	93 b9       	out	0x03, r25	; 3
     178:	35 e0       	ldi	r19, 0x05	; 5
     17a:	3a 95       	dec	r19
     17c:	f1 f7       	brne	.-4      	; 0x17a <CLCD_Controller+0x22>
     17e:	00 00       	nop
	_delay_us(1);
	PORTB = ctl;
     180:	88 bb       	out	0x18, r24	; 24
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	8a 95       	dec	r24
     186:	f1 f7       	brne	.-4      	; 0x184 <CLCD_Controller+0x2c>
     188:	00 00       	nop
	_delay_us(1);
	PORTE = (RS | RW);
     18a:	86 e0       	ldi	r24, 0x06	; 6
     18c:	83 b9       	out	0x03, r24	; 3
     18e:	08 95       	ret

00000190 <CLCD_initalizer>:
}

void CLCD_initalizer(void){
	cli();
     190:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	80 e7       	ldi	r24, 0x70	; 112
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	21 50       	subi	r18, 0x01	; 1
     19a:	80 40       	sbci	r24, 0x00	; 0
     19c:	90 40       	sbci	r25, 0x00	; 0
     19e:	e1 f7       	brne	.-8      	; 0x198 <CLCD_initalizer+0x8>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <CLCD_initalizer+0x12>
     1a2:	00 00       	nop
	_delay_ms(50);
	CLCD_Controller(FUNC_DISPLAY_LINE_2 | FUNC_DATA_LINE_8);
     1a4:	88 e3       	ldi	r24, 0x38	; 56
     1a6:	d8 df       	rcall	.-80     	; 0x158 <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a8:	25 ed       	ldi	r18, 0xD5	; 213
     1aa:	2a 95       	dec	r18
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <CLCD_initalizer+0x1a>
     1ae:	00 00       	nop
	_delay_us(40);
	CLCD_Controller(DISPLAY_ON);
     1b0:	8c e0       	ldi	r24, 0x0C	; 12
     1b2:	d2 df       	rcall	.-92     	; 0x158 <CLCD_Controller>
     1b4:	85 ed       	ldi	r24, 0xD5	; 213
     1b6:	8a 95       	dec	r24
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <CLCD_initalizer+0x26>
	_delay_us(40);
	CLCD_Controller(CLEAR_DISPLAY);
     1ba:	00 00       	nop
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	cc df       	rcall	.-104    	; 0x158 <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c0:	8f e3       	ldi	r24, 0x3F	; 63
     1c2:	9f e1       	ldi	r25, 0x1F	; 31
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <CLCD_initalizer+0x34>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <CLCD_initalizer+0x3a>
	_delay_ms(2);
	CLCD_Controller(ENTRY_NO_SHIFT);
     1ca:	00 00       	nop
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	c4 df       	rcall	.-120    	; 0x158 <CLCD_Controller>
	sei();
     1d0:	78 94       	sei
     1d2:	08 95       	ret

000001d4 <CLCD_putstr>:
}

void CLCD_putstr(char addr, char *str){
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	7b 01       	movw	r14, r22
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
     1e2:	08 2f       	mov	r16, r24
     1e4:	00 68       	ori	r16, 0x80	; 128
     1e6:	80 2f       	mov	r24, r16
     1e8:	b7 df       	rcall	.-146    	; 0x158 <CLCD_Controller>
	while(*str != '\0'){
     1ea:	f7 01       	movw	r30, r14
     1ec:	80 81       	ld	r24, Z
     1ee:	88 23       	and	r24, r24
     1f0:	89 f0       	breq	.+34     	; 0x214 <CLCD_putstr+0x40>
     1f2:	e7 01       	movw	r28, r14
		if(((addr | CLCD_DD_RAM_BASE) + char_count) == 0x90){
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	0e 19       	sub	r16, r14
     1f8:	1f 09       	sbc	r17, r15
     1fa:	ce 01       	movw	r24, r28
     1fc:	80 0f       	add	r24, r16
     1fe:	91 1f       	adc	r25, r17
     200:	80 39       	cpi	r24, 0x90	; 144
     202:	91 05       	cpc	r25, r1
     204:	11 f4       	brne	.+4      	; 0x20a <CLCD_putstr+0x36>
			CLCD_Controller(CLCD_DD_RAM_BASE | 0x40);
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	a7 df       	rcall	.-178    	; 0x158 <CLCD_Controller>
		}
		CLCD_DataTransmitter(*str);
     20a:	89 91       	ld	r24, Y+
     20c:	8b df       	rcall	.-234    	; 0x124 <CLCD_DataTransmitter>
     20e:	88 81       	ld	r24, Y

void CLCD_putstr(char addr, char *str){
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
	while(*str != '\0'){
     210:	81 11       	cpse	r24, r1
     212:	f3 cf       	rjmp	.-26     	; 0x1fa <CLCD_putstr+0x26>
     214:	df 91       	pop	r29
		CLCD_DataTransmitter(*str);
		
		str += 1;
		char_count += 1;
	}
}
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <DisplayHeatsinkTemp>:
     222:	cf 92       	push	r12

void convertFloattoUint_8(float number, uint8_t *v_uint_8){
	*v_uint_8 = number;
}

void DisplayHeatsinkTemp(float *temp){
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	65 97       	sbiw	r28, 0x15	; 21
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
	uint8_t v_uint_8[4] = {0, };
     242:	19 82       	std	Y+1, r1	; 0x01
     244:	1a 82       	std	Y+2, r1	; 0x02
     246:	1b 82       	std	Y+3, r1	; 0x03
     248:	1c 82       	std	Y+4, r1	; 0x04
	char str[17] = {0, };
     24a:	fe 01       	movw	r30, r28
     24c:	35 96       	adiw	r30, 0x05	; 5
     24e:	21 e1       	ldi	r18, 0x11	; 17
     250:	df 01       	movw	r26, r30
     252:	1d 92       	st	X+, r1
     254:	2a 95       	dec	r18
     256:	e9 f7       	brne	.-6      	; 0x252 <DisplayHeatsinkTemp+0x30>
     258:	7c 01       	movw	r14, r24
     25a:	8e 01       	movw	r16, r28
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	6f 01       	movw	r12, r30
	
	for(int cnt = 0; cnt < 4; cnt++){
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
     262:	f7 01       	movw	r30, r14
     264:	61 91       	ld	r22, Z+
     266:	71 91       	ld	r23, Z+
     268:	81 91       	ld	r24, Z+
     26a:	91 91       	ld	r25, Z+
     26c:	7f 01       	movw	r14, r30
#include "CLCD.h"
#include "sensor.h"
#include "TWI.h"

void convertFloattoUint_8(float number, uint8_t *v_uint_8){
	*v_uint_8 = number;
     26e:	54 d4       	rcall	.+2216   	; 0xb18 <__fixunssfsi>
     270:	d8 01       	movw	r26, r16
     272:	6d 93       	st	X+, r22
     274:	8d 01       	movw	r16, r26

void DisplayHeatsinkTemp(float *temp){
	uint8_t v_uint_8[4] = {0, };
	char str[17] = {0, };
	
	for(int cnt = 0; cnt < 4; cnt++){
     276:	ac 15       	cp	r26, r12
     278:	bd 05       	cpc	r27, r13
     27a:	99 f7       	brne	.-26     	; 0x262 <DisplayHeatsinkTemp+0x40>
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
	}
	
	sprintf(str, "P1:%dC  P2:%dC", v_uint_8[0], v_uint_8[1]);
     27c:	8a 81       	ldd	r24, Y+2	; 0x02
     27e:	1f 92       	push	r1
     280:	8f 93       	push	r24
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	1f 92       	push	r1
     286:	8f 93       	push	r24
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	9f 93       	push	r25
     28e:	8f 93       	push	r24
     290:	8e 01       	movw	r16, r28
     292:	0b 5f       	subi	r16, 0xFB	; 251
     294:	1f 4f       	sbci	r17, 0xFF	; 255
     296:	1f 93       	push	r17
     298:	0f 93       	push	r16
     29a:	fb d5       	rcall	.+3062   	; 0xe92 <sprintf>
	CLCD_putstr(0x00, str);
     29c:	b8 01       	movw	r22, r16
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	99 df       	rcall	.-206    	; 0x1d4 <CLCD_putstr>
	
	memset(str, 0x00, 17);
     2a2:	81 e1       	ldi	r24, 0x11	; 17
     2a4:	f8 01       	movw	r30, r16
     2a6:	11 92       	st	Z+, r1
     2a8:	8a 95       	dec	r24
     2aa:	e9 f7       	brne	.-6      	; 0x2a6 <DisplayHeatsinkTemp+0x84>
	
	sprintf(str, "P3:%dC  P4:%dC", v_uint_8[2], v_uint_8[3]);
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	1f 92       	push	r1
     2b0:	8f 93       	push	r24
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	1f 92       	push	r1
     2b6:	8f 93       	push	r24
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	1f 93       	push	r17
     2c2:	0f 93       	push	r16
	CLCD_putstr(0x40, str);
     2c4:	e6 d5       	rcall	.+3020   	; 0xe92 <sprintf>
     2c6:	b8 01       	movw	r22, r16
     2c8:	80 e4       	ldi	r24, 0x40	; 64
     2ca:	84 df       	rcall	.-248    	; 0x1d4 <CLCD_putstr>
}
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	65 96       	adiw	r28, 0x15	; 21
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	08 95       	ret

000002f4 <DisplayInsideTemp_master>:

void DisplayInsideTemp_master(float temp){
	uint8_t v_uint_8 = 0;
	
	convertFloattoUint_8(temp, &v_uint_8);
	TWI_transmit(SLAVE_ADDR, v_uint_8);
     2f4:	11 d4       	rcall	.+2082   	; 0xb18 <__fixunssfsi>
     2f6:	83 e2       	ldi	r24, 0x23	; 35
     2f8:	05 c3       	rjmp	.+1546   	; 0x904 <TWI_transmit>
     2fa:	08 95       	ret

000002fc <DisplayWaringMessage>:
}

void DisplayWaringMessage(void){
	uint8_t val = -127;
	
	TWI_transmit(SLAVE_ADDR, val);
     2fc:	61 e8       	ldi	r22, 0x81	; 129
     2fe:	83 e2       	ldi	r24, 0x23	; 35
     300:	01 c3       	rjmp	.+1538   	; 0x904 <TWI_transmit>
     302:	08 95       	ret

00000304 <__vector_4>:
#define TEMP_LIMIT 120

uint8_t flag_overheat[4] = {0, };
uint8_t powcnt = 1;

ISR(INT3_vect){
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
	powcnt += 1;
     310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     314:	8f 5f       	subi	r24, 0xFF	; 255
	if(powcnt == 4){
     316:	84 30       	cpi	r24, 0x04	; 4
     318:	19 f0       	breq	.+6      	; 0x320 <__vector_4+0x1c>

uint8_t flag_overheat[4] = {0, };
uint8_t powcnt = 1;

ISR(INT3_vect){
	powcnt += 1;
     31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     31e:	03 c0       	rjmp	.+6      	; 0x326 <__vector_4+0x22>
	if(powcnt == 4){
		powcnt = 1;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
     326:	8f 91       	pop	r24
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <main>:

int main(void){
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	64 97       	sbiw	r28, 0x14	; 20
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; //SSR (0x0F | 0xFF)
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; //CLCD Databus (0xFF | 0xFF)
     34a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; //status LED (0x0F | 0xFF)
     34c:	84 bb       	out	0x14, r24	; 20
	DDRD = (!0x08); //TWI, Switch
     34e:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xFF; //CLCD Control (0x07 | 0xFF)
     350:	82 b9       	out	0x02, r24	; 2
	DDRF = (!0x1F); //ADC
     352:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x1F; //unused
     356:	8f e1       	ldi	r24, 0x1F	; 31
     358:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	float temp_heatsink[4] = {0, }, temp_inside = 0;
     35c:	fe 01       	movw	r30, r28
     35e:	31 96       	adiw	r30, 0x01	; 1
     360:	80 e1       	ldi	r24, 0x10	; 16
     362:	df 01       	movw	r26, r30
     364:	1d 92       	st	X+, r1
     366:	8a 95       	dec	r24
     368:	e9 f7       	brne	.-6      	; 0x364 <main+0x32>
	
	PORTA = 0x01;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0xFE;
     36e:	8e ef       	ldi	r24, 0xFE	; 254
     370:	85 bb       	out	0x15, r24	; 21
	
	CLCD_initalizer();
     372:	0e df       	rcall	.-484    	; 0x190 <CLCD_initalizer>
	ADC_initializer();
     374:	9f d0       	rcall	.+318    	; 0x4b4 <ADC_initializer>
	TWI_initializer();
     376:	be d2       	rcall	.+1404   	; 0x8f4 <TWI_initializer>
     378:	b7 d2       	rcall	.+1390   	; 0x8e8 <EINT_set>
	EINT_set();
     37a:	78 94       	sei
     37c:	0f 2e       	mov	r0, r31
	sei();
     37e:	f4 e2       	ldi	r31, 0x24	; 36
     380:	8f 2e       	mov	r8, r31
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	9f 2e       	mov	r9, r31
     386:	f0 2d       	mov	r31, r0
     388:	77 24       	eor	r7, r7
     38a:	73 94       	inc	r7
		temp_heatsink[3] = getHeatsink4Temp();
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
			if(temp_heatsink[cnt] > TEMP_LIMIT){
				flag_overheat[cnt] = 1;
     38c:	0f 2e       	mov	r0, r31
     38e:	f0 e2       	ldi	r31, 0x20	; 32
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 30){
				flag_overheat[cnt] = 0;
			}
		}
		
		if(flag_overheat[0] == 1){
     390:	2f 2e       	mov	r2, r31
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	3f 2e       	mov	r3, r31
     396:	f0 2d       	mov	r31, r0
     398:	c8 d0       	rcall	.+400    	; 0x52a <getHeatsink1Temp>
	TWI_initializer();
	EINT_set();
	sei();
	
    while (1) {
		temp_heatsink[0] = getHeatsink1Temp();
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	9c 83       	std	Y+4, r25	; 0x04
     3a2:	23 d1       	rcall	.+582    	; 0x5ea <getHeatsink2Temp>
		temp_heatsink[1] = getHeatsink2Temp();
     3a4:	6d 83       	std	Y+5, r22	; 0x05
     3a6:	7e 83       	std	Y+6, r23	; 0x06
     3a8:	8f 83       	std	Y+7, r24	; 0x07
     3aa:	98 87       	std	Y+8, r25	; 0x08
     3ac:	7d d1       	rcall	.+762    	; 0x6a8 <getHeatsink3Temp>
		temp_heatsink[2] = getHeatsink3Temp();
     3ae:	69 87       	std	Y+9, r22	; 0x09
     3b0:	7a 87       	std	Y+10, r23	; 0x0a
     3b2:	8b 87       	std	Y+11, r24	; 0x0b
     3b4:	9c 87       	std	Y+12, r25	; 0x0c
     3b6:	d8 d1       	rcall	.+944    	; 0x768 <getHeatsink4Temp>
		temp_heatsink[3] = getHeatsink4Temp();
     3b8:	6d 87       	std	Y+13, r22	; 0x0d
     3ba:	7e 87       	std	Y+14, r23	; 0x0e
     3bc:	8f 87       	std	Y+15, r24	; 0x0f
     3be:	98 8b       	std	Y+16, r25	; 0x10
     3c0:	33 d2       	rcall	.+1126   	; 0x828 <getInsideTemp>
     3c2:	69 8b       	std	Y+17, r22	; 0x11
		temp_inside = getInsideTemp();
     3c4:	7a 8b       	std	Y+18, r23	; 0x12
     3c6:	8b 8b       	std	Y+19, r24	; 0x13
     3c8:	9c 8b       	std	Y+20, r25	; 0x14
     3ca:	fe 01       	movw	r30, r28
     3cc:	31 96       	adiw	r30, 0x01	; 1
     3ce:	5f 01       	movw	r10, r30
     3d0:	00 e2       	ldi	r16, 0x20	; 32
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	d5 01       	movw	r26, r10
     3d6:	cd 90       	ld	r12, X+
     3d8:	dd 90       	ld	r13, X+
		
		for(int cnt = 0; cnt < 4; cnt++){
			if(temp_heatsink[cnt] > TEMP_LIMIT){
     3da:	ed 90       	ld	r14, X+
     3dc:	fd 90       	ld	r15, X+
     3de:	5d 01       	movw	r10, r26
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 ef       	ldi	r20, 0xF0	; 240
     3e6:	52 e4       	ldi	r21, 0x42	; 66
     3e8:	c7 01       	movw	r24, r14
     3ea:	b6 01       	movw	r22, r12
     3ec:	73 d4       	rcall	.+2278   	; 0xcd4 <__gesf2>
     3ee:	18 16       	cp	r1, r24
     3f0:	24 f4       	brge	.+8      	; 0x3fa <main+0xc8>
     3f2:	f8 01       	movw	r30, r16
     3f4:	70 82       	st	Z, r7
				flag_overheat[cnt] = 1;
     3f6:	82 df       	rcall	.-252    	; 0x2fc <DisplayWaringMessage>
				DisplayWaringMessage();
     3f8:	0b c0       	rjmp	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
			}
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 30){
     3fe:	44 eb       	ldi	r20, 0xB4	; 180
     400:	52 e4       	ldi	r21, 0x42	; 66
     402:	c7 01       	movw	r24, r14
     404:	b6 01       	movw	r22, r12
     406:	1c d3       	rcall	.+1592   	; 0xa40 <__cmpsf2>
     408:	88 23       	and	r24, r24
     40a:	14 f4       	brge	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	d8 01       	movw	r26, r16
     40e:	1c 92       	st	X, r1
     410:	0f 5f       	subi	r16, 0xFF	; 255
				flag_overheat[cnt] = 0;
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	08 15       	cp	r16, r8
     416:	19 05       	cpc	r17, r9
     418:	e9 f6       	brne	.-70     	; 0x3d4 <main+0xa2>
		temp_heatsink[1] = getHeatsink2Temp();
		temp_heatsink[2] = getHeatsink3Temp();
		temp_heatsink[3] = getHeatsink4Temp();
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
     41a:	f1 01       	movw	r30, r2
     41c:	80 81       	ld	r24, Z
     41e:	81 30       	cpi	r24, 0x01	; 1
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 30){
				flag_overheat[cnt] = 0;
			}
		}
		
		if(flag_overheat[0] == 1){
     420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	d8 98       	cbi	0x1b, 0	; 27
     424:	ab 98       	cbi	0x15, 3	; 21
     426:	d1 01       	movw	r26, r2
			PORTA &= 0xFE; //1111 1110
     428:	11 96       	adiw	r26, 0x01	; 1
			PORTC &= 0xF7; //1111 0111
     42a:	8c 91       	ld	r24, X
		}
		if(flag_overheat[1] == 1){
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	d9 98       	cbi	0x1b, 1	; 27
     432:	aa 98       	cbi	0x15, 2	; 21
     434:	f1 01       	movw	r30, r2
			PORTA &= 0xFD; //1111 1101
     436:	82 81       	ldd	r24, Z+2	; 0x02
			PORTC &= 0xFB; //1111 1011
     438:	81 30       	cpi	r24, 0x01	; 1
		}
		if(flag_overheat[2] == 1){
     43a:	11 f4       	brne	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	da 98       	cbi	0x1b, 2	; 27
     43e:	a9 98       	cbi	0x15, 1	; 21
     440:	d1 01       	movw	r26, r2
			PORTA &= 0xFB; //1111 1011
     442:	13 96       	adiw	r26, 0x03	; 3
			PORTC &= 0xFD; //1111 1101
     444:	8c 91       	ld	r24, X
		}
		if(flag_overheat[3] == 1){
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	11 f4       	brne	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	db 98       	cbi	0x1b, 3	; 27
     44c:	a8 98       	cbi	0x15, 0	; 21
     44e:	f1 01       	movw	r30, r2
			PORTA &= 0xF7; //1111 0111
     450:	80 81       	ld	r24, Z
			PORTC &= 0xFE; //1111 1110
     452:	81 11       	cpse	r24, r1
		}
		
		if(flag_overheat[0] == 0 && powcnt == 1){
     454:	06 c0       	rjmp	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	11 f4       	brne	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	d8 9a       	sbi	0x1b, 0	; 27
     460:	ab 9a       	sbi	0x15, 3	; 21
     462:	d1 01       	movw	r26, r2
			PORTA |= 0x01; //0000 0001
     464:	11 96       	adiw	r26, 0x01	; 1
			PORTC |= 0x08; //0000 1000
     466:	8c 91       	ld	r24, X
		}
		if(flag_overheat[1] == 0 && powcnt == 2){
     468:	81 11       	cpse	r24, r1
     46a:	06 c0       	rjmp	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     46c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	11 f4       	brne	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     474:	d9 9a       	sbi	0x1b, 1	; 27
     476:	aa 9a       	sbi	0x15, 2	; 21
     478:	f1 01       	movw	r30, r2
			PORTA |= 0x02; //0000 0010
     47a:	82 81       	ldd	r24, Z+2	; 0x02
			PORTC |= 0x04; //0000 0100
     47c:	81 11       	cpse	r24, r1
		}
		if(flag_overheat[2] == 0 && powcnt == 3){
     47e:	06 c0       	rjmp	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     480:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     484:	83 30       	cpi	r24, 0x03	; 3
     486:	11 f4       	brne	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     488:	da 9a       	sbi	0x1b, 2	; 27
     48a:	a9 9a       	sbi	0x15, 1	; 21
     48c:	d1 01       	movw	r26, r2
			PORTA |= 0x04; //0000 0100
     48e:	13 96       	adiw	r26, 0x03	; 3
			PORTC |= 0x02; //0000 0010
     490:	8c 91       	ld	r24, X
		}
		if(flag_overheat[3] == 0 && powcnt == 4){
     492:	81 11       	cpse	r24, r1
     494:	06 c0       	rjmp	.+12     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     496:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     49a:	84 30       	cpi	r24, 0x04	; 4
     49c:	11 f4       	brne	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49e:	db 9a       	sbi	0x1b, 3	; 27
			PORTA |= 0x08; //0000 1000
     4a0:	a8 9a       	sbi	0x15, 0	; 21
			PORTC |= 0x01; //0000 0001
     4a2:	ce 01       	movw	r24, r28
		}
		
		DisplayHeatsinkTemp(temp_heatsink);
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	bd de       	rcall	.-646    	; 0x222 <DisplayHeatsinkTemp>
     4a8:	69 89       	ldd	r22, Y+17	; 0x11
     4aa:	7a 89       	ldd	r23, Y+18	; 0x12
		DisplayInsideTemp_master(temp_inside);
     4ac:	8b 89       	ldd	r24, Y+19	; 0x13
     4ae:	9c 89       	ldd	r25, Y+20	; 0x14
     4b0:	21 df       	rcall	.-446    	; 0x2f4 <DisplayInsideTemp_master>
     4b2:	72 cf       	rjmp	.-284    	; 0x398 <main+0x66>

000004b4 <ADC_initializer>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <math.h>
#include "sensor.h"

void ADC_initializer(void){
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <ADC_initializer+0x6>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <ADC_initializer+0x8>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	volatile float dummy = 0;
     4c0:	19 82       	std	Y+1, r1	; 0x01
     4c2:	1a 82       	std	Y+2, r1	; 0x02
     4c4:	1b 82       	std	Y+3, r1	; 0x03
     4c6:	1c 82       	std	Y+4, r1	; 0x04
	
	cli();
     4c8:	f8 94       	cli
	
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     4ca:	87 e8       	ldi	r24, 0x87	; 135
     4cc:	86 b9       	out	0x06, r24	; 6
     4ce:	2f ef       	ldi	r18, 0xFF	; 255
     4d0:	81 ee       	ldi	r24, 0xE1	; 225
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	80 40       	sbci	r24, 0x00	; 0
     4d8:	90 40       	sbci	r25, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <ADC_initializer+0x20>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <ADC_initializer+0x2a>
     4de:	00 00       	nop
	_delay_ms(100);
	ADMUX = (1 << MUX0) | (1 << REFS0);
     4e0:	81 e4       	ldi	r24, 0x41	; 65
     4e2:	87 b9       	out	0x07, r24	; 7
     4e4:	8f e3       	ldi	r24, 0x3F	; 63
     4e6:	9c e9       	ldi	r25, 0x9C	; 156
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <ADC_initializer+0x34>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <ADC_initializer+0x3a>
     4ee:	00 00       	nop
	_delay_ms(10);
	
	ADCSRA |= (1 << ADSC);
     4f0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     4f2:	36 99       	sbic	0x06, 6	; 6
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <ADC_initializer+0x3e>
	dummy = ADC;
     4f6:	64 b1       	in	r22, 0x04	; 4
     4f8:	75 b1       	in	r23, 0x05	; 5
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	38 d3       	rcall	.+1648   	; 0xb70 <__floatunsisf>
     500:	69 83       	std	Y+1, r22	; 0x01
     502:	7a 83       	std	Y+2, r23	; 0x02
     504:	8b 83       	std	Y+3, r24	; 0x03
     506:	9c 83       	std	Y+4, r25	; 0x04
     508:	9f ef       	ldi	r25, 0xFF	; 255
     50a:	21 ee       	ldi	r18, 0xE1	; 225
     50c:	84 e0       	ldi	r24, 0x04	; 4
     50e:	91 50       	subi	r25, 0x01	; 1
     510:	20 40       	sbci	r18, 0x00	; 0
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	e1 f7       	brne	.-8      	; 0x50e <ADC_initializer+0x5a>
     516:	00 c0       	rjmp	.+0      	; 0x518 <ADC_initializer+0x64>
     518:	00 00       	nop
	_delay_ms(100);

	sei();
     51a:	78 94       	sei
}
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <getHeatsink1Temp>:

/*Thremistor: 10KD-5K*/
/*10KD-5K's B-parameter: 4200*/
/*voltage dividing resistor: 2K*/

float getHeatsink1Temp(void){
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX &= 0x00; 
     536:	87 b1       	in	r24, 0x07	; 7
     538:	17 b8       	out	0x07, r1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53a:	8f e8       	ldi	r24, 0x8F	; 143
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <getHeatsink1Temp+0x14>
     542:	00 c0       	rjmp	.+0      	; 0x544 <getHeatsink1Temp+0x1a>
     544:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC); 
     546:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC)); 
     548:	36 99       	sbic	0x06, 6	; 6
     54a:	fe cf       	rjmp	.-4      	; 0x548 <getHeatsink1Temp+0x1e>
     54c:	ca e0       	ldi	r28, 0x0A	; 10
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	c1 2c       	mov	r12, r1
     552:	d1 2c       	mov	r13, r1
     554:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     556:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     558:	36 99       	sbic	0x06, 6	; 6
     55a:	fe cf       	rjmp	.-4      	; 0x558 <getHeatsink1Temp+0x2e>
		Vo += ADC;
     55c:	64 b1       	in	r22, 0x04	; 4
     55e:	75 b1       	in	r23, 0x05	; 5
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	05 d3       	rcall	.+1546   	; 0xb70 <__floatunsisf>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
     56a:	c7 01       	movw	r24, r14
     56c:	b6 01       	movw	r22, r12
     56e:	04 d2       	rcall	.+1032   	; 0x978 <__addsf3>
     570:	6b 01       	movw	r12, r22
     572:	7c 01       	movw	r14, r24
     574:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC); 
	while(ADCSRA & (1 << ADSC)); 
	
	for(int i = 0; i < F_VAL; i++){
     576:	79 f7       	brne	.-34     	; 0x556 <getHeatsink1Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e2       	ldi	r20, 0x20	; 32
     57e:	51 e4       	ldi	r21, 0x41	; 65
     580:	63 d2       	rcall	.+1222   	; 0xa48 <__divsf3>
     582:	9b 01       	movw	r18, r22
     584:	ac 01       	movw	r20, r24
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 ec       	ldi	r23, 0xC0	; 192
     58a:	8f e7       	ldi	r24, 0x7F	; 127
     58c:	94 e4       	ldi	r25, 0x44	; 68
     58e:	5c d2       	rcall	.+1208   	; 0xa48 <__divsf3>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e8       	ldi	r20, 0x80	; 128
     596:	5f e3       	ldi	r21, 0x3F	; 63
     598:	ee d1       	rcall	.+988    	; 0x976 <__subsf3>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4a ef       	ldi	r20, 0xFA	; 250
     5a0:	54 e4       	ldi	r21, 0x44	; 68
     5a2:	e1 d3       	rcall	.+1986   	; 0xd66 <__mulsf3>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e4       	ldi	r19, 0x40	; 64
     5a8:	4c e1       	ldi	r20, 0x1C	; 28
     5aa:	56 e4       	ldi	r21, 0x46	; 70
     5ac:	4d d2       	rcall	.+1178   	; 0xa48 <__divsf3>
     5ae:	9b d3       	rcall	.+1846   	; 0xce6 <log>
	Cel = T - 273.15;
	return Cel;
     5b0:	24 e3       	ldi	r18, 0x34	; 52
     5b2:	39 ea       	ldi	r19, 0xA9	; 169
     5b4:	49 e7       	ldi	r20, 0x79	; 121
     5b6:	59 e3       	ldi	r21, 0x39	; 57
     5b8:	d6 d3       	rcall	.+1964   	; 0xd66 <__mulsf3>
     5ba:	2f e0       	ldi	r18, 0x0F	; 15
     5bc:	3f ec       	ldi	r19, 0xCF	; 207
     5be:	4b e5       	ldi	r20, 0x5B	; 91
     5c0:	5b e3       	ldi	r21, 0x3B	; 59
     5c2:	da d1       	rcall	.+948    	; 0x978 <__addsf3>
     5c4:	9b 01       	movw	r18, r22
     5c6:	ac 01       	movw	r20, r24
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e8       	ldi	r24, 0x80	; 128
     5ce:	9f e3       	ldi	r25, 0x3F	; 63
     5d0:	3b d2       	rcall	.+1142   	; 0xa48 <__divsf3>
     5d2:	23 e3       	ldi	r18, 0x33	; 51
     5d4:	33 e9       	ldi	r19, 0x93	; 147
     5d6:	48 e8       	ldi	r20, 0x88	; 136
     5d8:	53 e4       	ldi	r21, 0x43	; 67
     5da:	cd d1       	rcall	.+922    	; 0x976 <__subsf3>
     5dc:	df 91       	pop	r29
}
     5de:	cf 91       	pop	r28
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	08 95       	ret

000005ea <getHeatsink2Temp>:
     5ea:	cf 92       	push	r12

float getHeatsink2Temp(void){ 
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX0 << 1);
     5f6:	17 b8       	out	0x07, r1	; 7
     5f8:	8f e8       	ldi	r24, 0x8F	; 143
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <getHeatsink2Temp+0x12>
     600:	00 c0       	rjmp	.+0      	; 0x602 <getHeatsink2Temp+0x18>
     602:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     604:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     606:	36 99       	sbic	0x06, 6	; 6
     608:	fe cf       	rjmp	.-4      	; 0x606 <getHeatsink2Temp+0x1c>
     60a:	ca e0       	ldi	r28, 0x0A	; 10
     60c:	d0 e0       	ldi	r29, 0x00	; 0
     60e:	c1 2c       	mov	r12, r1
     610:	d1 2c       	mov	r13, r1
     612:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     614:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     616:	36 99       	sbic	0x06, 6	; 6
     618:	fe cf       	rjmp	.-4      	; 0x616 <getHeatsink2Temp+0x2c>
		Vo += ADC;
     61a:	64 b1       	in	r22, 0x04	; 4
     61c:	75 b1       	in	r23, 0x05	; 5
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a6 d2       	rcall	.+1356   	; 0xb70 <__floatunsisf>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	a5 d1       	rcall	.+842    	; 0x978 <__addsf3>
     62e:	6b 01       	movw	r12, r22
     630:	7c 01       	movw	r14, r24
     632:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     634:	79 f7       	brne	.-34     	; 0x614 <getHeatsink2Temp+0x2a>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e2       	ldi	r20, 0x20	; 32
     63c:	51 e4       	ldi	r21, 0x41	; 65
     63e:	04 d2       	rcall	.+1032   	; 0xa48 <__divsf3>
     640:	9b 01       	movw	r18, r22
     642:	ac 01       	movw	r20, r24
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 ec       	ldi	r23, 0xC0	; 192
     648:	8f e7       	ldi	r24, 0x7F	; 127
     64a:	94 e4       	ldi	r25, 0x44	; 68
     64c:	fd d1       	rcall	.+1018   	; 0xa48 <__divsf3>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e8       	ldi	r20, 0x80	; 128
     654:	5f e3       	ldi	r21, 0x3F	; 63
     656:	8f d1       	rcall	.+798    	; 0x976 <__subsf3>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	4a ef       	ldi	r20, 0xFA	; 250
     65e:	54 e4       	ldi	r21, 0x44	; 68
     660:	82 d3       	rcall	.+1796   	; 0xd66 <__mulsf3>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e4       	ldi	r19, 0x40	; 64
     666:	4c e1       	ldi	r20, 0x1C	; 28
     668:	56 e4       	ldi	r21, 0x46	; 70
     66a:	ee d1       	rcall	.+988    	; 0xa48 <__divsf3>
     66c:	3c d3       	rcall	.+1656   	; 0xce6 <log>
	Cel = T - 273.15;
	return Cel;
     66e:	24 e3       	ldi	r18, 0x34	; 52
     670:	39 ea       	ldi	r19, 0xA9	; 169
     672:	49 e7       	ldi	r20, 0x79	; 121
     674:	59 e3       	ldi	r21, 0x39	; 57
     676:	77 d3       	rcall	.+1774   	; 0xd66 <__mulsf3>
     678:	2f e0       	ldi	r18, 0x0F	; 15
     67a:	3f ec       	ldi	r19, 0xCF	; 207
     67c:	4b e5       	ldi	r20, 0x5B	; 91
     67e:	5b e3       	ldi	r21, 0x3B	; 59
     680:	7b d1       	rcall	.+758    	; 0x978 <__addsf3>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e8       	ldi	r24, 0x80	; 128
     68c:	9f e3       	ldi	r25, 0x3F	; 63
     68e:	dc d1       	rcall	.+952    	; 0xa48 <__divsf3>
     690:	23 e3       	ldi	r18, 0x33	; 51
     692:	33 e9       	ldi	r19, 0x93	; 147
     694:	48 e8       	ldi	r20, 0x88	; 136
     696:	53 e4       	ldi	r21, 0x43	; 67
     698:	6e d1       	rcall	.+732    	; 0x976 <__subsf3>
     69a:	df 91       	pop	r29
}
     69c:	cf 91       	pop	r28
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <getHeatsink3Temp>:
     6a8:	cf 92       	push	r12

float getHeatsink3Temp(void){
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX1 << 1);
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	87 b9       	out	0x07, r24	; 7
     6b8:	8f e8       	ldi	r24, 0x8F	; 143
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <getHeatsink3Temp+0x14>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <getHeatsink3Temp+0x1a>
     6c2:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     6c4:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     6c6:	36 99       	sbic	0x06, 6	; 6
     6c8:	fe cf       	rjmp	.-4      	; 0x6c6 <getHeatsink3Temp+0x1e>
     6ca:	ca e0       	ldi	r28, 0x0A	; 10
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	c1 2c       	mov	r12, r1
     6d0:	d1 2c       	mov	r13, r1
     6d2:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     6d4:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     6d6:	36 99       	sbic	0x06, 6	; 6
     6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <getHeatsink3Temp+0x2e>
		Vo += ADC;
     6da:	64 b1       	in	r22, 0x04	; 4
     6dc:	75 b1       	in	r23, 0x05	; 5
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	46 d2       	rcall	.+1164   	; 0xb70 <__floatunsisf>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c7 01       	movw	r24, r14
     6ea:	b6 01       	movw	r22, r12
     6ec:	45 d1       	rcall	.+650    	; 0x978 <__addsf3>
     6ee:	6b 01       	movw	r12, r22
     6f0:	7c 01       	movw	r14, r24
     6f2:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     6f4:	79 f7       	brne	.-34     	; 0x6d4 <getHeatsink3Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e2       	ldi	r20, 0x20	; 32
     6fc:	51 e4       	ldi	r21, 0x41	; 65
     6fe:	a4 d1       	rcall	.+840    	; 0xa48 <__divsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 ec       	ldi	r23, 0xC0	; 192
     708:	8f e7       	ldi	r24, 0x7F	; 127
     70a:	94 e4       	ldi	r25, 0x44	; 68
     70c:	9d d1       	rcall	.+826    	; 0xa48 <__divsf3>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e8       	ldi	r20, 0x80	; 128
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	2f d1       	rcall	.+606    	; 0x976 <__subsf3>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	4a ef       	ldi	r20, 0xFA	; 250
     71e:	54 e4       	ldi	r21, 0x44	; 68
     720:	22 d3       	rcall	.+1604   	; 0xd66 <__mulsf3>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e4       	ldi	r19, 0x40	; 64
     726:	4c e1       	ldi	r20, 0x1C	; 28
     728:	56 e4       	ldi	r21, 0x46	; 70
     72a:	8e d1       	rcall	.+796    	; 0xa48 <__divsf3>
     72c:	dc d2       	rcall	.+1464   	; 0xce6 <log>
	Cel = T - 273.15;
	return Cel;
     72e:	24 e3       	ldi	r18, 0x34	; 52
     730:	39 ea       	ldi	r19, 0xA9	; 169
     732:	49 e7       	ldi	r20, 0x79	; 121
     734:	59 e3       	ldi	r21, 0x39	; 57
     736:	17 d3       	rcall	.+1582   	; 0xd66 <__mulsf3>
     738:	2f e0       	ldi	r18, 0x0F	; 15
     73a:	3f ec       	ldi	r19, 0xCF	; 207
     73c:	4b e5       	ldi	r20, 0x5B	; 91
     73e:	5b e3       	ldi	r21, 0x3B	; 59
     740:	1b d1       	rcall	.+566    	; 0x978 <__addsf3>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e8       	ldi	r24, 0x80	; 128
     74c:	9f e3       	ldi	r25, 0x3F	; 63
     74e:	7c d1       	rcall	.+760    	; 0xa48 <__divsf3>
     750:	23 e3       	ldi	r18, 0x33	; 51
     752:	33 e9       	ldi	r19, 0x93	; 147
     754:	48 e8       	ldi	r20, 0x88	; 136
     756:	53 e4       	ldi	r21, 0x43	; 67
     758:	0e d1       	rcall	.+540    	; 0x976 <__subsf3>
     75a:	df 91       	pop	r29
}
     75c:	cf 91       	pop	r28
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <getHeatsink4Temp>:
     768:	cf 92       	push	r12

float getHeatsink4Temp(void){
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX0 << 1) | (MUX1 << 1);
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	87 b9       	out	0x07, r24	; 7
     778:	8f e8       	ldi	r24, 0x8F	; 143
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <getHeatsink4Temp+0x14>
     780:	00 c0       	rjmp	.+0      	; 0x782 <getHeatsink4Temp+0x1a>
     782:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     784:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     786:	36 99       	sbic	0x06, 6	; 6
     788:	fe cf       	rjmp	.-4      	; 0x786 <getHeatsink4Temp+0x1e>
     78a:	ca e0       	ldi	r28, 0x0A	; 10
     78c:	d0 e0       	ldi	r29, 0x00	; 0
     78e:	c1 2c       	mov	r12, r1
     790:	d1 2c       	mov	r13, r1
     792:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     794:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     796:	36 99       	sbic	0x06, 6	; 6
     798:	fe cf       	rjmp	.-4      	; 0x796 <getHeatsink4Temp+0x2e>
		Vo += ADC;
     79a:	64 b1       	in	r22, 0x04	; 4
     79c:	75 b1       	in	r23, 0x05	; 5
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	e6 d1       	rcall	.+972    	; 0xb70 <__floatunsisf>
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	c7 01       	movw	r24, r14
     7aa:	b6 01       	movw	r22, r12
     7ac:	e5 d0       	rcall	.+458    	; 0x978 <__addsf3>
     7ae:	6b 01       	movw	r12, r22
     7b0:	7c 01       	movw	r14, r24
     7b2:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     7b4:	79 f7       	brne	.-34     	; 0x794 <getHeatsink4Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e2       	ldi	r20, 0x20	; 32
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	44 d1       	rcall	.+648    	; 0xa48 <__divsf3>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 ec       	ldi	r23, 0xC0	; 192
     7c8:	8f e7       	ldi	r24, 0x7F	; 127
     7ca:	94 e4       	ldi	r25, 0x44	; 68
     7cc:	3d d1       	rcall	.+634    	; 0xa48 <__divsf3>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e8       	ldi	r20, 0x80	; 128
     7d4:	5f e3       	ldi	r21, 0x3F	; 63
     7d6:	cf d0       	rcall	.+414    	; 0x976 <__subsf3>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	4a ef       	ldi	r20, 0xFA	; 250
     7de:	54 e4       	ldi	r21, 0x44	; 68
     7e0:	c2 d2       	rcall	.+1412   	; 0xd66 <__mulsf3>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e4       	ldi	r19, 0x40	; 64
     7e6:	4c e1       	ldi	r20, 0x1C	; 28
     7e8:	56 e4       	ldi	r21, 0x46	; 70
     7ea:	2e d1       	rcall	.+604    	; 0xa48 <__divsf3>
     7ec:	7c d2       	rcall	.+1272   	; 0xce6 <log>
	Cel = T - 273.15;
	return Cel;
     7ee:	24 e3       	ldi	r18, 0x34	; 52
     7f0:	39 ea       	ldi	r19, 0xA9	; 169
     7f2:	49 e7       	ldi	r20, 0x79	; 121
     7f4:	59 e3       	ldi	r21, 0x39	; 57
     7f6:	b7 d2       	rcall	.+1390   	; 0xd66 <__mulsf3>
     7f8:	2f e0       	ldi	r18, 0x0F	; 15
     7fa:	3f ec       	ldi	r19, 0xCF	; 207
     7fc:	4b e5       	ldi	r20, 0x5B	; 91
     7fe:	5b e3       	ldi	r21, 0x3B	; 59
     800:	bb d0       	rcall	.+374    	; 0x978 <__addsf3>
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	80 e8       	ldi	r24, 0x80	; 128
     80c:	9f e3       	ldi	r25, 0x3F	; 63
     80e:	1c d1       	rcall	.+568    	; 0xa48 <__divsf3>
     810:	23 e3       	ldi	r18, 0x33	; 51
     812:	33 e9       	ldi	r19, 0x93	; 147
     814:	48 e8       	ldi	r20, 0x88	; 136
     816:	53 e4       	ldi	r21, 0x43	; 67
     818:	ae d0       	rcall	.+348    	; 0x976 <__subsf3>
     81a:	df 91       	pop	r29
}
     81c:	cf 91       	pop	r28
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	08 95       	ret

00000828 <getInsideTemp>:
     828:	cf 92       	push	r12

float getInsideTemp(void){ 
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX2 << 1);
     834:	84 e0       	ldi	r24, 0x04	; 4
     836:	87 b9       	out	0x07, r24	; 7
     838:	8f e8       	ldi	r24, 0x8F	; 143
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <getInsideTemp+0x14>
     840:	00 c0       	rjmp	.+0      	; 0x842 <getInsideTemp+0x1a>
     842:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     844:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     846:	36 99       	sbic	0x06, 6	; 6
     848:	fe cf       	rjmp	.-4      	; 0x846 <getInsideTemp+0x1e>
     84a:	ca e0       	ldi	r28, 0x0A	; 10
     84c:	d0 e0       	ldi	r29, 0x00	; 0
     84e:	c1 2c       	mov	r12, r1
     850:	d1 2c       	mov	r13, r1
     852:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     854:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     856:	36 99       	sbic	0x06, 6	; 6
     858:	fe cf       	rjmp	.-4      	; 0x856 <getInsideTemp+0x2e>
		Vo += ADC;
     85a:	64 b1       	in	r22, 0x04	; 4
     85c:	75 b1       	in	r23, 0x05	; 5
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	86 d1       	rcall	.+780    	; 0xb70 <__floatunsisf>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	85 d0       	rcall	.+266    	; 0x978 <__addsf3>
     86e:	6b 01       	movw	r12, r22
     870:	7c 01       	movw	r14, r24
     872:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     874:	79 f7       	brne	.-34     	; 0x854 <getInsideTemp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	e4 d0       	rcall	.+456    	; 0xa48 <__divsf3>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 ec       	ldi	r23, 0xC0	; 192
     888:	8f e7       	ldi	r24, 0x7F	; 127
     88a:	94 e4       	ldi	r25, 0x44	; 68
     88c:	dd d0       	rcall	.+442    	; 0xa48 <__divsf3>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	6f d0       	rcall	.+222    	; 0x976 <__subsf3>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	4a ef       	ldi	r20, 0xFA	; 250
     89e:	54 e4       	ldi	r21, 0x44	; 68
     8a0:	62 d2       	rcall	.+1220   	; 0xd66 <__mulsf3>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e4       	ldi	r19, 0x40	; 64
     8a6:	4c e1       	ldi	r20, 0x1C	; 28
     8a8:	56 e4       	ldi	r21, 0x46	; 70
     8aa:	ce d0       	rcall	.+412    	; 0xa48 <__divsf3>
     8ac:	1c d2       	rcall	.+1080   	; 0xce6 <log>
	Cel = T - 273.15;
	return Cel;
     8ae:	24 e3       	ldi	r18, 0x34	; 52
     8b0:	39 ea       	ldi	r19, 0xA9	; 169
     8b2:	49 e7       	ldi	r20, 0x79	; 121
     8b4:	59 e3       	ldi	r21, 0x39	; 57
     8b6:	57 d2       	rcall	.+1198   	; 0xd66 <__mulsf3>
     8b8:	2f e0       	ldi	r18, 0x0F	; 15
     8ba:	3f ec       	ldi	r19, 0xCF	; 207
     8bc:	4b e5       	ldi	r20, 0x5B	; 91
     8be:	5b e3       	ldi	r21, 0x3B	; 59
     8c0:	5b d0       	rcall	.+182    	; 0x978 <__addsf3>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e8       	ldi	r24, 0x80	; 128
     8cc:	9f e3       	ldi	r25, 0x3F	; 63
     8ce:	bc d0       	rcall	.+376    	; 0xa48 <__divsf3>
     8d0:	23 e3       	ldi	r18, 0x33	; 51
     8d2:	33 e9       	ldi	r19, 0x93	; 147
     8d4:	48 e8       	ldi	r20, 0x88	; 136
     8d6:	53 e4       	ldi	r21, 0x43	; 67
     8d8:	4e d0       	rcall	.+156    	; 0x976 <__subsf3>
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <EINT_set>:
﻿#include <avr/io.h>
#include <avr/interrupt.h>

void EINT_set(void){
	EICRA = (1 << ISC31);
     8e8:	80 e8       	ldi	r24, 0x80	; 128
     8ea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = (1 << INT3);
     8ee:	88 e0       	ldi	r24, 0x08	; 8
     8f0:	89 bf       	out	0x39, r24	; 57
     8f2:	08 95       	ret

000008f4 <TWI_initializer>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "TWI.h"

void TWI_initializer(void){
	cli();
     8f4:	f8 94       	cli
	TWBR = 12;
     8f6:	8c e0       	ldi	r24, 0x0C	; 12
     8f8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TWSR = 0x00;
     8fc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	sei();
     900:	78 94       	sei
     902:	08 95       	ret

00000904 <TWI_transmit>:
}

void TWI_transmit(uint8_t slave_addr, uint8_t data){
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //transmit start signal
     904:	94 ea       	ldi	r25, 0xA4	; 164
     906:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0) || (TWSR & 0xF8) != 0x08); //check status register
     90a:	e4 e7       	ldi	r30, 0x74	; 116
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	a1 e7       	ldi	r26, 0x71	; 113
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	90 81       	ld	r25, Z
     914:	99 23       	and	r25, r25
     916:	ec f7       	brge	.-6      	; 0x912 <TWI_transmit+0xe>
     918:	9c 91       	ld	r25, X
     91a:	98 7f       	andi	r25, 0xF8	; 248
     91c:	98 30       	cpi	r25, 0x08	; 8
     91e:	c9 f7       	brne	.-14     	; 0x912 <TWI_transmit+0xe>
     920:	9a e0       	ldi	r25, 0x0A	; 10
     922:	9a 95       	dec	r25
     924:	f1 f7       	brne	.-4      	; 0x922 <TWI_transmit+0x1e>
     926:	00 c0       	rjmp	.+0      	; 0x928 <TWI_transmit+0x24>
	
	_delay_us(2); 
	TWDR = (slave_addr << 1) & 0xFE; //TWD0 clear
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); //TWI enable & Transmit TWDR
     932:	84 e8       	ldi	r24, 0x84	; 132
     934:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0) || (TWSR & 0xF8) != 0x18); //wait ACK signal
     938:	e4 e7       	ldi	r30, 0x74	; 116
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	a1 e7       	ldi	r26, 0x71	; 113
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	88 23       	and	r24, r24
     944:	ec f7       	brge	.-6      	; 0x940 <TWI_transmit+0x3c>
     946:	8c 91       	ld	r24, X
     948:	88 7f       	andi	r24, 0xF8	; 248
     94a:	88 31       	cpi	r24, 0x18	; 24
     94c:	c9 f7       	brne	.-14     	; 0x940 <TWI_transmit+0x3c>
	
	TWDR = data; 
     94e:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); //TWI enable & Transmit data
     952:	84 e8       	ldi	r24, 0x84	; 132
     954:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0) || (TWSR & 0xF8) != 0x28); //wait ACK signal
     958:	e4 e7       	ldi	r30, 0x74	; 116
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	a1 e7       	ldi	r26, 0x71	; 113
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	88 23       	and	r24, r24
     964:	ec f7       	brge	.-6      	; 0x960 <TWI_transmit+0x5c>
     966:	8c 91       	ld	r24, X
     968:	88 7f       	andi	r24, 0xF8	; 248
     96a:	88 32       	cpi	r24, 0x28	; 40
     96c:	c9 f7       	brne	.-14     	; 0x960 <TWI_transmit+0x5c>
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //transmit end signal
     96e:	84 e9       	ldi	r24, 0x94	; 148
     970:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     974:	08 95       	ret

00000976 <__subsf3>:
     976:	50 58       	subi	r21, 0x80	; 128

00000978 <__addsf3>:
     978:	bb 27       	eor	r27, r27
     97a:	aa 27       	eor	r26, r26
     97c:	0e d0       	rcall	.+28     	; 0x99a <__addsf3x>
     97e:	70 c1       	rjmp	.+736    	; 0xc60 <__fp_round>
     980:	61 d1       	rcall	.+706    	; 0xc44 <__fp_pscA>
     982:	30 f0       	brcs	.+12     	; 0x990 <__addsf3+0x18>
     984:	66 d1       	rcall	.+716    	; 0xc52 <__fp_pscB>
     986:	20 f0       	brcs	.+8      	; 0x990 <__addsf3+0x18>
     988:	31 f4       	brne	.+12     	; 0x996 <__addsf3+0x1e>
     98a:	9f 3f       	cpi	r25, 0xFF	; 255
     98c:	11 f4       	brne	.+4      	; 0x992 <__addsf3+0x1a>
     98e:	1e f4       	brtc	.+6      	; 0x996 <__addsf3+0x1e>
     990:	56 c1       	rjmp	.+684    	; 0xc3e <__fp_nan>
     992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3+0x1e>
     994:	e0 95       	com	r30
     996:	e7 fb       	bst	r30, 7
     998:	4c c1       	rjmp	.+664    	; 0xc32 <__fp_inf>

0000099a <__addsf3x>:
     99a:	e9 2f       	mov	r30, r25
     99c:	72 d1       	rcall	.+740    	; 0xc82 <__fp_split3>
     99e:	80 f3       	brcs	.-32     	; 0x980 <__addsf3+0x8>
     9a0:	ba 17       	cp	r27, r26
     9a2:	62 07       	cpc	r22, r18
     9a4:	73 07       	cpc	r23, r19
     9a6:	84 07       	cpc	r24, r20
     9a8:	95 07       	cpc	r25, r21
     9aa:	18 f0       	brcs	.+6      	; 0x9b2 <__addsf3x+0x18>
     9ac:	71 f4       	brne	.+28     	; 0x9ca <__addsf3x+0x30>
     9ae:	9e f5       	brtc	.+102    	; 0xa16 <__addsf3x+0x7c>
     9b0:	8a c1       	rjmp	.+788    	; 0xcc6 <__fp_zero>
     9b2:	0e f4       	brtc	.+2      	; 0x9b6 <__addsf3x+0x1c>
     9b4:	e0 95       	com	r30
     9b6:	0b 2e       	mov	r0, r27
     9b8:	ba 2f       	mov	r27, r26
     9ba:	a0 2d       	mov	r26, r0
     9bc:	0b 01       	movw	r0, r22
     9be:	b9 01       	movw	r22, r18
     9c0:	90 01       	movw	r18, r0
     9c2:	0c 01       	movw	r0, r24
     9c4:	ca 01       	movw	r24, r20
     9c6:	a0 01       	movw	r20, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	ff 27       	eor	r31, r31
     9cc:	59 1b       	sub	r21, r25
     9ce:	99 f0       	breq	.+38     	; 0x9f6 <__addsf3x+0x5c>
     9d0:	59 3f       	cpi	r21, 0xF9	; 249
     9d2:	50 f4       	brcc	.+20     	; 0x9e8 <__addsf3x+0x4e>
     9d4:	50 3e       	cpi	r21, 0xE0	; 224
     9d6:	68 f1       	brcs	.+90     	; 0xa32 <__addsf3x+0x98>
     9d8:	1a 16       	cp	r1, r26
     9da:	f0 40       	sbci	r31, 0x00	; 0
     9dc:	a2 2f       	mov	r26, r18
     9de:	23 2f       	mov	r18, r19
     9e0:	34 2f       	mov	r19, r20
     9e2:	44 27       	eor	r20, r20
     9e4:	58 5f       	subi	r21, 0xF8	; 248
     9e6:	f3 cf       	rjmp	.-26     	; 0x9ce <__addsf3x+0x34>
     9e8:	46 95       	lsr	r20
     9ea:	37 95       	ror	r19
     9ec:	27 95       	ror	r18
     9ee:	a7 95       	ror	r26
     9f0:	f0 40       	sbci	r31, 0x00	; 0
     9f2:	53 95       	inc	r21
     9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__addsf3x+0x4e>
     9f6:	7e f4       	brtc	.+30     	; 0xa16 <__addsf3x+0x7c>
     9f8:	1f 16       	cp	r1, r31
     9fa:	ba 0b       	sbc	r27, r26
     9fc:	62 0b       	sbc	r22, r18
     9fe:	73 0b       	sbc	r23, r19
     a00:	84 0b       	sbc	r24, r20
     a02:	ba f0       	brmi	.+46     	; 0xa32 <__addsf3x+0x98>
     a04:	91 50       	subi	r25, 0x01	; 1
     a06:	a1 f0       	breq	.+40     	; 0xa30 <__addsf3x+0x96>
     a08:	ff 0f       	add	r31, r31
     a0a:	bb 1f       	adc	r27, r27
     a0c:	66 1f       	adc	r22, r22
     a0e:	77 1f       	adc	r23, r23
     a10:	88 1f       	adc	r24, r24
     a12:	c2 f7       	brpl	.-16     	; 0xa04 <__addsf3x+0x6a>
     a14:	0e c0       	rjmp	.+28     	; 0xa32 <__addsf3x+0x98>
     a16:	ba 0f       	add	r27, r26
     a18:	62 1f       	adc	r22, r18
     a1a:	73 1f       	adc	r23, r19
     a1c:	84 1f       	adc	r24, r20
     a1e:	48 f4       	brcc	.+18     	; 0xa32 <__addsf3x+0x98>
     a20:	87 95       	ror	r24
     a22:	77 95       	ror	r23
     a24:	67 95       	ror	r22
     a26:	b7 95       	ror	r27
     a28:	f7 95       	ror	r31
     a2a:	9e 3f       	cpi	r25, 0xFE	; 254
     a2c:	08 f0       	brcs	.+2      	; 0xa30 <__addsf3x+0x96>
     a2e:	b3 cf       	rjmp	.-154    	; 0x996 <__addsf3+0x1e>
     a30:	93 95       	inc	r25
     a32:	88 0f       	add	r24, r24
     a34:	08 f0       	brcs	.+2      	; 0xa38 <__addsf3x+0x9e>
     a36:	99 27       	eor	r25, r25
     a38:	ee 0f       	add	r30, r30
     a3a:	97 95       	ror	r25
     a3c:	87 95       	ror	r24
     a3e:	08 95       	ret

00000a40 <__cmpsf2>:
     a40:	d4 d0       	rcall	.+424    	; 0xbea <__fp_cmp>
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__cmpsf2+0x6>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	08 95       	ret

00000a48 <__divsf3>:
     a48:	0c d0       	rcall	.+24     	; 0xa62 <__divsf3x>
     a4a:	0a c1       	rjmp	.+532    	; 0xc60 <__fp_round>
     a4c:	02 d1       	rcall	.+516    	; 0xc52 <__fp_pscB>
     a4e:	40 f0       	brcs	.+16     	; 0xa60 <__divsf3+0x18>
     a50:	f9 d0       	rcall	.+498    	; 0xc44 <__fp_pscA>
     a52:	30 f0       	brcs	.+12     	; 0xa60 <__divsf3+0x18>
     a54:	21 f4       	brne	.+8      	; 0xa5e <__divsf3+0x16>
     a56:	5f 3f       	cpi	r21, 0xFF	; 255
     a58:	19 f0       	breq	.+6      	; 0xa60 <__divsf3+0x18>
     a5a:	eb c0       	rjmp	.+470    	; 0xc32 <__fp_inf>
     a5c:	51 11       	cpse	r21, r1
     a5e:	34 c1       	rjmp	.+616    	; 0xcc8 <__fp_szero>
     a60:	ee c0       	rjmp	.+476    	; 0xc3e <__fp_nan>

00000a62 <__divsf3x>:
     a62:	0f d1       	rcall	.+542    	; 0xc82 <__fp_split3>
     a64:	98 f3       	brcs	.-26     	; 0xa4c <__divsf3+0x4>

00000a66 <__divsf3_pse>:
     a66:	99 23       	and	r25, r25
     a68:	c9 f3       	breq	.-14     	; 0xa5c <__divsf3+0x14>
     a6a:	55 23       	and	r21, r21
     a6c:	b1 f3       	breq	.-20     	; 0xa5a <__divsf3+0x12>
     a6e:	95 1b       	sub	r25, r21
     a70:	55 0b       	sbc	r21, r21
     a72:	bb 27       	eor	r27, r27
     a74:	aa 27       	eor	r26, r26
     a76:	62 17       	cp	r22, r18
     a78:	73 07       	cpc	r23, r19
     a7a:	84 07       	cpc	r24, r20
     a7c:	38 f0       	brcs	.+14     	; 0xa8c <__divsf3_pse+0x26>
     a7e:	9f 5f       	subi	r25, 0xFF	; 255
     a80:	5f 4f       	sbci	r21, 0xFF	; 255
     a82:	22 0f       	add	r18, r18
     a84:	33 1f       	adc	r19, r19
     a86:	44 1f       	adc	r20, r20
     a88:	aa 1f       	adc	r26, r26
     a8a:	a9 f3       	breq	.-22     	; 0xa76 <__divsf3_pse+0x10>
     a8c:	33 d0       	rcall	.+102    	; 0xaf4 <__divsf3_pse+0x8e>
     a8e:	0e 2e       	mov	r0, r30
     a90:	3a f0       	brmi	.+14     	; 0xaa0 <__divsf3_pse+0x3a>
     a92:	e0 e8       	ldi	r30, 0x80	; 128
     a94:	30 d0       	rcall	.+96     	; 0xaf6 <__divsf3_pse+0x90>
     a96:	91 50       	subi	r25, 0x01	; 1
     a98:	50 40       	sbci	r21, 0x00	; 0
     a9a:	e6 95       	lsr	r30
     a9c:	00 1c       	adc	r0, r0
     a9e:	ca f7       	brpl	.-14     	; 0xa92 <__divsf3_pse+0x2c>
     aa0:	29 d0       	rcall	.+82     	; 0xaf4 <__divsf3_pse+0x8e>
     aa2:	fe 2f       	mov	r31, r30
     aa4:	27 d0       	rcall	.+78     	; 0xaf4 <__divsf3_pse+0x8e>
     aa6:	66 0f       	add	r22, r22
     aa8:	77 1f       	adc	r23, r23
     aaa:	88 1f       	adc	r24, r24
     aac:	bb 1f       	adc	r27, r27
     aae:	26 17       	cp	r18, r22
     ab0:	37 07       	cpc	r19, r23
     ab2:	48 07       	cpc	r20, r24
     ab4:	ab 07       	cpc	r26, r27
     ab6:	b0 e8       	ldi	r27, 0x80	; 128
     ab8:	09 f0       	breq	.+2      	; 0xabc <__divsf3_pse+0x56>
     aba:	bb 0b       	sbc	r27, r27
     abc:	80 2d       	mov	r24, r0
     abe:	bf 01       	movw	r22, r30
     ac0:	ff 27       	eor	r31, r31
     ac2:	93 58       	subi	r25, 0x83	; 131
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	2a f0       	brmi	.+10     	; 0xad2 <__divsf3_pse+0x6c>
     ac8:	9e 3f       	cpi	r25, 0xFE	; 254
     aca:	51 05       	cpc	r21, r1
     acc:	68 f0       	brcs	.+26     	; 0xae8 <__divsf3_pse+0x82>
     ace:	b1 c0       	rjmp	.+354    	; 0xc32 <__fp_inf>
     ad0:	fb c0       	rjmp	.+502    	; 0xcc8 <__fp_szero>
     ad2:	5f 3f       	cpi	r21, 0xFF	; 255
     ad4:	ec f3       	brlt	.-6      	; 0xad0 <__divsf3_pse+0x6a>
     ad6:	98 3e       	cpi	r25, 0xE8	; 232
     ad8:	dc f3       	brlt	.-10     	; 0xad0 <__divsf3_pse+0x6a>
     ada:	86 95       	lsr	r24
     adc:	77 95       	ror	r23
     ade:	67 95       	ror	r22
     ae0:	b7 95       	ror	r27
     ae2:	f7 95       	ror	r31
     ae4:	9f 5f       	subi	r25, 0xFF	; 255
     ae6:	c9 f7       	brne	.-14     	; 0xada <__divsf3_pse+0x74>
     ae8:	88 0f       	add	r24, r24
     aea:	91 1d       	adc	r25, r1
     aec:	96 95       	lsr	r25
     aee:	87 95       	ror	r24
     af0:	97 f9       	bld	r25, 7
     af2:	08 95       	ret
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	88 1f       	adc	r24, r24
     afc:	bb 1f       	adc	r27, r27
     afe:	62 17       	cp	r22, r18
     b00:	73 07       	cpc	r23, r19
     b02:	84 07       	cpc	r24, r20
     b04:	ba 07       	cpc	r27, r26
     b06:	20 f0       	brcs	.+8      	; 0xb10 <__divsf3_pse+0xaa>
     b08:	62 1b       	sub	r22, r18
     b0a:	73 0b       	sbc	r23, r19
     b0c:	84 0b       	sbc	r24, r20
     b0e:	ba 0b       	sbc	r27, r26
     b10:	ee 1f       	adc	r30, r30
     b12:	88 f7       	brcc	.-30     	; 0xaf6 <__divsf3_pse+0x90>
     b14:	e0 95       	com	r30
     b16:	08 95       	ret

00000b18 <__fixunssfsi>:
     b18:	bc d0       	rcall	.+376    	; 0xc92 <__fp_splitA>
     b1a:	88 f0       	brcs	.+34     	; 0xb3e <__fixunssfsi+0x26>
     b1c:	9f 57       	subi	r25, 0x7F	; 127
     b1e:	90 f0       	brcs	.+36     	; 0xb44 <__fixunssfsi+0x2c>
     b20:	b9 2f       	mov	r27, r25
     b22:	99 27       	eor	r25, r25
     b24:	b7 51       	subi	r27, 0x17	; 23
     b26:	a0 f0       	brcs	.+40     	; 0xb50 <__fixunssfsi+0x38>
     b28:	d1 f0       	breq	.+52     	; 0xb5e <__fixunssfsi+0x46>
     b2a:	66 0f       	add	r22, r22
     b2c:	77 1f       	adc	r23, r23
     b2e:	88 1f       	adc	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	1a f0       	brmi	.+6      	; 0xb3a <__fixunssfsi+0x22>
     b34:	ba 95       	dec	r27
     b36:	c9 f7       	brne	.-14     	; 0xb2a <__fixunssfsi+0x12>
     b38:	12 c0       	rjmp	.+36     	; 0xb5e <__fixunssfsi+0x46>
     b3a:	b1 30       	cpi	r27, 0x01	; 1
     b3c:	81 f0       	breq	.+32     	; 0xb5e <__fixunssfsi+0x46>
     b3e:	c3 d0       	rcall	.+390    	; 0xcc6 <__fp_zero>
     b40:	b1 e0       	ldi	r27, 0x01	; 1
     b42:	08 95       	ret
     b44:	c0 c0       	rjmp	.+384    	; 0xcc6 <__fp_zero>
     b46:	67 2f       	mov	r22, r23
     b48:	78 2f       	mov	r23, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	b8 5f       	subi	r27, 0xF8	; 248
     b4e:	39 f0       	breq	.+14     	; 0xb5e <__fixunssfsi+0x46>
     b50:	b9 3f       	cpi	r27, 0xF9	; 249
     b52:	cc f3       	brlt	.-14     	; 0xb46 <__fixunssfsi+0x2e>
     b54:	86 95       	lsr	r24
     b56:	77 95       	ror	r23
     b58:	67 95       	ror	r22
     b5a:	b3 95       	inc	r27
     b5c:	d9 f7       	brne	.-10     	; 0xb54 <__fixunssfsi+0x3c>
     b5e:	3e f4       	brtc	.+14     	; 0xb6e <__fixunssfsi+0x56>
     b60:	90 95       	com	r25
     b62:	80 95       	com	r24
     b64:	70 95       	com	r23
     b66:	61 95       	neg	r22
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	8f 4f       	sbci	r24, 0xFF	; 255
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	08 95       	ret

00000b70 <__floatunsisf>:
     b70:	e8 94       	clt
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <__floatsisf+0x12>

00000b74 <__floatsisf>:
     b74:	97 fb       	bst	r25, 7
     b76:	3e f4       	brtc	.+14     	; 0xb86 <__floatsisf+0x12>
     b78:	90 95       	com	r25
     b7a:	80 95       	com	r24
     b7c:	70 95       	com	r23
     b7e:	61 95       	neg	r22
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	8f 4f       	sbci	r24, 0xFF	; 255
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	99 23       	and	r25, r25
     b88:	a9 f0       	breq	.+42     	; 0xbb4 <__floatsisf+0x40>
     b8a:	f9 2f       	mov	r31, r25
     b8c:	96 e9       	ldi	r25, 0x96	; 150
     b8e:	bb 27       	eor	r27, r27
     b90:	93 95       	inc	r25
     b92:	f6 95       	lsr	r31
     b94:	87 95       	ror	r24
     b96:	77 95       	ror	r23
     b98:	67 95       	ror	r22
     b9a:	b7 95       	ror	r27
     b9c:	f1 11       	cpse	r31, r1
     b9e:	f8 cf       	rjmp	.-16     	; 0xb90 <__floatsisf+0x1c>
     ba0:	fa f4       	brpl	.+62     	; 0xbe0 <__floatsisf+0x6c>
     ba2:	bb 0f       	add	r27, r27
     ba4:	11 f4       	brne	.+4      	; 0xbaa <__floatsisf+0x36>
     ba6:	60 ff       	sbrs	r22, 0
     ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <__floatsisf+0x6c>
     baa:	6f 5f       	subi	r22, 0xFF	; 255
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	8f 4f       	sbci	r24, 0xFF	; 255
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <__floatsisf+0x6c>
     bb4:	88 23       	and	r24, r24
     bb6:	11 f0       	breq	.+4      	; 0xbbc <__floatsisf+0x48>
     bb8:	96 e9       	ldi	r25, 0x96	; 150
     bba:	11 c0       	rjmp	.+34     	; 0xbde <__floatsisf+0x6a>
     bbc:	77 23       	and	r23, r23
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__floatsisf+0x54>
     bc0:	9e e8       	ldi	r25, 0x8E	; 142
     bc2:	87 2f       	mov	r24, r23
     bc4:	76 2f       	mov	r23, r22
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <__floatsisf+0x5e>
     bc8:	66 23       	and	r22, r22
     bca:	71 f0       	breq	.+28     	; 0xbe8 <__floatsisf+0x74>
     bcc:	96 e8       	ldi	r25, 0x86	; 134
     bce:	86 2f       	mov	r24, r22
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	2a f0       	brmi	.+10     	; 0xbe0 <__floatsisf+0x6c>
     bd6:	9a 95       	dec	r25
     bd8:	66 0f       	add	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	88 1f       	adc	r24, r24
     bde:	da f7       	brpl	.-10     	; 0xbd6 <__floatsisf+0x62>
     be0:	88 0f       	add	r24, r24
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	97 f9       	bld	r25, 7
     be8:	08 95       	ret

00000bea <__fp_cmp>:
     bea:	99 0f       	add	r25, r25
     bec:	00 08       	sbc	r0, r0
     bee:	55 0f       	add	r21, r21
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	e0 e8       	ldi	r30, 0x80	; 128
     bf4:	fe ef       	ldi	r31, 0xFE	; 254
     bf6:	16 16       	cp	r1, r22
     bf8:	17 06       	cpc	r1, r23
     bfa:	e8 07       	cpc	r30, r24
     bfc:	f9 07       	cpc	r31, r25
     bfe:	c0 f0       	brcs	.+48     	; 0xc30 <__fp_cmp+0x46>
     c00:	12 16       	cp	r1, r18
     c02:	13 06       	cpc	r1, r19
     c04:	e4 07       	cpc	r30, r20
     c06:	f5 07       	cpc	r31, r21
     c08:	98 f0       	brcs	.+38     	; 0xc30 <__fp_cmp+0x46>
     c0a:	62 1b       	sub	r22, r18
     c0c:	73 0b       	sbc	r23, r19
     c0e:	84 0b       	sbc	r24, r20
     c10:	95 0b       	sbc	r25, r21
     c12:	39 f4       	brne	.+14     	; 0xc22 <__fp_cmp+0x38>
     c14:	0a 26       	eor	r0, r26
     c16:	61 f0       	breq	.+24     	; 0xc30 <__fp_cmp+0x46>
     c18:	23 2b       	or	r18, r19
     c1a:	24 2b       	or	r18, r20
     c1c:	25 2b       	or	r18, r21
     c1e:	21 f4       	brne	.+8      	; 0xc28 <__fp_cmp+0x3e>
     c20:	08 95       	ret
     c22:	0a 26       	eor	r0, r26
     c24:	09 f4       	brne	.+2      	; 0xc28 <__fp_cmp+0x3e>
     c26:	a1 40       	sbci	r26, 0x01	; 1
     c28:	a6 95       	lsr	r26
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	81 1d       	adc	r24, r1
     c2e:	81 1d       	adc	r24, r1
     c30:	08 95       	ret

00000c32 <__fp_inf>:
     c32:	97 f9       	bld	r25, 7
     c34:	9f 67       	ori	r25, 0x7F	; 127
     c36:	80 e8       	ldi	r24, 0x80	; 128
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	08 95       	ret

00000c3e <__fp_nan>:
     c3e:	9f ef       	ldi	r25, 0xFF	; 255
     c40:	80 ec       	ldi	r24, 0xC0	; 192
     c42:	08 95       	ret

00000c44 <__fp_pscA>:
     c44:	00 24       	eor	r0, r0
     c46:	0a 94       	dec	r0
     c48:	16 16       	cp	r1, r22
     c4a:	17 06       	cpc	r1, r23
     c4c:	18 06       	cpc	r1, r24
     c4e:	09 06       	cpc	r0, r25
     c50:	08 95       	ret

00000c52 <__fp_pscB>:
     c52:	00 24       	eor	r0, r0
     c54:	0a 94       	dec	r0
     c56:	12 16       	cp	r1, r18
     c58:	13 06       	cpc	r1, r19
     c5a:	14 06       	cpc	r1, r20
     c5c:	05 06       	cpc	r0, r21
     c5e:	08 95       	ret

00000c60 <__fp_round>:
     c60:	09 2e       	mov	r0, r25
     c62:	03 94       	inc	r0
     c64:	00 0c       	add	r0, r0
     c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0xc>
     c68:	88 23       	and	r24, r24
     c6a:	52 f0       	brmi	.+20     	; 0xc80 <__fp_round+0x20>
     c6c:	bb 0f       	add	r27, r27
     c6e:	40 f4       	brcc	.+16     	; 0xc80 <__fp_round+0x20>
     c70:	bf 2b       	or	r27, r31
     c72:	11 f4       	brne	.+4      	; 0xc78 <__fp_round+0x18>
     c74:	60 ff       	sbrs	r22, 0
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <__fp_round+0x20>
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	8f 4f       	sbci	r24, 0xFF	; 255
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	08 95       	ret

00000c82 <__fp_split3>:
     c82:	57 fd       	sbrc	r21, 7
     c84:	90 58       	subi	r25, 0x80	; 128
     c86:	44 0f       	add	r20, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	59 f0       	breq	.+22     	; 0xca2 <__fp_splitA+0x10>
     c8c:	5f 3f       	cpi	r21, 0xFF	; 255
     c8e:	71 f0       	breq	.+28     	; 0xcac <__fp_splitA+0x1a>
     c90:	47 95       	ror	r20

00000c92 <__fp_splitA>:
     c92:	88 0f       	add	r24, r24
     c94:	97 fb       	bst	r25, 7
     c96:	99 1f       	adc	r25, r25
     c98:	61 f0       	breq	.+24     	; 0xcb2 <__fp_splitA+0x20>
     c9a:	9f 3f       	cpi	r25, 0xFF	; 255
     c9c:	79 f0       	breq	.+30     	; 0xcbc <__fp_splitA+0x2a>
     c9e:	87 95       	ror	r24
     ca0:	08 95       	ret
     ca2:	12 16       	cp	r1, r18
     ca4:	13 06       	cpc	r1, r19
     ca6:	14 06       	cpc	r1, r20
     ca8:	55 1f       	adc	r21, r21
     caa:	f2 cf       	rjmp	.-28     	; 0xc90 <__fp_split3+0xe>
     cac:	46 95       	lsr	r20
     cae:	f1 df       	rcall	.-30     	; 0xc92 <__fp_splitA>
     cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <__fp_splitA+0x30>
     cb2:	16 16       	cp	r1, r22
     cb4:	17 06       	cpc	r1, r23
     cb6:	18 06       	cpc	r1, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	f1 cf       	rjmp	.-30     	; 0xc9e <__fp_splitA+0xc>
     cbc:	86 95       	lsr	r24
     cbe:	71 05       	cpc	r23, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	08 94       	sec
     cc4:	08 95       	ret

00000cc6 <__fp_zero>:
     cc6:	e8 94       	clt

00000cc8 <__fp_szero>:
     cc8:	bb 27       	eor	r27, r27
     cca:	66 27       	eor	r22, r22
     ccc:	77 27       	eor	r23, r23
     cce:	cb 01       	movw	r24, r22
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <__gesf2>:
     cd4:	8a df       	rcall	.-236    	; 0xbea <__fp_cmp>
     cd6:	08 f4       	brcc	.+2      	; 0xcda <__gesf2+0x6>
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	08 95       	ret
     cdc:	0e f0       	brts	.+2      	; 0xce0 <__gesf2+0xc>
     cde:	a6 c0       	rjmp	.+332    	; 0xe2c <__fp_mpack>
     ce0:	ae cf       	rjmp	.-164    	; 0xc3e <__fp_nan>
     ce2:	68 94       	set
     ce4:	a6 cf       	rjmp	.-180    	; 0xc32 <__fp_inf>

00000ce6 <log>:
     ce6:	d5 df       	rcall	.-86     	; 0xc92 <__fp_splitA>
     ce8:	c8 f3       	brcs	.-14     	; 0xcdc <__gesf2+0x8>
     cea:	99 23       	and	r25, r25
     cec:	d1 f3       	breq	.-12     	; 0xce2 <__gesf2+0xe>
     cee:	c6 f3       	brts	.-16     	; 0xce0 <__gesf2+0xc>
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	1f 93       	push	r17
     cf6:	0f 93       	push	r16
     cf8:	ff 92       	push	r15
     cfa:	c9 2f       	mov	r28, r25
     cfc:	dd 27       	eor	r29, r29
     cfe:	88 23       	and	r24, r24
     d00:	2a f0       	brmi	.+10     	; 0xd0c <log+0x26>
     d02:	21 97       	sbiw	r28, 0x01	; 1
     d04:	66 0f       	add	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	88 1f       	adc	r24, r24
     d0a:	da f7       	brpl	.-10     	; 0xd02 <log+0x1c>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f eb       	ldi	r21, 0xBF	; 191
     d14:	9f e3       	ldi	r25, 0x3F	; 63
     d16:	88 39       	cpi	r24, 0x98	; 152
     d18:	20 f0       	brcs	.+8      	; 0xd22 <log+0x3c>
     d1a:	80 3e       	cpi	r24, 0xE0	; 224
     d1c:	30 f0       	brcs	.+12     	; 0xd2a <log+0x44>
     d1e:	21 96       	adiw	r28, 0x01	; 1
     d20:	8f 77       	andi	r24, 0x7F	; 127
     d22:	2a de       	rcall	.-940    	; 0x978 <__addsf3>
     d24:	ec e8       	ldi	r30, 0x8C	; 140
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <log+0x4a>
     d2a:	26 de       	rcall	.-948    	; 0x978 <__addsf3>
     d2c:	e9 eb       	ldi	r30, 0xB9	; 185
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	8b d0       	rcall	.+278    	; 0xe48 <__fp_powser>
     d32:	8b 01       	movw	r16, r22
     d34:	be 01       	movw	r22, r28
     d36:	ec 01       	movw	r28, r24
     d38:	fb 2e       	mov	r15, r27
     d3a:	6f 57       	subi	r22, 0x7F	; 127
     d3c:	71 09       	sbc	r23, r1
     d3e:	75 95       	asr	r23
     d40:	77 1f       	adc	r23, r23
     d42:	88 0b       	sbc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	16 df       	rcall	.-468    	; 0xb74 <__floatsisf>
     d48:	28 e1       	ldi	r18, 0x18	; 24
     d4a:	32 e7       	ldi	r19, 0x72	; 114
     d4c:	41 e3       	ldi	r20, 0x31	; 49
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	16 d0       	rcall	.+44     	; 0xd7e <__mulsf3x>
     d52:	af 2d       	mov	r26, r15
     d54:	98 01       	movw	r18, r16
     d56:	ae 01       	movw	r20, r28
     d58:	ff 90       	pop	r15
     d5a:	0f 91       	pop	r16
     d5c:	1f 91       	pop	r17
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	1b de       	rcall	.-970    	; 0x99a <__addsf3x>
     d64:	7d cf       	rjmp	.-262    	; 0xc60 <__fp_round>

00000d66 <__mulsf3>:
     d66:	0b d0       	rcall	.+22     	; 0xd7e <__mulsf3x>
     d68:	7b cf       	rjmp	.-266    	; 0xc60 <__fp_round>
     d6a:	6c df       	rcall	.-296    	; 0xc44 <__fp_pscA>
     d6c:	28 f0       	brcs	.+10     	; 0xd78 <__mulsf3+0x12>
     d6e:	71 df       	rcall	.-286    	; 0xc52 <__fp_pscB>
     d70:	18 f0       	brcs	.+6      	; 0xd78 <__mulsf3+0x12>
     d72:	95 23       	and	r25, r21
     d74:	09 f0       	breq	.+2      	; 0xd78 <__mulsf3+0x12>
     d76:	5d cf       	rjmp	.-326    	; 0xc32 <__fp_inf>
     d78:	62 cf       	rjmp	.-316    	; 0xc3e <__fp_nan>
     d7a:	11 24       	eor	r1, r1
     d7c:	a5 cf       	rjmp	.-182    	; 0xcc8 <__fp_szero>

00000d7e <__mulsf3x>:
     d7e:	81 df       	rcall	.-254    	; 0xc82 <__fp_split3>
     d80:	a0 f3       	brcs	.-24     	; 0xd6a <__mulsf3+0x4>

00000d82 <__mulsf3_pse>:
     d82:	95 9f       	mul	r25, r21
     d84:	d1 f3       	breq	.-12     	; 0xd7a <__mulsf3+0x14>
     d86:	95 0f       	add	r25, r21
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	55 1f       	adc	r21, r21
     d8c:	62 9f       	mul	r22, r18
     d8e:	f0 01       	movw	r30, r0
     d90:	72 9f       	mul	r23, r18
     d92:	bb 27       	eor	r27, r27
     d94:	f0 0d       	add	r31, r0
     d96:	b1 1d       	adc	r27, r1
     d98:	63 9f       	mul	r22, r19
     d9a:	aa 27       	eor	r26, r26
     d9c:	f0 0d       	add	r31, r0
     d9e:	b1 1d       	adc	r27, r1
     da0:	aa 1f       	adc	r26, r26
     da2:	64 9f       	mul	r22, r20
     da4:	66 27       	eor	r22, r22
     da6:	b0 0d       	add	r27, r0
     da8:	a1 1d       	adc	r26, r1
     daa:	66 1f       	adc	r22, r22
     dac:	82 9f       	mul	r24, r18
     dae:	22 27       	eor	r18, r18
     db0:	b0 0d       	add	r27, r0
     db2:	a1 1d       	adc	r26, r1
     db4:	62 1f       	adc	r22, r18
     db6:	73 9f       	mul	r23, r19
     db8:	b0 0d       	add	r27, r0
     dba:	a1 1d       	adc	r26, r1
     dbc:	62 1f       	adc	r22, r18
     dbe:	83 9f       	mul	r24, r19
     dc0:	a0 0d       	add	r26, r0
     dc2:	61 1d       	adc	r22, r1
     dc4:	22 1f       	adc	r18, r18
     dc6:	74 9f       	mul	r23, r20
     dc8:	33 27       	eor	r19, r19
     dca:	a0 0d       	add	r26, r0
     dcc:	61 1d       	adc	r22, r1
     dce:	23 1f       	adc	r18, r19
     dd0:	84 9f       	mul	r24, r20
     dd2:	60 0d       	add	r22, r0
     dd4:	21 1d       	adc	r18, r1
     dd6:	82 2f       	mov	r24, r18
     dd8:	76 2f       	mov	r23, r22
     dda:	6a 2f       	mov	r22, r26
     ddc:	11 24       	eor	r1, r1
     dde:	9f 57       	subi	r25, 0x7F	; 127
     de0:	50 40       	sbci	r21, 0x00	; 0
     de2:	8a f0       	brmi	.+34     	; 0xe06 <__mulsf3_pse+0x84>
     de4:	e1 f0       	breq	.+56     	; 0xe1e <__mulsf3_pse+0x9c>
     de6:	88 23       	and	r24, r24
     de8:	4a f0       	brmi	.+18     	; 0xdfc <__mulsf3_pse+0x7a>
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	bb 1f       	adc	r27, r27
     df0:	66 1f       	adc	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	88 1f       	adc	r24, r24
     df6:	91 50       	subi	r25, 0x01	; 1
     df8:	50 40       	sbci	r21, 0x00	; 0
     dfa:	a9 f7       	brne	.-22     	; 0xde6 <__mulsf3_pse+0x64>
     dfc:	9e 3f       	cpi	r25, 0xFE	; 254
     dfe:	51 05       	cpc	r21, r1
     e00:	70 f0       	brcs	.+28     	; 0xe1e <__mulsf3_pse+0x9c>
     e02:	17 cf       	rjmp	.-466    	; 0xc32 <__fp_inf>
     e04:	61 cf       	rjmp	.-318    	; 0xcc8 <__fp_szero>
     e06:	5f 3f       	cpi	r21, 0xFF	; 255
     e08:	ec f3       	brlt	.-6      	; 0xe04 <__mulsf3_pse+0x82>
     e0a:	98 3e       	cpi	r25, 0xE8	; 232
     e0c:	dc f3       	brlt	.-10     	; 0xe04 <__mulsf3_pse+0x82>
     e0e:	86 95       	lsr	r24
     e10:	77 95       	ror	r23
     e12:	67 95       	ror	r22
     e14:	b7 95       	ror	r27
     e16:	f7 95       	ror	r31
     e18:	e7 95       	ror	r30
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	c1 f7       	brne	.-16     	; 0xe0e <__mulsf3_pse+0x8c>
     e1e:	fe 2b       	or	r31, r30
     e20:	88 0f       	add	r24, r24
     e22:	91 1d       	adc	r25, r1
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	97 f9       	bld	r25, 7
     e2a:	08 95       	ret

00000e2c <__fp_mpack>:
     e2c:	9f 3f       	cpi	r25, 0xFF	; 255
     e2e:	31 f0       	breq	.+12     	; 0xe3c <__fp_mpack_finite+0xc>

00000e30 <__fp_mpack_finite>:
     e30:	91 50       	subi	r25, 0x01	; 1
     e32:	20 f4       	brcc	.+8      	; 0xe3c <__fp_mpack_finite+0xc>
     e34:	87 95       	ror	r24
     e36:	77 95       	ror	r23
     e38:	67 95       	ror	r22
     e3a:	b7 95       	ror	r27
     e3c:	88 0f       	add	r24, r24
     e3e:	91 1d       	adc	r25, r1
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	97 f9       	bld	r25, 7
     e46:	08 95       	ret

00000e48 <__fp_powser>:
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	1f 93       	push	r17
     e4e:	0f 93       	push	r16
     e50:	ff 92       	push	r15
     e52:	ef 92       	push	r14
     e54:	df 92       	push	r13
     e56:	7b 01       	movw	r14, r22
     e58:	8c 01       	movw	r16, r24
     e5a:	68 94       	set
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <__fp_powser+0x20>
     e5e:	da 2e       	mov	r13, r26
     e60:	ef 01       	movw	r28, r30
     e62:	8d df       	rcall	.-230    	; 0xd7e <__mulsf3x>
     e64:	fe 01       	movw	r30, r28
     e66:	e8 94       	clt
     e68:	a5 91       	lpm	r26, Z+
     e6a:	25 91       	lpm	r18, Z+
     e6c:	35 91       	lpm	r19, Z+
     e6e:	45 91       	lpm	r20, Z+
     e70:	55 91       	lpm	r21, Z+
     e72:	ae f3       	brts	.-22     	; 0xe5e <__fp_powser+0x16>
     e74:	ef 01       	movw	r28, r30
     e76:	91 dd       	rcall	.-1246   	; 0x99a <__addsf3x>
     e78:	fe 01       	movw	r30, r28
     e7a:	97 01       	movw	r18, r14
     e7c:	a8 01       	movw	r20, r16
     e7e:	da 94       	dec	r13
     e80:	79 f7       	brne	.-34     	; 0xe60 <__fp_powser+0x18>
     e82:	df 90       	pop	r13
     e84:	ef 90       	pop	r14
     e86:	ff 90       	pop	r15
     e88:	0f 91       	pop	r16
     e8a:	1f 91       	pop	r17
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <sprintf>:
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	2e 97       	sbiw	r28, 0x0e	; 14
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	0d 89       	ldd	r16, Y+21	; 0x15
     eac:	1e 89       	ldd	r17, Y+22	; 0x16
     eae:	86 e0       	ldi	r24, 0x06	; 6
     eb0:	8c 83       	std	Y+4, r24	; 0x04
     eb2:	1a 83       	std	Y+2, r17	; 0x02
     eb4:	09 83       	std	Y+1, r16	; 0x01
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	9f e7       	ldi	r25, 0x7F	; 127
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	ae 01       	movw	r20, r28
     ec0:	47 5e       	subi	r20, 0xE7	; 231
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	6f 89       	ldd	r22, Y+23	; 0x17
     ec6:	78 8d       	ldd	r23, Y+24	; 0x18
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	10 d0       	rcall	.+32     	; 0xeee <vfprintf>
     ece:	ef 81       	ldd	r30, Y+7	; 0x07
     ed0:	f8 85       	ldd	r31, Y+8	; 0x08
     ed2:	e0 0f       	add	r30, r16
     ed4:	f1 1f       	adc	r31, r17
     ed6:	10 82       	st	Z, r1
     ed8:	2e 96       	adiw	r28, 0x0e	; 14
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <vfprintf>:
     eee:	2f 92       	push	r2
     ef0:	3f 92       	push	r3
     ef2:	4f 92       	push	r4
     ef4:	5f 92       	push	r5
     ef6:	6f 92       	push	r6
     ef8:	7f 92       	push	r7
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2b 97       	sbiw	r28, 0x0b	; 11
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	6c 01       	movw	r12, r24
     f24:	7b 01       	movw	r14, r22
     f26:	8a 01       	movw	r16, r20
     f28:	fc 01       	movw	r30, r24
     f2a:	17 82       	std	Z+7, r1	; 0x07
     f2c:	16 82       	std	Z+6, r1	; 0x06
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	81 ff       	sbrs	r24, 1
     f32:	bf c1       	rjmp	.+894    	; 0x12b2 <__stack+0x1b3>
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	3c 01       	movw	r6, r24
     f3a:	f6 01       	movw	r30, r12
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	f7 01       	movw	r30, r14
     f40:	93 fd       	sbrc	r25, 3
     f42:	85 91       	lpm	r24, Z+
     f44:	93 ff       	sbrs	r25, 3
     f46:	81 91       	ld	r24, Z+
     f48:	7f 01       	movw	r14, r30
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <vfprintf+0x62>
     f4e:	ad c1       	rjmp	.+858    	; 0x12aa <__stack+0x1ab>
     f50:	85 32       	cpi	r24, 0x25	; 37
     f52:	39 f4       	brne	.+14     	; 0xf62 <vfprintf+0x74>
     f54:	93 fd       	sbrc	r25, 3
     f56:	85 91       	lpm	r24, Z+
     f58:	93 ff       	sbrs	r25, 3
     f5a:	81 91       	ld	r24, Z+
     f5c:	7f 01       	movw	r14, r30
     f5e:	85 32       	cpi	r24, 0x25	; 37
     f60:	21 f4       	brne	.+8      	; 0xf6a <vfprintf+0x7c>
     f62:	b6 01       	movw	r22, r12
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	d6 d1       	rcall	.+940    	; 0x1314 <fputc>
     f68:	e8 cf       	rjmp	.-48     	; 0xf3a <vfprintf+0x4c>
     f6a:	91 2c       	mov	r9, r1
     f6c:	21 2c       	mov	r2, r1
     f6e:	31 2c       	mov	r3, r1
     f70:	ff e1       	ldi	r31, 0x1F	; 31
     f72:	f3 15       	cp	r31, r3
     f74:	d8 f0       	brcs	.+54     	; 0xfac <vfprintf+0xbe>
     f76:	8b 32       	cpi	r24, 0x2B	; 43
     f78:	79 f0       	breq	.+30     	; 0xf98 <vfprintf+0xaa>
     f7a:	38 f4       	brcc	.+14     	; 0xf8a <vfprintf+0x9c>
     f7c:	80 32       	cpi	r24, 0x20	; 32
     f7e:	79 f0       	breq	.+30     	; 0xf9e <vfprintf+0xb0>
     f80:	83 32       	cpi	r24, 0x23	; 35
     f82:	a1 f4       	brne	.+40     	; 0xfac <vfprintf+0xbe>
     f84:	23 2d       	mov	r18, r3
     f86:	20 61       	ori	r18, 0x10	; 16
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <vfprintf+0xd6>
     f8a:	8d 32       	cpi	r24, 0x2D	; 45
     f8c:	61 f0       	breq	.+24     	; 0xfa6 <vfprintf+0xb8>
     f8e:	80 33       	cpi	r24, 0x30	; 48
     f90:	69 f4       	brne	.+26     	; 0xfac <vfprintf+0xbe>
     f92:	23 2d       	mov	r18, r3
     f94:	21 60       	ori	r18, 0x01	; 1
     f96:	16 c0       	rjmp	.+44     	; 0xfc4 <vfprintf+0xd6>
     f98:	83 2d       	mov	r24, r3
     f9a:	82 60       	ori	r24, 0x02	; 2
     f9c:	38 2e       	mov	r3, r24
     f9e:	e3 2d       	mov	r30, r3
     fa0:	e4 60       	ori	r30, 0x04	; 4
     fa2:	3e 2e       	mov	r3, r30
     fa4:	2a c0       	rjmp	.+84     	; 0xffa <vfprintf+0x10c>
     fa6:	f3 2d       	mov	r31, r3
     fa8:	f8 60       	ori	r31, 0x08	; 8
     faa:	1d c0       	rjmp	.+58     	; 0xfe6 <vfprintf+0xf8>
     fac:	37 fc       	sbrc	r3, 7
     fae:	2d c0       	rjmp	.+90     	; 0x100a <vfprintf+0x11c>
     fb0:	20 ed       	ldi	r18, 0xD0	; 208
     fb2:	28 0f       	add	r18, r24
     fb4:	2a 30       	cpi	r18, 0x0A	; 10
     fb6:	40 f0       	brcs	.+16     	; 0xfc8 <vfprintf+0xda>
     fb8:	8e 32       	cpi	r24, 0x2E	; 46
     fba:	b9 f4       	brne	.+46     	; 0xfea <vfprintf+0xfc>
     fbc:	36 fc       	sbrc	r3, 6
     fbe:	75 c1       	rjmp	.+746    	; 0x12aa <__stack+0x1ab>
     fc0:	23 2d       	mov	r18, r3
     fc2:	20 64       	ori	r18, 0x40	; 64
     fc4:	32 2e       	mov	r3, r18
     fc6:	19 c0       	rjmp	.+50     	; 0xffa <vfprintf+0x10c>
     fc8:	36 fe       	sbrs	r3, 6
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <vfprintf+0xea>
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	98 9e       	mul	r9, r24
     fd0:	20 0d       	add	r18, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	92 2e       	mov	r9, r18
     fd6:	11 c0       	rjmp	.+34     	; 0xffa <vfprintf+0x10c>
     fd8:	ea e0       	ldi	r30, 0x0A	; 10
     fda:	2e 9e       	mul	r2, r30
     fdc:	20 0d       	add	r18, r0
     fde:	11 24       	eor	r1, r1
     fe0:	22 2e       	mov	r2, r18
     fe2:	f3 2d       	mov	r31, r3
     fe4:	f0 62       	ori	r31, 0x20	; 32
     fe6:	3f 2e       	mov	r3, r31
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <vfprintf+0x10c>
     fea:	8c 36       	cpi	r24, 0x6C	; 108
     fec:	21 f4       	brne	.+8      	; 0xff6 <vfprintf+0x108>
     fee:	83 2d       	mov	r24, r3
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	38 2e       	mov	r3, r24
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x10c>
     ff6:	88 36       	cpi	r24, 0x68	; 104
     ff8:	41 f4       	brne	.+16     	; 0x100a <vfprintf+0x11c>
     ffa:	f7 01       	movw	r30, r14
     ffc:	93 fd       	sbrc	r25, 3
     ffe:	85 91       	lpm	r24, Z+
    1000:	93 ff       	sbrs	r25, 3
    1002:	81 91       	ld	r24, Z+
    1004:	7f 01       	movw	r14, r30
    1006:	81 11       	cpse	r24, r1
    1008:	b3 cf       	rjmp	.-154    	; 0xf70 <vfprintf+0x82>
    100a:	98 2f       	mov	r25, r24
    100c:	9f 7d       	andi	r25, 0xDF	; 223
    100e:	95 54       	subi	r25, 0x45	; 69
    1010:	93 30       	cpi	r25, 0x03	; 3
    1012:	28 f4       	brcc	.+10     	; 0x101e <vfprintf+0x130>
    1014:	0c 5f       	subi	r16, 0xFC	; 252
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	9f e3       	ldi	r25, 0x3F	; 63
    101a:	99 83       	std	Y+1, r25	; 0x01
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <vfprintf+0x14a>
    101e:	83 36       	cpi	r24, 0x63	; 99
    1020:	31 f0       	breq	.+12     	; 0x102e <vfprintf+0x140>
    1022:	83 37       	cpi	r24, 0x73	; 115
    1024:	71 f0       	breq	.+28     	; 0x1042 <vfprintf+0x154>
    1026:	83 35       	cpi	r24, 0x53	; 83
    1028:	09 f0       	breq	.+2      	; 0x102c <vfprintf+0x13e>
    102a:	55 c0       	rjmp	.+170    	; 0x10d6 <vfprintf+0x1e8>
    102c:	20 c0       	rjmp	.+64     	; 0x106e <vfprintf+0x180>
    102e:	f8 01       	movw	r30, r16
    1030:	80 81       	ld	r24, Z
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	0e 5f       	subi	r16, 0xFE	; 254
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	88 24       	eor	r8, r8
    103a:	83 94       	inc	r8
    103c:	91 2c       	mov	r9, r1
    103e:	53 01       	movw	r10, r6
    1040:	12 c0       	rjmp	.+36     	; 0x1066 <vfprintf+0x178>
    1042:	28 01       	movw	r4, r16
    1044:	f2 e0       	ldi	r31, 0x02	; 2
    1046:	4f 0e       	add	r4, r31
    1048:	51 1c       	adc	r5, r1
    104a:	f8 01       	movw	r30, r16
    104c:	a0 80       	ld	r10, Z
    104e:	b1 80       	ldd	r11, Z+1	; 0x01
    1050:	36 fe       	sbrs	r3, 6
    1052:	03 c0       	rjmp	.+6      	; 0x105a <vfprintf+0x16c>
    1054:	69 2d       	mov	r22, r9
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <vfprintf+0x170>
    105a:	6f ef       	ldi	r22, 0xFF	; 255
    105c:	7f ef       	ldi	r23, 0xFF	; 255
    105e:	c5 01       	movw	r24, r10
    1060:	4e d1       	rcall	.+668    	; 0x12fe <strnlen>
    1062:	4c 01       	movw	r8, r24
    1064:	82 01       	movw	r16, r4
    1066:	f3 2d       	mov	r31, r3
    1068:	ff 77       	andi	r31, 0x7F	; 127
    106a:	3f 2e       	mov	r3, r31
    106c:	15 c0       	rjmp	.+42     	; 0x1098 <vfprintf+0x1aa>
    106e:	28 01       	movw	r4, r16
    1070:	22 e0       	ldi	r18, 0x02	; 2
    1072:	42 0e       	add	r4, r18
    1074:	51 1c       	adc	r5, r1
    1076:	f8 01       	movw	r30, r16
    1078:	a0 80       	ld	r10, Z
    107a:	b1 80       	ldd	r11, Z+1	; 0x01
    107c:	36 fe       	sbrs	r3, 6
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <vfprintf+0x198>
    1080:	69 2d       	mov	r22, r9
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <vfprintf+0x19c>
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	7f ef       	ldi	r23, 0xFF	; 255
    108a:	c5 01       	movw	r24, r10
    108c:	2d d1       	rcall	.+602    	; 0x12e8 <strnlen_P>
    108e:	4c 01       	movw	r8, r24
    1090:	f3 2d       	mov	r31, r3
    1092:	f0 68       	ori	r31, 0x80	; 128
    1094:	3f 2e       	mov	r3, r31
    1096:	82 01       	movw	r16, r4
    1098:	33 fc       	sbrc	r3, 3
    109a:	19 c0       	rjmp	.+50     	; 0x10ce <vfprintf+0x1e0>
    109c:	82 2d       	mov	r24, r2
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 16       	cp	r8, r24
    10a2:	99 06       	cpc	r9, r25
    10a4:	a0 f4       	brcc	.+40     	; 0x10ce <vfprintf+0x1e0>
    10a6:	b6 01       	movw	r22, r12
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	33 d1       	rcall	.+614    	; 0x1314 <fputc>
    10ae:	2a 94       	dec	r2
    10b0:	f5 cf       	rjmp	.-22     	; 0x109c <vfprintf+0x1ae>
    10b2:	f5 01       	movw	r30, r10
    10b4:	37 fc       	sbrc	r3, 7
    10b6:	85 91       	lpm	r24, Z+
    10b8:	37 fe       	sbrs	r3, 7
    10ba:	81 91       	ld	r24, Z+
    10bc:	5f 01       	movw	r10, r30
    10be:	b6 01       	movw	r22, r12
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	28 d1       	rcall	.+592    	; 0x1314 <fputc>
    10c4:	21 10       	cpse	r2, r1
    10c6:	2a 94       	dec	r2
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	82 1a       	sub	r8, r18
    10cc:	91 08       	sbc	r9, r1
    10ce:	81 14       	cp	r8, r1
    10d0:	91 04       	cpc	r9, r1
    10d2:	79 f7       	brne	.-34     	; 0x10b2 <vfprintf+0x1c4>
    10d4:	e1 c0       	rjmp	.+450    	; 0x1298 <__stack+0x199>
    10d6:	84 36       	cpi	r24, 0x64	; 100
    10d8:	11 f0       	breq	.+4      	; 0x10de <vfprintf+0x1f0>
    10da:	89 36       	cpi	r24, 0x69	; 105
    10dc:	39 f5       	brne	.+78     	; 0x112c <__stack+0x2d>
    10de:	f8 01       	movw	r30, r16
    10e0:	37 fe       	sbrs	r3, 7
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <vfprintf+0x204>
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	93 81       	ldd	r25, Z+3	; 0x03
    10ec:	0c 5f       	subi	r16, 0xFC	; 252
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	08 c0       	rjmp	.+16     	; 0x1102 <__stack+0x3>
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	07 2e       	mov	r0, r23
    10f8:	00 0c       	add	r0, r0
    10fa:	88 0b       	sbc	r24, r24
    10fc:	99 0b       	sbc	r25, r25
    10fe:	0e 5f       	subi	r16, 0xFE	; 254
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	f3 2d       	mov	r31, r3
    1104:	ff 76       	andi	r31, 0x6F	; 111
    1106:	3f 2e       	mov	r3, r31
    1108:	97 ff       	sbrs	r25, 7
    110a:	09 c0       	rjmp	.+18     	; 0x111e <__stack+0x1f>
    110c:	90 95       	com	r25
    110e:	80 95       	com	r24
    1110:	70 95       	com	r23
    1112:	61 95       	neg	r22
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	f0 68       	ori	r31, 0x80	; 128
    111c:	3f 2e       	mov	r3, r31
    111e:	2a e0       	ldi	r18, 0x0A	; 10
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	a3 01       	movw	r20, r6
    1124:	33 d1       	rcall	.+614    	; 0x138c <__ultoa_invert>
    1126:	88 2e       	mov	r8, r24
    1128:	86 18       	sub	r8, r6
    112a:	44 c0       	rjmp	.+136    	; 0x11b4 <__stack+0xb5>
    112c:	85 37       	cpi	r24, 0x75	; 117
    112e:	31 f4       	brne	.+12     	; 0x113c <__stack+0x3d>
    1130:	23 2d       	mov	r18, r3
    1132:	2f 7e       	andi	r18, 0xEF	; 239
    1134:	b2 2e       	mov	r11, r18
    1136:	2a e0       	ldi	r18, 0x0A	; 10
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	25 c0       	rjmp	.+74     	; 0x1186 <__stack+0x87>
    113c:	93 2d       	mov	r25, r3
    113e:	99 7f       	andi	r25, 0xF9	; 249
    1140:	b9 2e       	mov	r11, r25
    1142:	8f 36       	cpi	r24, 0x6F	; 111
    1144:	c1 f0       	breq	.+48     	; 0x1176 <__stack+0x77>
    1146:	18 f4       	brcc	.+6      	; 0x114e <__stack+0x4f>
    1148:	88 35       	cpi	r24, 0x58	; 88
    114a:	79 f0       	breq	.+30     	; 0x116a <__stack+0x6b>
    114c:	ae c0       	rjmp	.+348    	; 0x12aa <__stack+0x1ab>
    114e:	80 37       	cpi	r24, 0x70	; 112
    1150:	19 f0       	breq	.+6      	; 0x1158 <__stack+0x59>
    1152:	88 37       	cpi	r24, 0x78	; 120
    1154:	21 f0       	breq	.+8      	; 0x115e <__stack+0x5f>
    1156:	a9 c0       	rjmp	.+338    	; 0x12aa <__stack+0x1ab>
    1158:	e9 2f       	mov	r30, r25
    115a:	e0 61       	ori	r30, 0x10	; 16
    115c:	be 2e       	mov	r11, r30
    115e:	b4 fe       	sbrs	r11, 4
    1160:	0d c0       	rjmp	.+26     	; 0x117c <__stack+0x7d>
    1162:	fb 2d       	mov	r31, r11
    1164:	f4 60       	ori	r31, 0x04	; 4
    1166:	bf 2e       	mov	r11, r31
    1168:	09 c0       	rjmp	.+18     	; 0x117c <__stack+0x7d>
    116a:	34 fe       	sbrs	r3, 4
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <__stack+0x83>
    116e:	29 2f       	mov	r18, r25
    1170:	26 60       	ori	r18, 0x06	; 6
    1172:	b2 2e       	mov	r11, r18
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <__stack+0x83>
    1176:	28 e0       	ldi	r18, 0x08	; 8
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <__stack+0x87>
    117c:	20 e1       	ldi	r18, 0x10	; 16
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <__stack+0x87>
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	32 e0       	ldi	r19, 0x02	; 2
    1186:	f8 01       	movw	r30, r16
    1188:	b7 fe       	sbrs	r11, 7
    118a:	07 c0       	rjmp	.+14     	; 0x119a <__stack+0x9b>
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	0c 5f       	subi	r16, 0xFC	; 252
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <__stack+0xa7>
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 5f       	subi	r16, 0xFE	; 254
    11a4:	1f 4f       	sbci	r17, 0xFF	; 255
    11a6:	a3 01       	movw	r20, r6
    11a8:	f1 d0       	rcall	.+482    	; 0x138c <__ultoa_invert>
    11aa:	88 2e       	mov	r8, r24
    11ac:	86 18       	sub	r8, r6
    11ae:	fb 2d       	mov	r31, r11
    11b0:	ff 77       	andi	r31, 0x7F	; 127
    11b2:	3f 2e       	mov	r3, r31
    11b4:	36 fe       	sbrs	r3, 6
    11b6:	0d c0       	rjmp	.+26     	; 0x11d2 <__stack+0xd3>
    11b8:	23 2d       	mov	r18, r3
    11ba:	2e 7f       	andi	r18, 0xFE	; 254
    11bc:	a2 2e       	mov	r10, r18
    11be:	89 14       	cp	r8, r9
    11c0:	58 f4       	brcc	.+22     	; 0x11d8 <__stack+0xd9>
    11c2:	34 fe       	sbrs	r3, 4
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <__stack+0xdd>
    11c6:	32 fc       	sbrc	r3, 2
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <__stack+0xdd>
    11ca:	83 2d       	mov	r24, r3
    11cc:	8e 7e       	andi	r24, 0xEE	; 238
    11ce:	a8 2e       	mov	r10, r24
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <__stack+0xdd>
    11d2:	b8 2c       	mov	r11, r8
    11d4:	a3 2c       	mov	r10, r3
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <__stack+0xdf>
    11d8:	b8 2c       	mov	r11, r8
    11da:	01 c0       	rjmp	.+2      	; 0x11de <__stack+0xdf>
    11dc:	b9 2c       	mov	r11, r9
    11de:	a4 fe       	sbrs	r10, 4
    11e0:	0f c0       	rjmp	.+30     	; 0x1200 <__stack+0x101>
    11e2:	fe 01       	movw	r30, r28
    11e4:	e8 0d       	add	r30, r8
    11e6:	f1 1d       	adc	r31, r1
    11e8:	80 81       	ld	r24, Z
    11ea:	80 33       	cpi	r24, 0x30	; 48
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <__stack+0xf7>
    11ee:	9a 2d       	mov	r25, r10
    11f0:	99 7e       	andi	r25, 0xE9	; 233
    11f2:	a9 2e       	mov	r10, r25
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <__stack+0x109>
    11f6:	a2 fe       	sbrs	r10, 2
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <__stack+0x107>
    11fa:	b3 94       	inc	r11
    11fc:	b3 94       	inc	r11
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__stack+0x109>
    1200:	8a 2d       	mov	r24, r10
    1202:	86 78       	andi	r24, 0x86	; 134
    1204:	09 f0       	breq	.+2      	; 0x1208 <__stack+0x109>
    1206:	b3 94       	inc	r11
    1208:	a3 fc       	sbrc	r10, 3
    120a:	10 c0       	rjmp	.+32     	; 0x122c <__stack+0x12d>
    120c:	a0 fe       	sbrs	r10, 0
    120e:	06 c0       	rjmp	.+12     	; 0x121c <__stack+0x11d>
    1210:	b2 14       	cp	r11, r2
    1212:	80 f4       	brcc	.+32     	; 0x1234 <__stack+0x135>
    1214:	28 0c       	add	r2, r8
    1216:	92 2c       	mov	r9, r2
    1218:	9b 18       	sub	r9, r11
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <__stack+0x137>
    121c:	b2 14       	cp	r11, r2
    121e:	58 f4       	brcc	.+22     	; 0x1236 <__stack+0x137>
    1220:	b6 01       	movw	r22, r12
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	76 d0       	rcall	.+236    	; 0x1314 <fputc>
    1228:	b3 94       	inc	r11
    122a:	f8 cf       	rjmp	.-16     	; 0x121c <__stack+0x11d>
    122c:	b2 14       	cp	r11, r2
    122e:	18 f4       	brcc	.+6      	; 0x1236 <__stack+0x137>
    1230:	2b 18       	sub	r2, r11
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <__stack+0x139>
    1234:	98 2c       	mov	r9, r8
    1236:	21 2c       	mov	r2, r1
    1238:	a4 fe       	sbrs	r10, 4
    123a:	0f c0       	rjmp	.+30     	; 0x125a <__stack+0x15b>
    123c:	b6 01       	movw	r22, r12
    123e:	80 e3       	ldi	r24, 0x30	; 48
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	68 d0       	rcall	.+208    	; 0x1314 <fputc>
    1244:	a2 fe       	sbrs	r10, 2
    1246:	16 c0       	rjmp	.+44     	; 0x1274 <__stack+0x175>
    1248:	a1 fc       	sbrc	r10, 1
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <__stack+0x153>
    124c:	88 e7       	ldi	r24, 0x78	; 120
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <__stack+0x157>
    1252:	88 e5       	ldi	r24, 0x58	; 88
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	b6 01       	movw	r22, r12
    1258:	0c c0       	rjmp	.+24     	; 0x1272 <__stack+0x173>
    125a:	8a 2d       	mov	r24, r10
    125c:	86 78       	andi	r24, 0x86	; 134
    125e:	51 f0       	breq	.+20     	; 0x1274 <__stack+0x175>
    1260:	a1 fe       	sbrs	r10, 1
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <__stack+0x169>
    1264:	8b e2       	ldi	r24, 0x2B	; 43
    1266:	01 c0       	rjmp	.+2      	; 0x126a <__stack+0x16b>
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	a7 fc       	sbrc	r10, 7
    126c:	8d e2       	ldi	r24, 0x2D	; 45
    126e:	b6 01       	movw	r22, r12
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	50 d0       	rcall	.+160    	; 0x1314 <fputc>
    1274:	89 14       	cp	r8, r9
    1276:	30 f4       	brcc	.+12     	; 0x1284 <__stack+0x185>
    1278:	b6 01       	movw	r22, r12
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	4a d0       	rcall	.+148    	; 0x1314 <fputc>
    1280:	9a 94       	dec	r9
    1282:	f8 cf       	rjmp	.-16     	; 0x1274 <__stack+0x175>
    1284:	8a 94       	dec	r8
    1286:	f3 01       	movw	r30, r6
    1288:	e8 0d       	add	r30, r8
    128a:	f1 1d       	adc	r31, r1
    128c:	80 81       	ld	r24, Z
    128e:	b6 01       	movw	r22, r12
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	40 d0       	rcall	.+128    	; 0x1314 <fputc>
    1294:	81 10       	cpse	r8, r1
    1296:	f6 cf       	rjmp	.-20     	; 0x1284 <__stack+0x185>
    1298:	22 20       	and	r2, r2
    129a:	09 f4       	brne	.+2      	; 0x129e <__stack+0x19f>
    129c:	4e ce       	rjmp	.-868    	; 0xf3a <vfprintf+0x4c>
    129e:	b6 01       	movw	r22, r12
    12a0:	80 e2       	ldi	r24, 0x20	; 32
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	37 d0       	rcall	.+110    	; 0x1314 <fputc>
    12a6:	2a 94       	dec	r2
    12a8:	f7 cf       	rjmp	.-18     	; 0x1298 <__stack+0x199>
    12aa:	f6 01       	movw	r30, r12
    12ac:	86 81       	ldd	r24, Z+6	; 0x06
    12ae:	97 81       	ldd	r25, Z+7	; 0x07
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <__stack+0x1b7>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
    12b6:	2b 96       	adiw	r28, 0x0b	; 11
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	7f 90       	pop	r7
    12dc:	6f 90       	pop	r6
    12de:	5f 90       	pop	r5
    12e0:	4f 90       	pop	r4
    12e2:	3f 90       	pop	r3
    12e4:	2f 90       	pop	r2
    12e6:	08 95       	ret

000012e8 <strnlen_P>:
    12e8:	fc 01       	movw	r30, r24
    12ea:	05 90       	lpm	r0, Z+
    12ec:	61 50       	subi	r22, 0x01	; 1
    12ee:	70 40       	sbci	r23, 0x00	; 0
    12f0:	01 10       	cpse	r0, r1
    12f2:	d8 f7       	brcc	.-10     	; 0x12ea <strnlen_P+0x2>
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	8e 0f       	add	r24, r30
    12fa:	9f 1f       	adc	r25, r31
    12fc:	08 95       	ret

000012fe <strnlen>:
    12fe:	fc 01       	movw	r30, r24
    1300:	61 50       	subi	r22, 0x01	; 1
    1302:	70 40       	sbci	r23, 0x00	; 0
    1304:	01 90       	ld	r0, Z+
    1306:	01 10       	cpse	r0, r1
    1308:	d8 f7       	brcc	.-10     	; 0x1300 <strnlen+0x2>
    130a:	80 95       	com	r24
    130c:	90 95       	com	r25
    130e:	8e 0f       	add	r24, r30
    1310:	9f 1f       	adc	r25, r31
    1312:	08 95       	ret

00001314 <fputc>:
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	fb 01       	movw	r30, r22
    131e:	23 81       	ldd	r18, Z+3	; 0x03
    1320:	21 fd       	sbrc	r18, 1
    1322:	03 c0       	rjmp	.+6      	; 0x132a <fputc+0x16>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	2c c0       	rjmp	.+88     	; 0x1382 <fputc+0x6e>
    132a:	22 ff       	sbrs	r18, 2
    132c:	16 c0       	rjmp	.+44     	; 0x135a <fputc+0x46>
    132e:	46 81       	ldd	r20, Z+6	; 0x06
    1330:	57 81       	ldd	r21, Z+7	; 0x07
    1332:	24 81       	ldd	r18, Z+4	; 0x04
    1334:	35 81       	ldd	r19, Z+5	; 0x05
    1336:	42 17       	cp	r20, r18
    1338:	53 07       	cpc	r21, r19
    133a:	44 f4       	brge	.+16     	; 0x134c <fputc+0x38>
    133c:	a0 81       	ld	r26, Z
    133e:	b1 81       	ldd	r27, Z+1	; 0x01
    1340:	9d 01       	movw	r18, r26
    1342:	2f 5f       	subi	r18, 0xFF	; 255
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	31 83       	std	Z+1, r19	; 0x01
    1348:	20 83       	st	Z, r18
    134a:	8c 93       	st	X, r24
    134c:	26 81       	ldd	r18, Z+6	; 0x06
    134e:	37 81       	ldd	r19, Z+7	; 0x07
    1350:	2f 5f       	subi	r18, 0xFF	; 255
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	37 83       	std	Z+7, r19	; 0x07
    1356:	26 83       	std	Z+6, r18	; 0x06
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <fputc+0x6e>
    135a:	8b 01       	movw	r16, r22
    135c:	ec 01       	movw	r28, r24
    135e:	fb 01       	movw	r30, r22
    1360:	00 84       	ldd	r0, Z+8	; 0x08
    1362:	f1 85       	ldd	r31, Z+9	; 0x09
    1364:	e0 2d       	mov	r30, r0
    1366:	09 95       	icall
    1368:	89 2b       	or	r24, r25
    136a:	e1 f6       	brne	.-72     	; 0x1324 <fputc+0x10>
    136c:	d8 01       	movw	r26, r16
    136e:	16 96       	adiw	r26, 0x06	; 6
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	17 97       	sbiw	r26, 0x07	; 7
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	17 96       	adiw	r26, 0x07	; 7
    137a:	9c 93       	st	X, r25
    137c:	8e 93       	st	-X, r24
    137e:	16 97       	sbiw	r26, 0x06	; 6
    1380:	ce 01       	movw	r24, r28
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <__ultoa_invert>:
    138c:	fa 01       	movw	r30, r20
    138e:	aa 27       	eor	r26, r26
    1390:	28 30       	cpi	r18, 0x08	; 8
    1392:	51 f1       	breq	.+84     	; 0x13e8 <__ultoa_invert+0x5c>
    1394:	20 31       	cpi	r18, 0x10	; 16
    1396:	81 f1       	breq	.+96     	; 0x13f8 <__ultoa_invert+0x6c>
    1398:	e8 94       	clt
    139a:	6f 93       	push	r22
    139c:	6e 7f       	andi	r22, 0xFE	; 254
    139e:	6e 5f       	subi	r22, 0xFE	; 254
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	af 4f       	sbci	r26, 0xFF	; 255
    13a8:	b1 e0       	ldi	r27, 0x01	; 1
    13aa:	3e d0       	rcall	.+124    	; 0x1428 <__ultoa_invert+0x9c>
    13ac:	b4 e0       	ldi	r27, 0x04	; 4
    13ae:	3c d0       	rcall	.+120    	; 0x1428 <__ultoa_invert+0x9c>
    13b0:	67 0f       	add	r22, r23
    13b2:	78 1f       	adc	r23, r24
    13b4:	89 1f       	adc	r24, r25
    13b6:	9a 1f       	adc	r25, r26
    13b8:	a1 1d       	adc	r26, r1
    13ba:	68 0f       	add	r22, r24
    13bc:	79 1f       	adc	r23, r25
    13be:	8a 1f       	adc	r24, r26
    13c0:	91 1d       	adc	r25, r1
    13c2:	a1 1d       	adc	r26, r1
    13c4:	6a 0f       	add	r22, r26
    13c6:	71 1d       	adc	r23, r1
    13c8:	81 1d       	adc	r24, r1
    13ca:	91 1d       	adc	r25, r1
    13cc:	a1 1d       	adc	r26, r1
    13ce:	20 d0       	rcall	.+64     	; 0x1410 <__ultoa_invert+0x84>
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <__ultoa_invert+0x48>
    13d2:	68 94       	set
    13d4:	3f 91       	pop	r19
    13d6:	2a e0       	ldi	r18, 0x0A	; 10
    13d8:	26 9f       	mul	r18, r22
    13da:	11 24       	eor	r1, r1
    13dc:	30 19       	sub	r19, r0
    13de:	30 5d       	subi	r19, 0xD0	; 208
    13e0:	31 93       	st	Z+, r19
    13e2:	de f6       	brtc	.-74     	; 0x139a <__ultoa_invert+0xe>
    13e4:	cf 01       	movw	r24, r30
    13e6:	08 95       	ret
    13e8:	46 2f       	mov	r20, r22
    13ea:	47 70       	andi	r20, 0x07	; 7
    13ec:	40 5d       	subi	r20, 0xD0	; 208
    13ee:	41 93       	st	Z+, r20
    13f0:	b3 e0       	ldi	r27, 0x03	; 3
    13f2:	0f d0       	rcall	.+30     	; 0x1412 <__ultoa_invert+0x86>
    13f4:	c9 f7       	brne	.-14     	; 0x13e8 <__ultoa_invert+0x5c>
    13f6:	f6 cf       	rjmp	.-20     	; 0x13e4 <__ultoa_invert+0x58>
    13f8:	46 2f       	mov	r20, r22
    13fa:	4f 70       	andi	r20, 0x0F	; 15
    13fc:	40 5d       	subi	r20, 0xD0	; 208
    13fe:	4a 33       	cpi	r20, 0x3A	; 58
    1400:	18 f0       	brcs	.+6      	; 0x1408 <__ultoa_invert+0x7c>
    1402:	49 5d       	subi	r20, 0xD9	; 217
    1404:	31 fd       	sbrc	r19, 1
    1406:	40 52       	subi	r20, 0x20	; 32
    1408:	41 93       	st	Z+, r20
    140a:	02 d0       	rcall	.+4      	; 0x1410 <__ultoa_invert+0x84>
    140c:	a9 f7       	brne	.-22     	; 0x13f8 <__ultoa_invert+0x6c>
    140e:	ea cf       	rjmp	.-44     	; 0x13e4 <__ultoa_invert+0x58>
    1410:	b4 e0       	ldi	r27, 0x04	; 4
    1412:	a6 95       	lsr	r26
    1414:	97 95       	ror	r25
    1416:	87 95       	ror	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	ba 95       	dec	r27
    141e:	c9 f7       	brne	.-14     	; 0x1412 <__ultoa_invert+0x86>
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 05       	cpc	r22, r1
    1424:	71 05       	cpc	r23, r1
    1426:	08 95       	ret
    1428:	9b 01       	movw	r18, r22
    142a:	ac 01       	movw	r20, r24
    142c:	0a 2e       	mov	r0, r26
    142e:	06 94       	lsr	r0
    1430:	57 95       	ror	r21
    1432:	47 95       	ror	r20
    1434:	37 95       	ror	r19
    1436:	27 95       	ror	r18
    1438:	ba 95       	dec	r27
    143a:	c9 f7       	brne	.-14     	; 0x142e <__ultoa_invert+0xa2>
    143c:	62 0f       	add	r22, r18
    143e:	73 1f       	adc	r23, r19
    1440:	84 1f       	adc	r24, r20
    1442:	95 1f       	adc	r25, r21
    1444:	a0 1d       	adc	r26, r0
    1446:	08 95       	ret

00001448 <_exit>:
    1448:	f8 94       	cli

0000144a <__stop_program>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <__stop_program>
