
My_Refrigerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001646  000016da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012a  0080012a  00001704  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fde  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da8  00000000  00000000  000038be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef3  00000000  00000000  00004666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  0000555c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f4  00000000  00000000  00005904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc4  00000000  00000000  00005ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00007cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <getHeatsink3Temp+0x14>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e1       	ldi	r29, 0x10	; 16
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	e6 e4       	ldi	r30, 0x46	; 70
      fa:	f6 e1       	ldi	r31, 0x16	; 22
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	aa 32       	cpi	r26, 0x2A	; 42
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	aa e2       	ldi	r26, 0x2A	; 42
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	ae 32       	cpi	r26, 0x2E	; 46
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	71 d1       	rcall	.+738    	; 0x400 <main>
     11e:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CLCD_DataTransmitter>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     124:	ef e9       	ldi	r30, 0x9F	; 159
     126:	ff e0       	ldi	r31, 0x0F	; 15
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <CLCD_DataTransmitter+0x4>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <CLCD_DataTransmitter+0xa>
     12e:	00 00       	nop

/*It is a function based on 8bit data bus.*/

void CLCD_DataTransmitter(char data){
	_delay_ms(1);
	PORTE = RS; 
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	f5 e0       	ldi	r31, 0x05	; 5
     136:	fa 95       	dec	r31
     138:	f1 f7       	brne	.-4      	; 0x136 <CLCD_DataTransmitter+0x12>
     13a:	00 00       	nop
	_delay_us(1); 
	PORTE = (RS | E); 
     13c:	95 e0       	ldi	r25, 0x05	; 5
     13e:	93 b9       	out	0x03, r25	; 3
     140:	95 e0       	ldi	r25, 0x05	; 5
     142:	9a 95       	dec	r25
     144:	f1 f7       	brne	.-4      	; 0x142 <CLCD_DataTransmitter+0x1e>
     146:	00 00       	nop
	_delay_us(1);
	PORTB = data; 
     148:	88 bb       	out	0x18, r24	; 24
     14a:	e5 e0       	ldi	r30, 0x05	; 5
     14c:	ea 95       	dec	r30
     14e:	f1 f7       	brne	.-4      	; 0x14c <CLCD_DataTransmitter+0x28>
     150:	00 00       	nop
	_delay_us(1);
	PORTE = RW;	
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	83 b9       	out	0x03, r24	; 3
     156:	08 95       	ret

00000158 <CLCD_Controller>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	2f ef       	ldi	r18, 0xFF	; 255
     15a:	36 e7       	ldi	r19, 0x76	; 118
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	30 40       	sbci	r19, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <CLCD_Controller+0x6>
     166:	00 c0       	rjmp	.+0      	; 0x168 <CLCD_Controller+0x10>
     168:	00 00       	nop
}

void CLCD_Controller(char ctl){
	_delay_ms(30);
	PORTE = 0x00; //RW clear
     16a:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16c:	25 e0       	ldi	r18, 0x05	; 5
     16e:	2a 95       	dec	r18
     170:	f1 f7       	brne	.-4      	; 0x16e <CLCD_Controller+0x16>
     172:	00 00       	nop
	_delay_us(1);
	PORTE = E;
     174:	94 e0       	ldi	r25, 0x04	; 4
     176:	93 b9       	out	0x03, r25	; 3
     178:	35 e0       	ldi	r19, 0x05	; 5
     17a:	3a 95       	dec	r19
     17c:	f1 f7       	brne	.-4      	; 0x17a <CLCD_Controller+0x22>
     17e:	00 00       	nop
	_delay_us(1);
	PORTB = ctl;
     180:	88 bb       	out	0x18, r24	; 24
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	8a 95       	dec	r24
     186:	f1 f7       	brne	.-4      	; 0x184 <CLCD_Controller+0x2c>
     188:	00 00       	nop
	_delay_us(1);
	PORTE = (RS | RW);
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	83 b9       	out	0x03, r24	; 3
     18e:	08 95       	ret

00000190 <CLCD_initalizer>:
}

void CLCD_initalizer(void){
	cli();
     190:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	80 e7       	ldi	r24, 0x70	; 112
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	21 50       	subi	r18, 0x01	; 1
     19a:	80 40       	sbci	r24, 0x00	; 0
     19c:	90 40       	sbci	r25, 0x00	; 0
     19e:	e1 f7       	brne	.-8      	; 0x198 <CLCD_initalizer+0x8>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <CLCD_initalizer+0x12>
     1a2:	00 00       	nop
	_delay_ms(50);
	CLCD_Controller(FUNC_DISPLAY_LINE_2 | FUNC_DATA_LINE_8);
     1a4:	88 e3       	ldi	r24, 0x38	; 56
     1a6:	d8 df       	rcall	.-80     	; 0x158 <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a8:	25 ed       	ldi	r18, 0xD5	; 213
     1aa:	2a 95       	dec	r18
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <CLCD_initalizer+0x1a>
     1ae:	00 00       	nop
	_delay_us(40);
	CLCD_Controller(DISPLAY_ON);
     1b0:	8c e0       	ldi	r24, 0x0C	; 12
     1b2:	d2 df       	rcall	.-92     	; 0x158 <CLCD_Controller>
     1b4:	85 ed       	ldi	r24, 0xD5	; 213
     1b6:	8a 95       	dec	r24
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <CLCD_initalizer+0x26>
	_delay_us(40);
	CLCD_Controller(CLEAR_DISPLAY);
     1ba:	00 00       	nop
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	cc df       	rcall	.-104    	; 0x158 <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c0:	8f e3       	ldi	r24, 0x3F	; 63
     1c2:	9f e1       	ldi	r25, 0x1F	; 31
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <CLCD_initalizer+0x34>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <CLCD_initalizer+0x3a>
	_delay_ms(2);
	CLCD_Controller(ENTRY_NO_SHIFT);
     1ca:	00 00       	nop
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	c4 df       	rcall	.-120    	; 0x158 <CLCD_Controller>
	sei();
     1d0:	78 94       	sei
     1d2:	08 95       	ret

000001d4 <CLCD_putstr>:
}

void CLCD_putstr(char addr, char *str){
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	7b 01       	movw	r14, r22
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
     1e2:	08 2f       	mov	r16, r24
     1e4:	00 68       	ori	r16, 0x80	; 128
     1e6:	80 2f       	mov	r24, r16
     1e8:	b7 df       	rcall	.-146    	; 0x158 <CLCD_Controller>
	while(*str != 0){
     1ea:	f7 01       	movw	r30, r14
     1ec:	80 81       	ld	r24, Z
     1ee:	88 23       	and	r24, r24
     1f0:	89 f0       	breq	.+34     	; 0x214 <CLCD_putstr+0x40>
     1f2:	e7 01       	movw	r28, r14
		if(((addr | CLCD_DD_RAM_BASE) + char_count) == 0x90){
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	0e 19       	sub	r16, r14
     1f8:	1f 09       	sbc	r17, r15
     1fa:	ce 01       	movw	r24, r28
     1fc:	80 0f       	add	r24, r16
     1fe:	91 1f       	adc	r25, r17
     200:	80 39       	cpi	r24, 0x90	; 144
     202:	91 05       	cpc	r25, r1
     204:	11 f4       	brne	.+4      	; 0x20a <CLCD_putstr+0x36>
			CLCD_Controller(CLCD_DD_RAM_BASE | 0x40);
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	a7 df       	rcall	.-178    	; 0x158 <CLCD_Controller>
		}
		CLCD_DataTransmitter(*str);
     20a:	89 91       	ld	r24, Y+
     20c:	8b df       	rcall	.-234    	; 0x124 <CLCD_DataTransmitter>
     20e:	88 81       	ld	r24, Y

void CLCD_putstr(char addr, char *str){
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
	while(*str != 0){
     210:	81 11       	cpse	r24, r1
     212:	f3 cf       	rjmp	.-26     	; 0x1fa <CLCD_putstr+0x26>
     214:	df 91       	pop	r29
		char_count += 1;
		
		//CLCD_Controller(CLEAR_DISPLAY);
		//_delay_ms(500);
	}
}
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <DisplayHeatsinkTemp>:
     222:	8f 92       	push	r8

void convertFloattoUint_8(float number, int8_t *v_uint_8){
	*v_uint_8 = (int8_t)number;
}

void DisplayHeatsinkTemp(float *temp){
     224:	9f 92       	push	r9
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	cf 92       	push	r12
     22c:	df 92       	push	r13
     22e:	ef 92       	push	r14
     230:	ff 92       	push	r15
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	6a 97       	sbiw	r28, 0x1a	; 26
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
	int8_t v_uint_8[4] = {0, };
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	1c 82       	std	Y+4, r1	; 0x04
	char str[17];
	char dummy[5] = {0, };
     252:	fe 01       	movw	r30, r28
     254:	76 96       	adiw	r30, 0x16	; 22
     256:	25 e0       	ldi	r18, 0x05	; 5
     258:	df 01       	movw	r26, r30
     25a:	1d 92       	st	X+, r1
     25c:	2a 95       	dec	r18
     25e:	e9 f7       	brne	.-6      	; 0x25a <DisplayHeatsinkTemp+0x38>
	
	memset(str, 0, 17);
     260:	71 97       	sbiw	r30, 0x11	; 17
     262:	21 e1       	ldi	r18, 0x11	; 17
     264:	df 01       	movw	r26, r30
     266:	1d 92       	st	X+, r1
     268:	2a 95       	dec	r18
     26a:	e9 f7       	brne	.-6      	; 0x266 <DisplayHeatsinkTemp+0x44>
     26c:	5c 01       	movw	r10, r24
     26e:	ce 01       	movw	r24, r28
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	7c 01       	movw	r14, r24
     274:	8f 01       	movw	r16, r30
     276:	6c 01       	movw	r12, r24
	
	for(int cnt = 0; cnt < 4; cnt++){
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
     278:	d5 01       	movw	r26, r10
     27a:	6d 91       	ld	r22, X+
     27c:	7d 91       	ld	r23, X+
     27e:	8d 91       	ld	r24, X+
     280:	9d 91       	ld	r25, X+
     282:	5d 01       	movw	r10, r26
#include "CLCD.h"
#include "sensor.h"
#include "TWI.h"

void convertFloattoUint_8(float number, int8_t *v_uint_8){
	*v_uint_8 = (int8_t)number;
     284:	41 d5       	rcall	.+2690   	; 0xd08 <__fixsfsi>
     286:	f6 01       	movw	r30, r12
     288:	61 93       	st	Z+, r22
     28a:	6f 01       	movw	r12, r30
	char str[17];
	char dummy[5] = {0, };
	
	memset(str, 0, 17);
	
	for(int cnt = 0; cnt < 4; cnt++){
     28c:	e0 17       	cp	r30, r16
     28e:	f1 07       	cpc	r31, r17
     290:	99 f7       	brne	.-26     	; 0x278 <DisplayHeatsinkTemp+0x56>
     292:	67 01       	movw	r12, r14
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
	}
	
	for(int cnt = 0; cnt < 4; cnt++){
		sprintf(dummy, "%d", v_uint_8[cnt]);
     294:	0f 2e       	mov	r0, r31
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	8f 2e       	mov	r8, r31
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	9f 2e       	mov	r9, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	5e 01       	movw	r10, r28
     2a2:	f6 e1       	ldi	r31, 0x16	; 22
     2a4:	af 0e       	add	r10, r31
     2a6:	b1 1c       	adc	r11, r1
     2a8:	d6 01       	movw	r26, r12
     2aa:	8d 91       	ld	r24, X+
     2ac:	6d 01       	movw	r12, r26
     2ae:	28 2f       	mov	r18, r24
     2b0:	08 2e       	mov	r0, r24
     2b2:	00 0c       	add	r0, r0
     2b4:	33 0b       	sbc	r19, r19
     2b6:	3f 93       	push	r19
     2b8:	8f 93       	push	r24
     2ba:	9f 92       	push	r9
     2bc:	8f 92       	push	r8
     2be:	bf 92       	push	r11
     2c0:	af 92       	push	r10
     2c2:	e4 d6       	rcall	.+3528   	; 0x108c <sprintf>
	
	for(int cnt = 0; cnt < 4; cnt++){
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
	}
	
	for(int cnt = 0; cnt < 4; cnt++){
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	c0 16       	cp	r12, r16
     2d2:	d1 06       	cpc	r13, r17
     2d4:	49 f7       	brne	.-46     	; 0x2a8 <DisplayHeatsinkTemp+0x86>
		sprintf(dummy, "%d", v_uint_8[cnt]);
	}
	
	sprintf(str, "P1:%dC  P2:%dC    ", v_uint_8[0], v_uint_8[1]);
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	28 2f       	mov	r18, r24
     2da:	08 2e       	mov	r0, r24
     2dc:	00 0c       	add	r0, r0
     2de:	33 0b       	sbc	r19, r19
     2e0:	3f 93       	push	r19
     2e2:	8f 93       	push	r24
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	28 2f       	mov	r18, r24
     2e8:	08 2e       	mov	r0, r24
     2ea:	00 0c       	add	r0, r0
     2ec:	33 0b       	sbc	r19, r19
     2ee:	3f 93       	push	r19
     2f0:	8f 93       	push	r24
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	9f 93       	push	r25
     2f8:	8f 93       	push	r24
     2fa:	6e 01       	movw	r12, r28
     2fc:	b5 e0       	ldi	r27, 0x05	; 5
     2fe:	cb 0e       	add	r12, r27
     300:	d1 1c       	adc	r13, r1
     302:	df 92       	push	r13
     304:	cf 92       	push	r12
     306:	c2 d6       	rcall	.+3460   	; 0x108c <sprintf>
	CLCD_putstr(0x00, str);
     308:	b6 01       	movw	r22, r12
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	63 df       	rcall	.-314    	; 0x1d4 <CLCD_putstr>
     30e:	81 e1       	ldi	r24, 0x11	; 17
	
	memset(str, 0x00, 17);
     310:	f6 01       	movw	r30, r12
     312:	11 92       	st	Z+, r1
     314:	8a 95       	dec	r24
     316:	e9 f7       	brne	.-6      	; 0x312 <DisplayHeatsinkTemp+0xf0>
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	0f 2e       	mov	r0, r31
	
	for(int cnt = 0; cnt < 4; cnt++){
		sprintf(dummy, "%d", v_uint_8[cnt]);
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	af 2e       	mov	r10, r31
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	bf 2e       	mov	r11, r31
     32c:	f0 2d       	mov	r31, r0
     32e:	6e 01       	movw	r12, r28
     330:	96 e1       	ldi	r25, 0x16	; 22
     332:	c9 0e       	add	r12, r25
     334:	d1 1c       	adc	r13, r1
     336:	d7 01       	movw	r26, r14
     338:	8d 91       	ld	r24, X+
     33a:	7d 01       	movw	r14, r26
     33c:	28 2f       	mov	r18, r24
     33e:	08 2e       	mov	r0, r24
     340:	00 0c       	add	r0, r0
     342:	33 0b       	sbc	r19, r19
     344:	3f 93       	push	r19
     346:	8f 93       	push	r24
     348:	bf 92       	push	r11
     34a:	af 92       	push	r10
     34c:	df 92       	push	r13
     34e:	cf 92       	push	r12
     350:	9d d6       	rcall	.+3386   	; 0x108c <sprintf>
     352:	0f 90       	pop	r0
	sprintf(str, "P1:%dC  P2:%dC    ", v_uint_8[0], v_uint_8[1]);
	CLCD_putstr(0x00, str);
	
	memset(str, 0x00, 17);
	
	for(int cnt = 0; cnt < 4; cnt++){
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	e0 16       	cp	r14, r16
     360:	f1 06       	cpc	r15, r17
     362:	49 f7       	brne	.-46     	; 0x336 <DisplayHeatsinkTemp+0x114>
     364:	8c 81       	ldd	r24, Y+4	; 0x04
		sprintf(dummy, "%d", v_uint_8[cnt]);
	}
	
	sprintf(str, "P3:%dC  P4:%dC    ", v_uint_8[2], v_uint_8[3]);
     366:	28 2f       	mov	r18, r24
     368:	08 2e       	mov	r0, r24
     36a:	00 0c       	add	r0, r0
     36c:	33 0b       	sbc	r19, r19
     36e:	3f 93       	push	r19
     370:	8f 93       	push	r24
     372:	8b 81       	ldd	r24, Y+3	; 0x03
     374:	28 2f       	mov	r18, r24
     376:	08 2e       	mov	r0, r24
     378:	00 0c       	add	r0, r0
     37a:	33 0b       	sbc	r19, r19
     37c:	3f 93       	push	r19
     37e:	8f 93       	push	r24
     380:	86 e1       	ldi	r24, 0x16	; 22
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	9f 93       	push	r25
     386:	8f 93       	push	r24
     388:	8e 01       	movw	r16, r28
     38a:	0b 5f       	subi	r16, 0xFB	; 251
     38c:	1f 4f       	sbci	r17, 0xFF	; 255
     38e:	1f 93       	push	r17
     390:	0f 93       	push	r16
     392:	7c d6       	rcall	.+3320   	; 0x108c <sprintf>
	CLCD_putstr(0x40, str);
     394:	b8 01       	movw	r22, r16
     396:	80 e4       	ldi	r24, 0x40	; 64
     398:	1d df       	rcall	.-454    	; 0x1d4 <CLCD_putstr>
     39a:	0f b6       	in	r0, 0x3f	; 63
}
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	6a 96       	adiw	r28, 0x1a	; 26
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	08 95       	ret

000003ca <DisplayInsideTemp_master>:
     3ca:	cf 92       	push	r12

void DisplayInsideTemp_master(float temp){
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	6b 01       	movw	r12, r22
     3d4:	7c 01       	movw	r14, r24
	int8_t v_int_8 = 0;
	convertFloattoUint_8(temp, &v_int_8);
	
	TWI_start();
     3d6:	a2 d3       	rcall	.+1860   	; 0xb1c <TWI_start>
	TWI_transmit(SLAVE_ADDR, v_int_8);
     3d8:	c7 01       	movw	r24, r14
     3da:	b6 01       	movw	r22, r12
     3dc:	95 d4       	rcall	.+2346   	; 0xd08 <__fixsfsi>
     3de:	83 e2       	ldi	r24, 0x23	; 35
	TWI_stop();
     3e0:	a6 d3       	rcall	.+1868   	; 0xb2e <TWI_transmit>
     3e2:	bd d3       	rcall	.+1914   	; 0xb5e <TWI_stop>
}
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <DisplayOverheatPeltier>:

void DisplayOverheatPeltier(uint8_t val){
     3ee:	cf 93       	push	r28
     3f0:	c8 2f       	mov	r28, r24
	TWI_start();
     3f2:	94 d3       	rcall	.+1832   	; 0xb1c <TWI_start>
	TWI_transmit(SLAVE_ADDR, val);
     3f4:	6c 2f       	mov	r22, r28
     3f6:	83 e2       	ldi	r24, 0x23	; 35
	TWI_stop();
     3f8:	9a d3       	rcall	.+1844   	; 0xb2e <TWI_transmit>
     3fa:	b1 d3       	rcall	.+1890   	; 0xb5e <TWI_stop>
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <main>:

#define TEMP_LIMIT 75

volatile uint8_t flag_overheat[4] = {0, };

int main(void){
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	60 97       	sbiw	r28, 0x10	; 16
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; //SSR (0x0F | 0xFF)
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; //CLCD Databus (0xFF | 0xFF)
     418:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; //status LED (0x0F | 0xFF)
     41a:	84 bb       	out	0x14, r24	; 20
	DDRD = (!0x08); //TWI, Switch
     41c:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xFF; //CLCD Control (0x07 | 0xFF)
     41e:	82 b9       	out	0x02, r24	; 2
	DDRF = (!0x1F); //ADC
     420:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x1F; //unused
     424:	8f e1       	ldi	r24, 0x1F	; 31
     426:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	float temp_heatsink[4] = {0, }, temp_inside = 0;
     42a:	fe 01       	movw	r30, r28
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	80 e1       	ldi	r24, 0x10	; 16
     430:	df 01       	movw	r26, r30
     432:	1d 92       	st	X+, r1
     434:	8a 95       	dec	r24
     436:	e9 f7       	brne	.-6      	; 0x432 <main+0x32>
	uint8_t powcnt = 1;
	
	CLCD_initalizer();
     438:	ab de       	rcall	.-682    	; 0x190 <CLCD_initalizer>
	ADC_initializer();
     43a:	d5 d0       	rcall	.+426    	; 0x5e6 <ADC_initializer>
	TWI_initializer();
     43c:	67 d3       	rcall	.+1742   	; 0xb0c <TWI_initializer>
     43e:	78 94       	sei
	sei();
     440:	33 24       	eor	r3, r3
	DDRE = 0xFF; //CLCD Control (0x07 | 0xFF)
	DDRF = (!0x1F); //ADC
	DDRG = 0x1F; //unused
	
	float temp_heatsink[4] = {0, }, temp_inside = 0;
	uint8_t powcnt = 1;
     442:	33 94       	inc	r3
     444:	22 24       	eor	r2, r2
		_delay_ms(1);
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
			if(temp_heatsink[cnt] > TEMP_LIMIT){
				flag_overheat[cnt] = 1;
     446:	23 94       	inc	r2
     448:	0f 2e       	mov	r0, r31
		DisplayHeatsinkTemp(temp_heatsink);
		DisplayInsideTemp_master(temp_inside);
		_delay_ms(50);
		
		for(int i = 0; i < 4; i++){
			if(flag_overheat[i] == 1){
     44a:	fa e2       	ldi	r31, 0x2A	; 42
     44c:	cf 2e       	mov	r12, r31
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	df 2e       	mov	r13, r31
     452:	f0 2d       	mov	r31, r0
	ADC_initializer();
	TWI_initializer();
	sei();

	while (1) {
		temp_heatsink[0] = getHeatsink1Temp();
     454:	7b d1       	rcall	.+758    	; 0x74c <getHeatsink1Temp>
     456:	69 83       	std	Y+1, r22	; 0x01
     458:	7a 83       	std	Y+2, r23	; 0x02
     45a:	8b 83       	std	Y+3, r24	; 0x03
     45c:	9c 83       	std	Y+4, r25	; 0x04
     45e:	ef e9       	ldi	r30, 0x9F	; 159
     460:	ff e0       	ldi	r31, 0x0F	; 15
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <main+0x62>
     466:	00 c0       	rjmp	.+0      	; 0x468 <main+0x68>
     468:	00 00       	nop
		_delay_ms(1);
		temp_heatsink[1] = getHeatsink2Temp();
     46a:	d0 d1       	rcall	.+928    	; 0x80c <getHeatsink2Temp>
     46c:	6d 83       	std	Y+5, r22	; 0x05
     46e:	7e 83       	std	Y+6, r23	; 0x06
     470:	8f 83       	std	Y+7, r24	; 0x07
     472:	98 87       	std	Y+8, r25	; 0x08
     474:	8f e9       	ldi	r24, 0x9F	; 159
     476:	9f e0       	ldi	r25, 0x0F	; 15
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <main+0x78>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <main+0x7e>
     47e:	00 00       	nop
		_delay_ms(1);
		temp_heatsink[2] = getHeatsink3Temp();
     480:	25 d2       	rcall	.+1098   	; 0x8cc <getHeatsink3Temp>
     482:	69 87       	std	Y+9, r22	; 0x09
     484:	7a 87       	std	Y+10, r23	; 0x0a
     486:	8b 87       	std	Y+11, r24	; 0x0b
     488:	9c 87       	std	Y+12, r25	; 0x0c
     48a:	af e9       	ldi	r26, 0x9F	; 159
     48c:	bf e0       	ldi	r27, 0x0F	; 15
     48e:	11 97       	sbiw	r26, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <main+0x8e>
     492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x94>
     494:	00 00       	nop
		_delay_ms(1);
		temp_heatsink[3] = getHeatsink4Temp();
     496:	7a d2       	rcall	.+1268   	; 0x98c <getHeatsink4Temp>
     498:	6d 87       	std	Y+13, r22	; 0x0d
     49a:	7e 87       	std	Y+14, r23	; 0x0e
     49c:	8f 87       	std	Y+15, r24	; 0x0f
     49e:	98 8b       	std	Y+16, r25	; 0x10
     4a0:	ef e9       	ldi	r30, 0x9F	; 159
     4a2:	ff e0       	ldi	r31, 0x0F	; 15
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <main+0xa4>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <main+0xaa>
     4aa:	00 00       	nop
		_delay_ms(1);
		temp_inside = getInsideTemp();
     4ac:	cf d2       	rcall	.+1438   	; 0xa4c <getInsideTemp>
     4ae:	4b 01       	movw	r8, r22
     4b0:	5c 01       	movw	r10, r24
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	7c 01       	movw	r14, r24
     4b8:	00 e0       	ldi	r16, 0x00	; 0
		
		for(int cnt = 0; cnt < 4; cnt++){
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	d7 01       	movw	r26, r14
			if(temp_heatsink[cnt] > TEMP_LIMIT){
     4be:	4d 90       	ld	r4, X+
     4c0:	5d 90       	ld	r5, X+
     4c2:	6d 90       	ld	r6, X+
     4c4:	7d 90       	ld	r7, X+
     4c6:	7d 01       	movw	r14, r26
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	46 e9       	ldi	r20, 0x96	; 150
     4ce:	52 e4       	ldi	r21, 0x42	; 66
     4d0:	c3 01       	movw	r24, r6
     4d2:	b2 01       	movw	r22, r4
     4d4:	fc d4       	rcall	.+2552   	; 0xece <__gesf2>
     4d6:	18 16       	cp	r1, r24
     4d8:	2c f4       	brge	.+10     	; 0x4e4 <main+0xe4>
     4da:	f8 01       	movw	r30, r16
				flag_overheat[cnt] = 1;
     4dc:	e6 5d       	subi	r30, 0xD6	; 214
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	20 82       	st	Z, r2
     4e2:	0d c0       	rjmp	.+26     	; 0x4fe <main+0xfe>
			}
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 20){
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	4c e5       	ldi	r20, 0x5C	; 92
     4ea:	52 e4       	ldi	r21, 0x42	; 66
     4ec:	c3 01       	movw	r24, r6
     4ee:	b2 01       	movw	r22, r4
     4f0:	9f d3       	rcall	.+1854   	; 0xc30 <__cmpsf2>
     4f2:	88 23       	and	r24, r24
     4f4:	24 f4       	brge	.+8      	; 0x4fe <main+0xfe>
     4f6:	f8 01       	movw	r30, r16
				flag_overheat[cnt] = 0;
     4f8:	e6 5d       	subi	r30, 0xD6	; 214
     4fa:	fe 4f       	sbci	r31, 0xFE	; 254
     4fc:	10 82       	st	Z, r1
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
		_delay_ms(1);
		temp_heatsink[3] = getHeatsink4Temp();
		_delay_ms(1);
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
     500:	1f 4f       	sbci	r17, 0xFF	; 255
     502:	04 30       	cpi	r16, 0x04	; 4
     504:	11 05       	cpc	r17, r1
     506:	d1 f6       	brne	.-76     	; 0x4bc <main+0xbc>
     508:	83 99       	sbic	0x10, 3	; 16
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 20){
				flag_overheat[cnt] = 0;
			}
		}
		
		if(!(PIND & 0x08)){
     50a:	04 c0       	rjmp	.+8      	; 0x514 <main+0x114>
     50c:	33 94       	inc	r3
			powcnt += 1;
     50e:	b5 e0       	ldi	r27, 0x05	; 5
			if(powcnt == 5){
     510:	3b 16       	cp	r3, r27
     512:	19 f0       	breq	.+6      	; 0x51a <main+0x11a>
     514:	e1 e0       	ldi	r30, 0x01	; 1
				powcnt = 1;
			}
		}
		
		if(powcnt == 1){
     516:	3e 12       	cpse	r3, r30
     518:	06 c0       	rjmp	.+12     	; 0x526 <main+0x126>
     51a:	2b ba       	out	0x1b, r2	; 27
			PORTA = 0x01; 
     51c:	f8 e0       	ldi	r31, 0x08	; 8
			PORTC = 0x08; 
     51e:	f5 bb       	out	0x15, r31	; 21
     520:	33 24       	eor	r3, r3
     522:	33 94       	inc	r3
     524:	5d c0       	rjmp	.+186    	; 0x5e0 <main+0x1e0>
     526:	22 e0       	ldi	r18, 0x02	; 2
		}
		
		else if(powcnt == 2){
     528:	32 12       	cpse	r3, r18
     52a:	05 c0       	rjmp	.+10     	; 0x536 <main+0x136>
     52c:	83 e0       	ldi	r24, 0x03	; 3
			PORTA = 0x03; //0000 0011
     52e:	8b bb       	out	0x1b, r24	; 27
     530:	9c e0       	ldi	r25, 0x0C	; 12
			PORTC = 0x0C; //0000 1100
     532:	95 bb       	out	0x15, r25	; 21
     534:	55 c0       	rjmp	.+170    	; 0x5e0 <main+0x1e0>
     536:	a3 e0       	ldi	r26, 0x03	; 3
		}
		
		else if(powcnt == 3){
     538:	3a 12       	cpse	r3, r26
     53a:	05 c0       	rjmp	.+10     	; 0x546 <main+0x146>
     53c:	b7 e0       	ldi	r27, 0x07	; 7
			PORTA = 0x07; //0000 0111
     53e:	bb bb       	out	0x1b, r27	; 27
     540:	ee e0       	ldi	r30, 0x0E	; 14
			PORTC = 0x0E; //0000 1110
     542:	e5 bb       	out	0x15, r30	; 21
     544:	4d c0       	rjmp	.+154    	; 0x5e0 <main+0x1e0>
     546:	f4 e0       	ldi	r31, 0x04	; 4
		}
		
		else if(powcnt == 4){
     548:	3f 12       	cpse	r3, r31
     54a:	4a c0       	rjmp	.+148    	; 0x5e0 <main+0x1e0>
     54c:	2f e0       	ldi	r18, 0x0F	; 15
			PORTA = 0x0F; //0000 1111
     54e:	2b bb       	out	0x1b, r18	; 27
     550:	25 bb       	out	0x15, r18	; 21
			PORTC = 0x0F; //0000 1111
     552:	46 c0       	rjmp	.+140    	; 0x5e0 <main+0x1e0>
     554:	fc 01       	movw	r30, r24
		}
		
		for(int i = 0; i < 4; i++){
			if(flag_overheat[i] == 1){
     556:	e6 5d       	subi	r30, 0xD6	; 214
     558:	fe 4f       	sbci	r31, 0xFE	; 254
     55a:	20 81       	ld	r18, Z
     55c:	21 30       	cpi	r18, 0x01	; 1
     55e:	09 f4       	brne	.+2      	; 0x562 <main+0x162>
     560:	1a ba       	out	0x1a, r1	; 26
				DDRA = 0x00;
     562:	01 96       	adiw	r24, 0x01	; 1
		else if(powcnt == 4){
			PORTA = 0x0F; //0000 1111
			PORTC = 0x0F; //0000 1111
		}
		
		for(int i = 0; i < 4; i++){
     564:	84 30       	cpi	r24, 0x04	; 4
     566:	91 05       	cpc	r25, r1
     568:	a9 f7       	brne	.-22     	; 0x554 <main+0x154>
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	fc 01       	movw	r30, r24
				DDRA = 0x00;
			}	
		}	
		
		for(int i = 0; i < 4; i++){
			if(flag_overheat[i] == 0 && i == 3){
     570:	e6 5d       	subi	r30, 0xD6	; 214
     572:	fe 4f       	sbci	r31, 0xFE	; 254
     574:	20 81       	ld	r18, Z
     576:	21 11       	cpse	r18, r1
     578:	06 c0       	rjmp	.+12     	; 0x586 <main+0x186>
     57a:	83 30       	cpi	r24, 0x03	; 3
     57c:	91 05       	cpc	r25, r1
     57e:	19 f4       	brne	.+6      	; 0x586 <main+0x186>
     580:	8f ef       	ldi	r24, 0xFF	; 255
				DDRA = 0xFF;
     582:	8a bb       	out	0x1a, r24	; 26
     584:	0a c0       	rjmp	.+20     	; 0x59a <main+0x19a>
     586:	fc 01       	movw	r30, r24
			}
			else if(flag_overheat[i] == 1){
     588:	e6 5d       	subi	r30, 0xD6	; 214
     58a:	fe 4f       	sbci	r31, 0xFE	; 254
     58c:	20 81       	ld	r18, Z
     58e:	21 30       	cpi	r18, 0x01	; 1
     590:	21 f0       	breq	.+8      	; 0x59a <main+0x19a>
			if(flag_overheat[i] == 1){
				DDRA = 0x00;
			}	
		}	
		
		for(int i = 0; i < 4; i++){
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	84 30       	cpi	r24, 0x04	; 4
     596:	91 05       	cpc	r25, r1
     598:	51 f7       	brne	.-44     	; 0x56e <main+0x16e>
			else if(flag_overheat[i] == 1){
				break;
			}
		}
			
		DisplayHeatsinkTemp(temp_heatsink);
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	41 de       	rcall	.-894    	; 0x222 <DisplayHeatsinkTemp>
     5a0:	c5 01       	movw	r24, r10
		DisplayInsideTemp_master(temp_inside);
     5a2:	b4 01       	movw	r22, r8
     5a4:	12 df       	rcall	.-476    	; 0x3ca <DisplayInsideTemp_master>
     5a6:	9f ef       	ldi	r25, 0xFF	; 255
     5a8:	a0 e7       	ldi	r26, 0x70	; 112
     5aa:	b2 e0       	ldi	r27, 0x02	; 2
     5ac:	91 50       	subi	r25, 0x01	; 1
     5ae:	a0 40       	sbci	r26, 0x00	; 0
     5b0:	b0 40       	sbci	r27, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x1ac>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x1b6>
     5b6:	00 00       	nop
		_delay_ms(50);
		
		for(int i = 0; i < 4; i++){
			if(flag_overheat[i] == 1){
     5b8:	f6 01       	movw	r30, r12
     5ba:	80 81       	ld	r24, Z
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	31 f4       	brne	.+12     	; 0x5cc <main+0x1cc>
				DisplayOverheatPeltier(1);
     5c0:	82 2d       	mov	r24, r2
     5c2:	15 df       	rcall	.-470    	; 0x3ee <DisplayOverheatPeltier>
     5c4:	47 cf       	rjmp	.-370    	; 0x454 <main+0x54>
				break;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
			}
			else if(i == 3){
				DisplayOverheatPeltier(0);
     5c8:	12 df       	rcall	.-476    	; 0x3ee <DisplayOverheatPeltier>
     5ca:	44 cf       	rjmp	.-376    	; 0x454 <main+0x54>
     5cc:	81 81       	ldd	r24, Z+1	; 0x01
     5ce:	81 30       	cpi	r24, 0x01	; 1
		DisplayHeatsinkTemp(temp_heatsink);
		DisplayInsideTemp_master(temp_inside);
		_delay_ms(50);
		
		for(int i = 0; i < 4; i++){
			if(flag_overheat[i] == 1){
     5d0:	b9 f3       	breq	.-18     	; 0x5c0 <main+0x1c0>
     5d2:	82 81       	ldd	r24, Z+2	; 0x02
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	a1 f3       	breq	.-24     	; 0x5c0 <main+0x1c0>
     5d8:	83 81       	ldd	r24, Z+3	; 0x03
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	a1 f7       	brne	.-24     	; 0x5c6 <main+0x1c6>
     5de:	f0 cf       	rjmp	.-32     	; 0x5c0 <main+0x1c0>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1);
		temp_heatsink[3] = getHeatsink4Temp();
		_delay_ms(1);
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
     5e4:	b7 cf       	rjmp	.-146    	; 0x554 <main+0x154>

000005e6 <ADC_initializer>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <math.h>
#include "sensor.h"

void ADC_initializer(void){
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <ADC_initializer+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <ADC_initializer+0x8>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
	volatile float dummy = 0;
     5f2:	19 82       	std	Y+1, r1	; 0x01
     5f4:	1a 82       	std	Y+2, r1	; 0x02
     5f6:	1b 82       	std	Y+3, r1	; 0x03
     5f8:	1c 82       	std	Y+4, r1	; 0x04
	
	cli();
     5fa:	f8 94       	cli
	/*ADC0 Initialize*/
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     5fc:	87 e8       	ldi	r24, 0x87	; 135
     5fe:	86 b9       	out	0x06, r24	; 6
     600:	2f ef       	ldi	r18, 0xFF	; 255
     602:	81 ee       	ldi	r24, 0xE1	; 225
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	21 50       	subi	r18, 0x01	; 1
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <ADC_initializer+0x20>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <ADC_initializer+0x2a>
     610:	00 00       	nop
	_delay_ms(100);
	ADMUX = (0 << MUX0) | (1 << REFS0);
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	87 b9       	out	0x07, r24	; 7
     616:	8f e3       	ldi	r24, 0x3F	; 63
     618:	9c e9       	ldi	r25, 0x9C	; 156
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <ADC_initializer+0x34>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <ADC_initializer+0x3a>
     620:	00 00       	nop
	_delay_ms(10);
	
	ADCSRA |= (1 << ADSC);
     622:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     624:	36 99       	sbic	0x06, 6	; 6
     626:	fe cf       	rjmp	.-4      	; 0x624 <ADC_initializer+0x3e>
	dummy = ADC;
     628:	64 b1       	in	r22, 0x04	; 4
     62a:	75 b1       	in	r23, 0x05	; 5
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	9c d3       	rcall	.+1848   	; 0xd6a <__floatunsisf>
     632:	69 83       	std	Y+1, r22	; 0x01
     634:	7a 83       	std	Y+2, r23	; 0x02
     636:	8b 83       	std	Y+3, r24	; 0x03
     638:	9c 83       	std	Y+4, r25	; 0x04
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	21 ee       	ldi	r18, 0xE1	; 225
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	91 50       	subi	r25, 0x01	; 1
     642:	20 40       	sbci	r18, 0x00	; 0
     644:	80 40       	sbci	r24, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <ADC_initializer+0x5a>
     648:	00 c0       	rjmp	.+0      	; 0x64a <ADC_initializer+0x64>
     64a:	00 00       	nop
	_delay_ms(100);
	
	/*ADC1 Initialize*/
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     64c:	87 e8       	ldi	r24, 0x87	; 135
     64e:	86 b9       	out	0x06, r24	; 6
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	21 ee       	ldi	r18, 0xE1	; 225
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	91 50       	subi	r25, 0x01	; 1
     658:	20 40       	sbci	r18, 0x00	; 0
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <ADC_initializer+0x70>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <ADC_initializer+0x7a>
     660:	00 00       	nop
	_delay_ms(100);
	ADMUX = (1 << MUX0) | (1 << REFS0);
     662:	81 e4       	ldi	r24, 0x41	; 65
     664:	87 b9       	out	0x07, r24	; 7
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	9c e9       	ldi	r25, 0x9C	; 156
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <ADC_initializer+0x84>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <ADC_initializer+0x8a>
     670:	00 00       	nop
	_delay_ms(10);
	
	ADCSRA |= (1 << ADSC);
     672:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     674:	36 99       	sbic	0x06, 6	; 6
     676:	fe cf       	rjmp	.-4      	; 0x674 <ADC_initializer+0x8e>
	dummy = ADC;
     678:	64 b1       	in	r22, 0x04	; 4
     67a:	75 b1       	in	r23, 0x05	; 5
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	74 d3       	rcall	.+1768   	; 0xd6a <__floatunsisf>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	21 ee       	ldi	r18, 0xE1	; 225
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	91 50       	subi	r25, 0x01	; 1
     692:	20 40       	sbci	r18, 0x00	; 0
     694:	80 40       	sbci	r24, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <ADC_initializer+0xaa>
     698:	00 c0       	rjmp	.+0      	; 0x69a <ADC_initializer+0xb4>
     69a:	00 00       	nop
	_delay_ms(100);
	
	/*ADC2 Initialize*/
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     69c:	87 e8       	ldi	r24, 0x87	; 135
     69e:	86 b9       	out	0x06, r24	; 6
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	21 ee       	ldi	r18, 0xE1	; 225
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	91 50       	subi	r25, 0x01	; 1
     6a8:	20 40       	sbci	r18, 0x00	; 0
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <ADC_initializer+0xc0>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <ADC_initializer+0xca>
     6b0:	00 00       	nop
	_delay_ms(100);
	ADMUX = (1 << MUX1) | (0 << MUX0) | (1 << REFS0);
     6b2:	82 e4       	ldi	r24, 0x42	; 66
     6b4:	87 b9       	out	0x07, r24	; 7
     6b6:	8f e3       	ldi	r24, 0x3F	; 63
     6b8:	9c e9       	ldi	r25, 0x9C	; 156
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <ADC_initializer+0xd4>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <ADC_initializer+0xda>
     6c0:	00 00       	nop
	_delay_ms(10);
	
	ADCSRA |= (1 << ADSC);
     6c2:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     6c4:	36 99       	sbic	0x06, 6	; 6
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <ADC_initializer+0xde>
	dummy = ADC;
     6c8:	64 b1       	in	r22, 0x04	; 4
     6ca:	75 b1       	in	r23, 0x05	; 5
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	4c d3       	rcall	.+1688   	; 0xd6a <__floatunsisf>
     6d2:	69 83       	std	Y+1, r22	; 0x01
     6d4:	7a 83       	std	Y+2, r23	; 0x02
     6d6:	8b 83       	std	Y+3, r24	; 0x03
     6d8:	9c 83       	std	Y+4, r25	; 0x04
     6da:	9f ef       	ldi	r25, 0xFF	; 255
     6dc:	21 ee       	ldi	r18, 0xE1	; 225
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	91 50       	subi	r25, 0x01	; 1
     6e2:	20 40       	sbci	r18, 0x00	; 0
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <ADC_initializer+0xfa>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <ADC_initializer+0x104>
     6ea:	00 00       	nop
	_delay_ms(100);
	
	/*ADC3 Initialize*/
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     6ec:	87 e8       	ldi	r24, 0x87	; 135
     6ee:	86 b9       	out	0x06, r24	; 6
     6f0:	9f ef       	ldi	r25, 0xFF	; 255
     6f2:	21 ee       	ldi	r18, 0xE1	; 225
     6f4:	84 e0       	ldi	r24, 0x04	; 4
     6f6:	91 50       	subi	r25, 0x01	; 1
     6f8:	20 40       	sbci	r18, 0x00	; 0
     6fa:	80 40       	sbci	r24, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <ADC_initializer+0x110>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <ADC_initializer+0x11a>
     700:	00 00       	nop
	_delay_ms(100);
	ADMUX = (1 << MUX1) | (1 << MUX0) | (1 << REFS0);
     702:	83 e4       	ldi	r24, 0x43	; 67
     704:	87 b9       	out	0x07, r24	; 7
     706:	8f e3       	ldi	r24, 0x3F	; 63
     708:	9c e9       	ldi	r25, 0x9C	; 156
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <ADC_initializer+0x124>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <ADC_initializer+0x12a>
     710:	00 00       	nop
	_delay_ms(10);
	
	ADCSRA |= (1 << ADSC);
     712:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     714:	36 99       	sbic	0x06, 6	; 6
     716:	fe cf       	rjmp	.-4      	; 0x714 <ADC_initializer+0x12e>
	dummy = ADC;
     718:	64 b1       	in	r22, 0x04	; 4
     71a:	75 b1       	in	r23, 0x05	; 5
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	24 d3       	rcall	.+1608   	; 0xd6a <__floatunsisf>
     722:	69 83       	std	Y+1, r22	; 0x01
     724:	7a 83       	std	Y+2, r23	; 0x02
     726:	8b 83       	std	Y+3, r24	; 0x03
     728:	9c 83       	std	Y+4, r25	; 0x04
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	21 ee       	ldi	r18, 0xE1	; 225
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	91 50       	subi	r25, 0x01	; 1
     732:	20 40       	sbci	r18, 0x00	; 0
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <ADC_initializer+0x14a>
     738:	00 c0       	rjmp	.+0      	; 0x73a <ADC_initializer+0x154>
     73a:	00 00       	nop
	_delay_ms(100);
	
	sei();
     73c:	78 94       	sei
}
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <getHeatsink1Temp>:

/*Thremistor: 10KD-5K*/
/*10KD-5K's B-parameter: 4200*/
/*voltage dividing resistor: 2K*/

float getHeatsink1Temp(void){
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (1 << REFS0); 
     758:	80 e4       	ldi	r24, 0x40	; 64
     75a:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75c:	8f e8       	ldi	r24, 0x8F	; 143
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <getHeatsink1Temp+0x14>
     764:	00 c0       	rjmp	.+0      	; 0x766 <getHeatsink1Temp+0x1a>
     766:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC); 
     768:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC)); 
     76a:	36 99       	sbic	0x06, 6	; 6
     76c:	fe cf       	rjmp	.-4      	; 0x76a <getHeatsink1Temp+0x1e>
     76e:	ca e0       	ldi	r28, 0x0A	; 10
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	c1 2c       	mov	r12, r1
     774:	d1 2c       	mov	r13, r1
     776:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     778:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     77a:	36 99       	sbic	0x06, 6	; 6
     77c:	fe cf       	rjmp	.-4      	; 0x77a <getHeatsink1Temp+0x2e>
		Vo += ADC;
     77e:	64 b1       	in	r22, 0x04	; 4
     780:	75 b1       	in	r23, 0x05	; 5
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	f1 d2       	rcall	.+1506   	; 0xd6a <__floatunsisf>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	eb d1       	rcall	.+982    	; 0xb68 <__addsf3>
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
     796:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC); 
	while(ADCSRA & (1 << ADSC)); 
	
	for(int i = 0; i < F_VAL; i++){
     798:	79 f7       	brne	.-34     	; 0x778 <getHeatsink1Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e2       	ldi	r20, 0x20	; 32
     7a0:	51 e4       	ldi	r21, 0x41	; 65
     7a2:	4a d2       	rcall	.+1172   	; 0xc38 <__divsf3>
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 ec       	ldi	r23, 0xC0	; 192
     7ac:	8f e7       	ldi	r24, 0x7F	; 127
     7ae:	94 e4       	ldi	r25, 0x44	; 68
     7b0:	43 d2       	rcall	.+1158   	; 0xc38 <__divsf3>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	5f e3       	ldi	r21, 0x3F	; 63
     7ba:	d5 d1       	rcall	.+938    	; 0xb66 <__subsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	4a ef       	ldi	r20, 0xFA	; 250
     7c2:	54 e4       	ldi	r21, 0x44	; 68
     7c4:	cd d3       	rcall	.+1946   	; 0xf60 <__mulsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e4       	ldi	r19, 0x40	; 64
     7ca:	4c e1       	ldi	r20, 0x1C	; 28
     7cc:	56 e4       	ldi	r21, 0x46	; 70
     7ce:	34 d2       	rcall	.+1128   	; 0xc38 <__divsf3>
     7d0:	87 d3       	rcall	.+1806   	; 0xee0 <log>
	Cel = T - 273.15;
	return Cel;
     7d2:	24 e3       	ldi	r18, 0x34	; 52
     7d4:	39 ea       	ldi	r19, 0xA9	; 169
     7d6:	49 e7       	ldi	r20, 0x79	; 121
     7d8:	59 e3       	ldi	r21, 0x39	; 57
     7da:	c2 d3       	rcall	.+1924   	; 0xf60 <__mulsf3>
     7dc:	2f e0       	ldi	r18, 0x0F	; 15
     7de:	3f ec       	ldi	r19, 0xCF	; 207
     7e0:	4b e5       	ldi	r20, 0x5B	; 91
     7e2:	5b e3       	ldi	r21, 0x3B	; 59
     7e4:	c1 d1       	rcall	.+898    	; 0xb68 <__addsf3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	9f e3       	ldi	r25, 0x3F	; 63
     7f2:	22 d2       	rcall	.+1092   	; 0xc38 <__divsf3>
     7f4:	23 e3       	ldi	r18, 0x33	; 51
     7f6:	33 e9       	ldi	r19, 0x93	; 147
     7f8:	48 e8       	ldi	r20, 0x88	; 136
     7fa:	53 e4       	ldi	r21, 0x43	; 67
     7fc:	b4 d1       	rcall	.+872    	; 0xb66 <__subsf3>
     7fe:	df 91       	pop	r29
}
     800:	cf 91       	pop	r28
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	08 95       	ret

0000080c <getHeatsink2Temp>:
     80c:	cf 92       	push	r12

float getHeatsink2Temp(void){ 
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (1 << MUX0) | (1 << REFS0);
     818:	81 e4       	ldi	r24, 0x41	; 65
     81a:	87 b9       	out	0x07, r24	; 7
     81c:	8f e8       	ldi	r24, 0x8F	; 143
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <getHeatsink2Temp+0x14>
     824:	00 c0       	rjmp	.+0      	; 0x826 <getHeatsink2Temp+0x1a>
     826:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     828:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     82a:	36 99       	sbic	0x06, 6	; 6
     82c:	fe cf       	rjmp	.-4      	; 0x82a <getHeatsink2Temp+0x1e>
     82e:	ca e0       	ldi	r28, 0x0A	; 10
     830:	d0 e0       	ldi	r29, 0x00	; 0
     832:	c1 2c       	mov	r12, r1
     834:	d1 2c       	mov	r13, r1
     836:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     838:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     83a:	36 99       	sbic	0x06, 6	; 6
     83c:	fe cf       	rjmp	.-4      	; 0x83a <getHeatsink2Temp+0x2e>
		Vo += ADC;
     83e:	64 b1       	in	r22, 0x04	; 4
     840:	75 b1       	in	r23, 0x05	; 5
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	91 d2       	rcall	.+1314   	; 0xd6a <__floatunsisf>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	c7 01       	movw	r24, r14
     84e:	b6 01       	movw	r22, r12
     850:	8b d1       	rcall	.+790    	; 0xb68 <__addsf3>
     852:	6b 01       	movw	r12, r22
     854:	7c 01       	movw	r14, r24
     856:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     858:	79 f7       	brne	.-34     	; 0x838 <getHeatsink2Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e2       	ldi	r20, 0x20	; 32
     860:	51 e4       	ldi	r21, 0x41	; 65
     862:	ea d1       	rcall	.+980    	; 0xc38 <__divsf3>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 ec       	ldi	r23, 0xC0	; 192
     86c:	8f e7       	ldi	r24, 0x7F	; 127
     86e:	94 e4       	ldi	r25, 0x44	; 68
     870:	e3 d1       	rcall	.+966    	; 0xc38 <__divsf3>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	75 d1       	rcall	.+746    	; 0xb66 <__subsf3>
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	4a ef       	ldi	r20, 0xFA	; 250
     882:	54 e4       	ldi	r21, 0x44	; 68
     884:	6d d3       	rcall	.+1754   	; 0xf60 <__mulsf3>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e4       	ldi	r19, 0x40	; 64
     88a:	4c e1       	ldi	r20, 0x1C	; 28
     88c:	56 e4       	ldi	r21, 0x46	; 70
     88e:	d4 d1       	rcall	.+936    	; 0xc38 <__divsf3>
     890:	27 d3       	rcall	.+1614   	; 0xee0 <log>
	Cel = T - 273.15;
	return Cel;
     892:	24 e3       	ldi	r18, 0x34	; 52
     894:	39 ea       	ldi	r19, 0xA9	; 169
     896:	49 e7       	ldi	r20, 0x79	; 121
     898:	59 e3       	ldi	r21, 0x39	; 57
     89a:	62 d3       	rcall	.+1732   	; 0xf60 <__mulsf3>
     89c:	2f e0       	ldi	r18, 0x0F	; 15
     89e:	3f ec       	ldi	r19, 0xCF	; 207
     8a0:	4b e5       	ldi	r20, 0x5B	; 91
     8a2:	5b e3       	ldi	r21, 0x3B	; 59
     8a4:	61 d1       	rcall	.+706    	; 0xb68 <__addsf3>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	9f e3       	ldi	r25, 0x3F	; 63
     8b2:	c2 d1       	rcall	.+900    	; 0xc38 <__divsf3>
     8b4:	23 e3       	ldi	r18, 0x33	; 51
     8b6:	33 e9       	ldi	r19, 0x93	; 147
     8b8:	48 e8       	ldi	r20, 0x88	; 136
     8ba:	53 e4       	ldi	r21, 0x43	; 67
     8bc:	54 d1       	rcall	.+680    	; 0xb66 <__subsf3>
     8be:	df 91       	pop	r29
}
     8c0:	cf 91       	pop	r28
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	08 95       	ret

000008cc <getHeatsink3Temp>:
     8cc:	cf 92       	push	r12

float getHeatsink3Temp(void){
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (1 << MUX1) | (1 << REFS0);
     8d8:	82 e4       	ldi	r24, 0x42	; 66
     8da:	87 b9       	out	0x07, r24	; 7
     8dc:	8f e8       	ldi	r24, 0x8F	; 143
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <getHeatsink3Temp+0x14>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <getHeatsink3Temp+0x1a>
     8e6:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     8e8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     8ea:	36 99       	sbic	0x06, 6	; 6
     8ec:	fe cf       	rjmp	.-4      	; 0x8ea <getHeatsink3Temp+0x1e>
     8ee:	ca e0       	ldi	r28, 0x0A	; 10
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	c1 2c       	mov	r12, r1
     8f4:	d1 2c       	mov	r13, r1
     8f6:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     8f8:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     8fa:	36 99       	sbic	0x06, 6	; 6
     8fc:	fe cf       	rjmp	.-4      	; 0x8fa <getHeatsink3Temp+0x2e>
		Vo += ADC;
     8fe:	64 b1       	in	r22, 0x04	; 4
     900:	75 b1       	in	r23, 0x05	; 5
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	31 d2       	rcall	.+1122   	; 0xd6a <__floatunsisf>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	2b d1       	rcall	.+598    	; 0xb68 <__addsf3>
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
     916:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     918:	79 f7       	brne	.-34     	; 0x8f8 <getHeatsink3Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e2       	ldi	r20, 0x20	; 32
     920:	51 e4       	ldi	r21, 0x41	; 65
     922:	8a d1       	rcall	.+788    	; 0xc38 <__divsf3>
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 ec       	ldi	r23, 0xC0	; 192
     92c:	8f e7       	ldi	r24, 0x7F	; 127
     92e:	94 e4       	ldi	r25, 0x44	; 68
     930:	83 d1       	rcall	.+774    	; 0xc38 <__divsf3>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e8       	ldi	r20, 0x80	; 128
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	15 d1       	rcall	.+554    	; 0xb66 <__subsf3>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	4a ef       	ldi	r20, 0xFA	; 250
     942:	54 e4       	ldi	r21, 0x44	; 68
     944:	0d d3       	rcall	.+1562   	; 0xf60 <__mulsf3>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e4       	ldi	r19, 0x40	; 64
     94a:	4c e1       	ldi	r20, 0x1C	; 28
     94c:	56 e4       	ldi	r21, 0x46	; 70
     94e:	74 d1       	rcall	.+744    	; 0xc38 <__divsf3>
     950:	c7 d2       	rcall	.+1422   	; 0xee0 <log>
	Cel = T - 273.15;
	return Cel;
     952:	24 e3       	ldi	r18, 0x34	; 52
     954:	39 ea       	ldi	r19, 0xA9	; 169
     956:	49 e7       	ldi	r20, 0x79	; 121
     958:	59 e3       	ldi	r21, 0x39	; 57
     95a:	02 d3       	rcall	.+1540   	; 0xf60 <__mulsf3>
     95c:	2f e0       	ldi	r18, 0x0F	; 15
     95e:	3f ec       	ldi	r19, 0xCF	; 207
     960:	4b e5       	ldi	r20, 0x5B	; 91
     962:	5b e3       	ldi	r21, 0x3B	; 59
     964:	01 d1       	rcall	.+514    	; 0xb68 <__addsf3>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	9f e3       	ldi	r25, 0x3F	; 63
     972:	62 d1       	rcall	.+708    	; 0xc38 <__divsf3>
     974:	23 e3       	ldi	r18, 0x33	; 51
     976:	33 e9       	ldi	r19, 0x93	; 147
     978:	48 e8       	ldi	r20, 0x88	; 136
     97a:	53 e4       	ldi	r21, 0x43	; 67
     97c:	f4 d0       	rcall	.+488    	; 0xb66 <__subsf3>
     97e:	df 91       	pop	r29
}
     980:	cf 91       	pop	r28
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <getHeatsink4Temp>:
     98c:	cf 92       	push	r12

float getHeatsink4Temp(void){
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (1 << MUX0) | (1 << MUX1) | (1 << REFS0);
     998:	83 e4       	ldi	r24, 0x43	; 67
     99a:	87 b9       	out	0x07, r24	; 7
     99c:	8f e8       	ldi	r24, 0x8F	; 143
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <getHeatsink4Temp+0x14>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <getHeatsink4Temp+0x1a>
     9a6:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     9a8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     9aa:	36 99       	sbic	0x06, 6	; 6
     9ac:	fe cf       	rjmp	.-4      	; 0x9aa <getHeatsink4Temp+0x1e>
     9ae:	ca e0       	ldi	r28, 0x0A	; 10
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	c1 2c       	mov	r12, r1
     9b4:	d1 2c       	mov	r13, r1
     9b6:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     9b8:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     9ba:	36 99       	sbic	0x06, 6	; 6
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <getHeatsink4Temp+0x2e>
		Vo += ADC;
     9be:	64 b1       	in	r22, 0x04	; 4
     9c0:	75 b1       	in	r23, 0x05	; 5
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	d1 d1       	rcall	.+930    	; 0xd6a <__floatunsisf>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	cb d0       	rcall	.+406    	; 0xb68 <__addsf3>
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
     9d6:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     9d8:	79 f7       	brne	.-34     	; 0x9b8 <getHeatsink4Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e2       	ldi	r20, 0x20	; 32
     9e0:	51 e4       	ldi	r21, 0x41	; 65
     9e2:	2a d1       	rcall	.+596    	; 0xc38 <__divsf3>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 ec       	ldi	r23, 0xC0	; 192
     9ec:	8f e7       	ldi	r24, 0x7F	; 127
     9ee:	94 e4       	ldi	r25, 0x44	; 68
     9f0:	23 d1       	rcall	.+582    	; 0xc38 <__divsf3>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e8       	ldi	r20, 0x80	; 128
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	b5 d0       	rcall	.+362    	; 0xb66 <__subsf3>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	4a ef       	ldi	r20, 0xFA	; 250
     a02:	54 e4       	ldi	r21, 0x44	; 68
     a04:	ad d2       	rcall	.+1370   	; 0xf60 <__mulsf3>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e4       	ldi	r19, 0x40	; 64
     a0a:	4c e1       	ldi	r20, 0x1C	; 28
     a0c:	56 e4       	ldi	r21, 0x46	; 70
     a0e:	14 d1       	rcall	.+552    	; 0xc38 <__divsf3>
     a10:	67 d2       	rcall	.+1230   	; 0xee0 <log>
	Cel = T - 273.15;
	return Cel;
     a12:	24 e3       	ldi	r18, 0x34	; 52
     a14:	39 ea       	ldi	r19, 0xA9	; 169
     a16:	49 e7       	ldi	r20, 0x79	; 121
     a18:	59 e3       	ldi	r21, 0x39	; 57
     a1a:	a2 d2       	rcall	.+1348   	; 0xf60 <__mulsf3>
     a1c:	2f e0       	ldi	r18, 0x0F	; 15
     a1e:	3f ec       	ldi	r19, 0xCF	; 207
     a20:	4b e5       	ldi	r20, 0x5B	; 91
     a22:	5b e3       	ldi	r21, 0x3B	; 59
     a24:	a1 d0       	rcall	.+322    	; 0xb68 <__addsf3>
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e8       	ldi	r24, 0x80	; 128
     a30:	9f e3       	ldi	r25, 0x3F	; 63
     a32:	02 d1       	rcall	.+516    	; 0xc38 <__divsf3>
     a34:	23 e3       	ldi	r18, 0x33	; 51
     a36:	33 e9       	ldi	r19, 0x93	; 147
     a38:	48 e8       	ldi	r20, 0x88	; 136
     a3a:	53 e4       	ldi	r21, 0x43	; 67
     a3c:	94 d0       	rcall	.+296    	; 0xb66 <__subsf3>
     a3e:	df 91       	pop	r29
}
     a40:	cf 91       	pop	r28
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	08 95       	ret

00000a4c <getInsideTemp>:
     a4c:	cf 92       	push	r12

float getInsideTemp(void){ 
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (1 << MUX2) | (1 << REFS0);
     a58:	84 e4       	ldi	r24, 0x44	; 68
     a5a:	87 b9       	out	0x07, r24	; 7
     a5c:	8f e8       	ldi	r24, 0x8F	; 143
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <getInsideTemp+0x14>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <getInsideTemp+0x1a>
     a66:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     a68:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     a6a:	36 99       	sbic	0x06, 6	; 6
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <getInsideTemp+0x1e>
     a6e:	ca e0       	ldi	r28, 0x0A	; 10
     a70:	d0 e0       	ldi	r29, 0x00	; 0
     a72:	c1 2c       	mov	r12, r1
     a74:	d1 2c       	mov	r13, r1
     a76:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     a78:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     a7a:	36 99       	sbic	0x06, 6	; 6
     a7c:	fe cf       	rjmp	.-4      	; 0xa7a <getInsideTemp+0x2e>
		Vo += ADC;
     a7e:	64 b1       	in	r22, 0x04	; 4
     a80:	75 b1       	in	r23, 0x05	; 5
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	71 d1       	rcall	.+738    	; 0xd6a <__floatunsisf>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	c7 01       	movw	r24, r14
     a8e:	b6 01       	movw	r22, r12
     a90:	6b d0       	rcall	.+214    	; 0xb68 <__addsf3>
     a92:	6b 01       	movw	r12, r22
     a94:	7c 01       	movw	r14, r24
     a96:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     a98:	79 f7       	brne	.-34     	; 0xa78 <getInsideTemp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e2       	ldi	r20, 0x20	; 32
     aa0:	51 e4       	ldi	r21, 0x41	; 65
     aa2:	ca d0       	rcall	.+404    	; 0xc38 <__divsf3>
     aa4:	9b 01       	movw	r18, r22
     aa6:	ac 01       	movw	r20, r24
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 ec       	ldi	r23, 0xC0	; 192
     aac:	8f e7       	ldi	r24, 0x7F	; 127
     aae:	94 e4       	ldi	r25, 0x44	; 68
     ab0:	c3 d0       	rcall	.+390    	; 0xc38 <__divsf3>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e8       	ldi	r20, 0x80	; 128
     ab8:	5f e3       	ldi	r21, 0x3F	; 63
     aba:	55 d0       	rcall	.+170    	; 0xb66 <__subsf3>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	4a ef       	ldi	r20, 0xFA	; 250
     ac2:	54 e4       	ldi	r21, 0x44	; 68
     ac4:	4d d2       	rcall	.+1178   	; 0xf60 <__mulsf3>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e4       	ldi	r19, 0x40	; 64
     aca:	4c e1       	ldi	r20, 0x1C	; 28
     acc:	56 e4       	ldi	r21, 0x46	; 70
     ace:	b4 d0       	rcall	.+360    	; 0xc38 <__divsf3>
     ad0:	07 d2       	rcall	.+1038   	; 0xee0 <log>
	Cel = T - 273.15;
	return Cel;
     ad2:	24 e3       	ldi	r18, 0x34	; 52
     ad4:	39 ea       	ldi	r19, 0xA9	; 169
     ad6:	49 e7       	ldi	r20, 0x79	; 121
     ad8:	59 e3       	ldi	r21, 0x39	; 57
     ada:	42 d2       	rcall	.+1156   	; 0xf60 <__mulsf3>
     adc:	2f e0       	ldi	r18, 0x0F	; 15
     ade:	3f ec       	ldi	r19, 0xCF	; 207
     ae0:	4b e5       	ldi	r20, 0x5B	; 91
     ae2:	5b e3       	ldi	r21, 0x3B	; 59
     ae4:	41 d0       	rcall	.+130    	; 0xb68 <__addsf3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e8       	ldi	r24, 0x80	; 128
     af0:	9f e3       	ldi	r25, 0x3F	; 63
     af2:	a2 d0       	rcall	.+324    	; 0xc38 <__divsf3>
     af4:	23 e3       	ldi	r18, 0x33	; 51
     af6:	33 e9       	ldi	r19, 0x93	; 147
     af8:	48 e8       	ldi	r20, 0x88	; 136
     afa:	53 e4       	ldi	r21, 0x43	; 67
     afc:	34 d0       	rcall	.+104    	; 0xb66 <__subsf3>
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	08 95       	ret

00000b0c <TWI_initializer>:
#include <util/delay.h>
#include "TWI.h"
#include "CLCD.h"

void TWI_initializer(void){
	cli();
     b0c:	f8 94       	cli
	TWBR = 12;
     b0e:	8c e0       	ldi	r24, 0x0C	; 12
     b10:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TWSR = 0x00; 
     b14:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	sei();
     b18:	78 94       	sei
     b1a:	08 95       	ret

00000b1c <TWI_start>:
}

void TWI_start(void){
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
     b1c:	84 ea       	ldi	r24, 0xA4	; 164
     b1e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1 << TWINT))); //wait for set interrupt flag
     b22:	e4 e7       	ldi	r30, 0x74	; 116
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	88 23       	and	r24, r24
     b2a:	ec f7       	brge	.-6      	; 0xb26 <TWI_start+0xa>
}
     b2c:	08 95       	ret

00000b2e <TWI_transmit>:

void TWI_transmit(uint8_t slave_addr, uint8_t data){
	TWDR = (slave_addr << 1) & 0xFE; // R/W: W (master -> slave)
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN); //transmit
     b38:	84 ec       	ldi	r24, 0xC4	; 196
     b3a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1 << TWINT))); //wait ACK (interrupt flag set)
     b3e:	e4 e7       	ldi	r30, 0x74	; 116
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	88 23       	and	r24, r24
     b46:	ec f7       	brge	.-6      	; 0xb42 <TWI_transmit+0x14>
	
	TWDR = data;
     b48:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN); 
     b4c:	84 ec       	ldi	r24, 0xC4	; 196
     b4e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1 << TWINT)));
     b52:	e4 e7       	ldi	r30, 0x74	; 116
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 23       	and	r24, r24
     b5a:	ec f7       	brge	.-6      	; 0xb56 <TWI_transmit+0x28>
}
     b5c:	08 95       	ret

00000b5e <TWI_stop>:

void TWI_stop(void){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     b5e:	84 e9       	ldi	r24, 0x94	; 148
     b60:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     b64:	08 95       	ret

00000b66 <__subsf3>:
     b66:	50 58       	subi	r21, 0x80	; 128

00000b68 <__addsf3>:
     b68:	bb 27       	eor	r27, r27
     b6a:	aa 27       	eor	r26, r26
     b6c:	0e d0       	rcall	.+28     	; 0xb8a <__addsf3x>
     b6e:	75 c1       	rjmp	.+746    	; 0xe5a <__fp_round>
     b70:	66 d1       	rcall	.+716    	; 0xe3e <__fp_pscA>
     b72:	30 f0       	brcs	.+12     	; 0xb80 <__addsf3+0x18>
     b74:	6b d1       	rcall	.+726    	; 0xe4c <__fp_pscB>
     b76:	20 f0       	brcs	.+8      	; 0xb80 <__addsf3+0x18>
     b78:	31 f4       	brne	.+12     	; 0xb86 <__addsf3+0x1e>
     b7a:	9f 3f       	cpi	r25, 0xFF	; 255
     b7c:	11 f4       	brne	.+4      	; 0xb82 <__addsf3+0x1a>
     b7e:	1e f4       	brtc	.+6      	; 0xb86 <__addsf3+0x1e>
     b80:	5b c1       	rjmp	.+694    	; 0xe38 <__fp_nan>
     b82:	0e f4       	brtc	.+2      	; 0xb86 <__addsf3+0x1e>
     b84:	e0 95       	com	r30
     b86:	e7 fb       	bst	r30, 7
     b88:	51 c1       	rjmp	.+674    	; 0xe2c <__fp_inf>

00000b8a <__addsf3x>:
     b8a:	e9 2f       	mov	r30, r25
     b8c:	77 d1       	rcall	.+750    	; 0xe7c <__fp_split3>
     b8e:	80 f3       	brcs	.-32     	; 0xb70 <__addsf3+0x8>
     b90:	ba 17       	cp	r27, r26
     b92:	62 07       	cpc	r22, r18
     b94:	73 07       	cpc	r23, r19
     b96:	84 07       	cpc	r24, r20
     b98:	95 07       	cpc	r25, r21
     b9a:	18 f0       	brcs	.+6      	; 0xba2 <__addsf3x+0x18>
     b9c:	71 f4       	brne	.+28     	; 0xbba <__addsf3x+0x30>
     b9e:	9e f5       	brtc	.+102    	; 0xc06 <__addsf3x+0x7c>
     ba0:	8f c1       	rjmp	.+798    	; 0xec0 <__fp_zero>
     ba2:	0e f4       	brtc	.+2      	; 0xba6 <__addsf3x+0x1c>
     ba4:	e0 95       	com	r30
     ba6:	0b 2e       	mov	r0, r27
     ba8:	ba 2f       	mov	r27, r26
     baa:	a0 2d       	mov	r26, r0
     bac:	0b 01       	movw	r0, r22
     bae:	b9 01       	movw	r22, r18
     bb0:	90 01       	movw	r18, r0
     bb2:	0c 01       	movw	r0, r24
     bb4:	ca 01       	movw	r24, r20
     bb6:	a0 01       	movw	r20, r0
     bb8:	11 24       	eor	r1, r1
     bba:	ff 27       	eor	r31, r31
     bbc:	59 1b       	sub	r21, r25
     bbe:	99 f0       	breq	.+38     	; 0xbe6 <__addsf3x+0x5c>
     bc0:	59 3f       	cpi	r21, 0xF9	; 249
     bc2:	50 f4       	brcc	.+20     	; 0xbd8 <__addsf3x+0x4e>
     bc4:	50 3e       	cpi	r21, 0xE0	; 224
     bc6:	68 f1       	brcs	.+90     	; 0xc22 <__addsf3x+0x98>
     bc8:	1a 16       	cp	r1, r26
     bca:	f0 40       	sbci	r31, 0x00	; 0
     bcc:	a2 2f       	mov	r26, r18
     bce:	23 2f       	mov	r18, r19
     bd0:	34 2f       	mov	r19, r20
     bd2:	44 27       	eor	r20, r20
     bd4:	58 5f       	subi	r21, 0xF8	; 248
     bd6:	f3 cf       	rjmp	.-26     	; 0xbbe <__addsf3x+0x34>
     bd8:	46 95       	lsr	r20
     bda:	37 95       	ror	r19
     bdc:	27 95       	ror	r18
     bde:	a7 95       	ror	r26
     be0:	f0 40       	sbci	r31, 0x00	; 0
     be2:	53 95       	inc	r21
     be4:	c9 f7       	brne	.-14     	; 0xbd8 <__addsf3x+0x4e>
     be6:	7e f4       	brtc	.+30     	; 0xc06 <__addsf3x+0x7c>
     be8:	1f 16       	cp	r1, r31
     bea:	ba 0b       	sbc	r27, r26
     bec:	62 0b       	sbc	r22, r18
     bee:	73 0b       	sbc	r23, r19
     bf0:	84 0b       	sbc	r24, r20
     bf2:	ba f0       	brmi	.+46     	; 0xc22 <__addsf3x+0x98>
     bf4:	91 50       	subi	r25, 0x01	; 1
     bf6:	a1 f0       	breq	.+40     	; 0xc20 <__addsf3x+0x96>
     bf8:	ff 0f       	add	r31, r31
     bfa:	bb 1f       	adc	r27, r27
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	c2 f7       	brpl	.-16     	; 0xbf4 <__addsf3x+0x6a>
     c04:	0e c0       	rjmp	.+28     	; 0xc22 <__addsf3x+0x98>
     c06:	ba 0f       	add	r27, r26
     c08:	62 1f       	adc	r22, r18
     c0a:	73 1f       	adc	r23, r19
     c0c:	84 1f       	adc	r24, r20
     c0e:	48 f4       	brcc	.+18     	; 0xc22 <__addsf3x+0x98>
     c10:	87 95       	ror	r24
     c12:	77 95       	ror	r23
     c14:	67 95       	ror	r22
     c16:	b7 95       	ror	r27
     c18:	f7 95       	ror	r31
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <__addsf3x+0x96>
     c1e:	b3 cf       	rjmp	.-154    	; 0xb86 <__addsf3+0x1e>
     c20:	93 95       	inc	r25
     c22:	88 0f       	add	r24, r24
     c24:	08 f0       	brcs	.+2      	; 0xc28 <__addsf3x+0x9e>
     c26:	99 27       	eor	r25, r25
     c28:	ee 0f       	add	r30, r30
     c2a:	97 95       	ror	r25
     c2c:	87 95       	ror	r24
     c2e:	08 95       	ret

00000c30 <__cmpsf2>:
     c30:	d9 d0       	rcall	.+434    	; 0xde4 <__fp_cmp>
     c32:	08 f4       	brcc	.+2      	; 0xc36 <__cmpsf2+0x6>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	08 95       	ret

00000c38 <__divsf3>:
     c38:	0c d0       	rcall	.+24     	; 0xc52 <__divsf3x>
     c3a:	0f c1       	rjmp	.+542    	; 0xe5a <__fp_round>
     c3c:	07 d1       	rcall	.+526    	; 0xe4c <__fp_pscB>
     c3e:	40 f0       	brcs	.+16     	; 0xc50 <__divsf3+0x18>
     c40:	fe d0       	rcall	.+508    	; 0xe3e <__fp_pscA>
     c42:	30 f0       	brcs	.+12     	; 0xc50 <__divsf3+0x18>
     c44:	21 f4       	brne	.+8      	; 0xc4e <__divsf3+0x16>
     c46:	5f 3f       	cpi	r21, 0xFF	; 255
     c48:	19 f0       	breq	.+6      	; 0xc50 <__divsf3+0x18>
     c4a:	f0 c0       	rjmp	.+480    	; 0xe2c <__fp_inf>
     c4c:	51 11       	cpse	r21, r1
     c4e:	39 c1       	rjmp	.+626    	; 0xec2 <__fp_szero>
     c50:	f3 c0       	rjmp	.+486    	; 0xe38 <__fp_nan>

00000c52 <__divsf3x>:
     c52:	14 d1       	rcall	.+552    	; 0xe7c <__fp_split3>
     c54:	98 f3       	brcs	.-26     	; 0xc3c <__divsf3+0x4>

00000c56 <__divsf3_pse>:
     c56:	99 23       	and	r25, r25
     c58:	c9 f3       	breq	.-14     	; 0xc4c <__divsf3+0x14>
     c5a:	55 23       	and	r21, r21
     c5c:	b1 f3       	breq	.-20     	; 0xc4a <__divsf3+0x12>
     c5e:	95 1b       	sub	r25, r21
     c60:	55 0b       	sbc	r21, r21
     c62:	bb 27       	eor	r27, r27
     c64:	aa 27       	eor	r26, r26
     c66:	62 17       	cp	r22, r18
     c68:	73 07       	cpc	r23, r19
     c6a:	84 07       	cpc	r24, r20
     c6c:	38 f0       	brcs	.+14     	; 0xc7c <__divsf3_pse+0x26>
     c6e:	9f 5f       	subi	r25, 0xFF	; 255
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	44 1f       	adc	r20, r20
     c78:	aa 1f       	adc	r26, r26
     c7a:	a9 f3       	breq	.-22     	; 0xc66 <__divsf3_pse+0x10>
     c7c:	33 d0       	rcall	.+102    	; 0xce4 <__divsf3_pse+0x8e>
     c7e:	0e 2e       	mov	r0, r30
     c80:	3a f0       	brmi	.+14     	; 0xc90 <__divsf3_pse+0x3a>
     c82:	e0 e8       	ldi	r30, 0x80	; 128
     c84:	30 d0       	rcall	.+96     	; 0xce6 <__divsf3_pse+0x90>
     c86:	91 50       	subi	r25, 0x01	; 1
     c88:	50 40       	sbci	r21, 0x00	; 0
     c8a:	e6 95       	lsr	r30
     c8c:	00 1c       	adc	r0, r0
     c8e:	ca f7       	brpl	.-14     	; 0xc82 <__divsf3_pse+0x2c>
     c90:	29 d0       	rcall	.+82     	; 0xce4 <__divsf3_pse+0x8e>
     c92:	fe 2f       	mov	r31, r30
     c94:	27 d0       	rcall	.+78     	; 0xce4 <__divsf3_pse+0x8e>
     c96:	66 0f       	add	r22, r22
     c98:	77 1f       	adc	r23, r23
     c9a:	88 1f       	adc	r24, r24
     c9c:	bb 1f       	adc	r27, r27
     c9e:	26 17       	cp	r18, r22
     ca0:	37 07       	cpc	r19, r23
     ca2:	48 07       	cpc	r20, r24
     ca4:	ab 07       	cpc	r26, r27
     ca6:	b0 e8       	ldi	r27, 0x80	; 128
     ca8:	09 f0       	breq	.+2      	; 0xcac <__divsf3_pse+0x56>
     caa:	bb 0b       	sbc	r27, r27
     cac:	80 2d       	mov	r24, r0
     cae:	bf 01       	movw	r22, r30
     cb0:	ff 27       	eor	r31, r31
     cb2:	93 58       	subi	r25, 0x83	; 131
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	2a f0       	brmi	.+10     	; 0xcc2 <__divsf3_pse+0x6c>
     cb8:	9e 3f       	cpi	r25, 0xFE	; 254
     cba:	51 05       	cpc	r21, r1
     cbc:	68 f0       	brcs	.+26     	; 0xcd8 <__divsf3_pse+0x82>
     cbe:	b6 c0       	rjmp	.+364    	; 0xe2c <__fp_inf>
     cc0:	00 c1       	rjmp	.+512    	; 0xec2 <__fp_szero>
     cc2:	5f 3f       	cpi	r21, 0xFF	; 255
     cc4:	ec f3       	brlt	.-6      	; 0xcc0 <__divsf3_pse+0x6a>
     cc6:	98 3e       	cpi	r25, 0xE8	; 232
     cc8:	dc f3       	brlt	.-10     	; 0xcc0 <__divsf3_pse+0x6a>
     cca:	86 95       	lsr	r24
     ccc:	77 95       	ror	r23
     cce:	67 95       	ror	r22
     cd0:	b7 95       	ror	r27
     cd2:	f7 95       	ror	r31
     cd4:	9f 5f       	subi	r25, 0xFF	; 255
     cd6:	c9 f7       	brne	.-14     	; 0xcca <__divsf3_pse+0x74>
     cd8:	88 0f       	add	r24, r24
     cda:	91 1d       	adc	r25, r1
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
     ce0:	97 f9       	bld	r25, 7
     ce2:	08 95       	ret
     ce4:	e1 e0       	ldi	r30, 0x01	; 1
     ce6:	66 0f       	add	r22, r22
     ce8:	77 1f       	adc	r23, r23
     cea:	88 1f       	adc	r24, r24
     cec:	bb 1f       	adc	r27, r27
     cee:	62 17       	cp	r22, r18
     cf0:	73 07       	cpc	r23, r19
     cf2:	84 07       	cpc	r24, r20
     cf4:	ba 07       	cpc	r27, r26
     cf6:	20 f0       	brcs	.+8      	; 0xd00 <__divsf3_pse+0xaa>
     cf8:	62 1b       	sub	r22, r18
     cfa:	73 0b       	sbc	r23, r19
     cfc:	84 0b       	sbc	r24, r20
     cfe:	ba 0b       	sbc	r27, r26
     d00:	ee 1f       	adc	r30, r30
     d02:	88 f7       	brcc	.-30     	; 0xce6 <__divsf3_pse+0x90>
     d04:	e0 95       	com	r30
     d06:	08 95       	ret

00000d08 <__fixsfsi>:
     d08:	04 d0       	rcall	.+8      	; 0xd12 <__fixunssfsi>
     d0a:	68 94       	set
     d0c:	b1 11       	cpse	r27, r1
     d0e:	d9 c0       	rjmp	.+434    	; 0xec2 <__fp_szero>
     d10:	08 95       	ret

00000d12 <__fixunssfsi>:
     d12:	bc d0       	rcall	.+376    	; 0xe8c <__fp_splitA>
     d14:	88 f0       	brcs	.+34     	; 0xd38 <__fixunssfsi+0x26>
     d16:	9f 57       	subi	r25, 0x7F	; 127
     d18:	90 f0       	brcs	.+36     	; 0xd3e <__fixunssfsi+0x2c>
     d1a:	b9 2f       	mov	r27, r25
     d1c:	99 27       	eor	r25, r25
     d1e:	b7 51       	subi	r27, 0x17	; 23
     d20:	a0 f0       	brcs	.+40     	; 0xd4a <__fixunssfsi+0x38>
     d22:	d1 f0       	breq	.+52     	; 0xd58 <__fixunssfsi+0x46>
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	88 1f       	adc	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	1a f0       	brmi	.+6      	; 0xd34 <__fixunssfsi+0x22>
     d2e:	ba 95       	dec	r27
     d30:	c9 f7       	brne	.-14     	; 0xd24 <__fixunssfsi+0x12>
     d32:	12 c0       	rjmp	.+36     	; 0xd58 <__fixunssfsi+0x46>
     d34:	b1 30       	cpi	r27, 0x01	; 1
     d36:	81 f0       	breq	.+32     	; 0xd58 <__fixunssfsi+0x46>
     d38:	c3 d0       	rcall	.+390    	; 0xec0 <__fp_zero>
     d3a:	b1 e0       	ldi	r27, 0x01	; 1
     d3c:	08 95       	ret
     d3e:	c0 c0       	rjmp	.+384    	; 0xec0 <__fp_zero>
     d40:	67 2f       	mov	r22, r23
     d42:	78 2f       	mov	r23, r24
     d44:	88 27       	eor	r24, r24
     d46:	b8 5f       	subi	r27, 0xF8	; 248
     d48:	39 f0       	breq	.+14     	; 0xd58 <__fixunssfsi+0x46>
     d4a:	b9 3f       	cpi	r27, 0xF9	; 249
     d4c:	cc f3       	brlt	.-14     	; 0xd40 <__fixunssfsi+0x2e>
     d4e:	86 95       	lsr	r24
     d50:	77 95       	ror	r23
     d52:	67 95       	ror	r22
     d54:	b3 95       	inc	r27
     d56:	d9 f7       	brne	.-10     	; 0xd4e <__fixunssfsi+0x3c>
     d58:	3e f4       	brtc	.+14     	; 0xd68 <__fixunssfsi+0x56>
     d5a:	90 95       	com	r25
     d5c:	80 95       	com	r24
     d5e:	70 95       	com	r23
     d60:	61 95       	neg	r22
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	8f 4f       	sbci	r24, 0xFF	; 255
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	08 95       	ret

00000d6a <__floatunsisf>:
     d6a:	e8 94       	clt
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <__floatsisf+0x12>

00000d6e <__floatsisf>:
     d6e:	97 fb       	bst	r25, 7
     d70:	3e f4       	brtc	.+14     	; 0xd80 <__floatsisf+0x12>
     d72:	90 95       	com	r25
     d74:	80 95       	com	r24
     d76:	70 95       	com	r23
     d78:	61 95       	neg	r22
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	8f 4f       	sbci	r24, 0xFF	; 255
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	99 23       	and	r25, r25
     d82:	a9 f0       	breq	.+42     	; 0xdae <__floatsisf+0x40>
     d84:	f9 2f       	mov	r31, r25
     d86:	96 e9       	ldi	r25, 0x96	; 150
     d88:	bb 27       	eor	r27, r27
     d8a:	93 95       	inc	r25
     d8c:	f6 95       	lsr	r31
     d8e:	87 95       	ror	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f1 11       	cpse	r31, r1
     d98:	f8 cf       	rjmp	.-16     	; 0xd8a <__floatsisf+0x1c>
     d9a:	fa f4       	brpl	.+62     	; 0xdda <__floatsisf+0x6c>
     d9c:	bb 0f       	add	r27, r27
     d9e:	11 f4       	brne	.+4      	; 0xda4 <__floatsisf+0x36>
     da0:	60 ff       	sbrs	r22, 0
     da2:	1b c0       	rjmp	.+54     	; 0xdda <__floatsisf+0x6c>
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	8f 4f       	sbci	r24, 0xFF	; 255
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	16 c0       	rjmp	.+44     	; 0xdda <__floatsisf+0x6c>
     dae:	88 23       	and	r24, r24
     db0:	11 f0       	breq	.+4      	; 0xdb6 <__floatsisf+0x48>
     db2:	96 e9       	ldi	r25, 0x96	; 150
     db4:	11 c0       	rjmp	.+34     	; 0xdd8 <__floatsisf+0x6a>
     db6:	77 23       	and	r23, r23
     db8:	21 f0       	breq	.+8      	; 0xdc2 <__floatsisf+0x54>
     dba:	9e e8       	ldi	r25, 0x8E	; 142
     dbc:	87 2f       	mov	r24, r23
     dbe:	76 2f       	mov	r23, r22
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <__floatsisf+0x5e>
     dc2:	66 23       	and	r22, r22
     dc4:	71 f0       	breq	.+28     	; 0xde2 <__floatsisf+0x74>
     dc6:	96 e8       	ldi	r25, 0x86	; 134
     dc8:	86 2f       	mov	r24, r22
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	2a f0       	brmi	.+10     	; 0xdda <__floatsisf+0x6c>
     dd0:	9a 95       	dec	r25
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	da f7       	brpl	.-10     	; 0xdd0 <__floatsisf+0x62>
     dda:	88 0f       	add	r24, r24
     ddc:	96 95       	lsr	r25
     dde:	87 95       	ror	r24
     de0:	97 f9       	bld	r25, 7
     de2:	08 95       	ret

00000de4 <__fp_cmp>:
     de4:	99 0f       	add	r25, r25
     de6:	00 08       	sbc	r0, r0
     de8:	55 0f       	add	r21, r21
     dea:	aa 0b       	sbc	r26, r26
     dec:	e0 e8       	ldi	r30, 0x80	; 128
     dee:	fe ef       	ldi	r31, 0xFE	; 254
     df0:	16 16       	cp	r1, r22
     df2:	17 06       	cpc	r1, r23
     df4:	e8 07       	cpc	r30, r24
     df6:	f9 07       	cpc	r31, r25
     df8:	c0 f0       	brcs	.+48     	; 0xe2a <__fp_cmp+0x46>
     dfa:	12 16       	cp	r1, r18
     dfc:	13 06       	cpc	r1, r19
     dfe:	e4 07       	cpc	r30, r20
     e00:	f5 07       	cpc	r31, r21
     e02:	98 f0       	brcs	.+38     	; 0xe2a <__fp_cmp+0x46>
     e04:	62 1b       	sub	r22, r18
     e06:	73 0b       	sbc	r23, r19
     e08:	84 0b       	sbc	r24, r20
     e0a:	95 0b       	sbc	r25, r21
     e0c:	39 f4       	brne	.+14     	; 0xe1c <__fp_cmp+0x38>
     e0e:	0a 26       	eor	r0, r26
     e10:	61 f0       	breq	.+24     	; 0xe2a <__fp_cmp+0x46>
     e12:	23 2b       	or	r18, r19
     e14:	24 2b       	or	r18, r20
     e16:	25 2b       	or	r18, r21
     e18:	21 f4       	brne	.+8      	; 0xe22 <__fp_cmp+0x3e>
     e1a:	08 95       	ret
     e1c:	0a 26       	eor	r0, r26
     e1e:	09 f4       	brne	.+2      	; 0xe22 <__fp_cmp+0x3e>
     e20:	a1 40       	sbci	r26, 0x01	; 1
     e22:	a6 95       	lsr	r26
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	81 1d       	adc	r24, r1
     e28:	81 1d       	adc	r24, r1
     e2a:	08 95       	ret

00000e2c <__fp_inf>:
     e2c:	97 f9       	bld	r25, 7
     e2e:	9f 67       	ori	r25, 0x7F	; 127
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	08 95       	ret

00000e38 <__fp_nan>:
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	80 ec       	ldi	r24, 0xC0	; 192
     e3c:	08 95       	ret

00000e3e <__fp_pscA>:
     e3e:	00 24       	eor	r0, r0
     e40:	0a 94       	dec	r0
     e42:	16 16       	cp	r1, r22
     e44:	17 06       	cpc	r1, r23
     e46:	18 06       	cpc	r1, r24
     e48:	09 06       	cpc	r0, r25
     e4a:	08 95       	ret

00000e4c <__fp_pscB>:
     e4c:	00 24       	eor	r0, r0
     e4e:	0a 94       	dec	r0
     e50:	12 16       	cp	r1, r18
     e52:	13 06       	cpc	r1, r19
     e54:	14 06       	cpc	r1, r20
     e56:	05 06       	cpc	r0, r21
     e58:	08 95       	ret

00000e5a <__fp_round>:
     e5a:	09 2e       	mov	r0, r25
     e5c:	03 94       	inc	r0
     e5e:	00 0c       	add	r0, r0
     e60:	11 f4       	brne	.+4      	; 0xe66 <__fp_round+0xc>
     e62:	88 23       	and	r24, r24
     e64:	52 f0       	brmi	.+20     	; 0xe7a <__fp_round+0x20>
     e66:	bb 0f       	add	r27, r27
     e68:	40 f4       	brcc	.+16     	; 0xe7a <__fp_round+0x20>
     e6a:	bf 2b       	or	r27, r31
     e6c:	11 f4       	brne	.+4      	; 0xe72 <__fp_round+0x18>
     e6e:	60 ff       	sbrs	r22, 0
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <__fp_round+0x20>
     e72:	6f 5f       	subi	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	8f 4f       	sbci	r24, 0xFF	; 255
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	08 95       	ret

00000e7c <__fp_split3>:
     e7c:	57 fd       	sbrc	r21, 7
     e7e:	90 58       	subi	r25, 0x80	; 128
     e80:	44 0f       	add	r20, r20
     e82:	55 1f       	adc	r21, r21
     e84:	59 f0       	breq	.+22     	; 0xe9c <__fp_splitA+0x10>
     e86:	5f 3f       	cpi	r21, 0xFF	; 255
     e88:	71 f0       	breq	.+28     	; 0xea6 <__fp_splitA+0x1a>
     e8a:	47 95       	ror	r20

00000e8c <__fp_splitA>:
     e8c:	88 0f       	add	r24, r24
     e8e:	97 fb       	bst	r25, 7
     e90:	99 1f       	adc	r25, r25
     e92:	61 f0       	breq	.+24     	; 0xeac <__fp_splitA+0x20>
     e94:	9f 3f       	cpi	r25, 0xFF	; 255
     e96:	79 f0       	breq	.+30     	; 0xeb6 <__fp_splitA+0x2a>
     e98:	87 95       	ror	r24
     e9a:	08 95       	ret
     e9c:	12 16       	cp	r1, r18
     e9e:	13 06       	cpc	r1, r19
     ea0:	14 06       	cpc	r1, r20
     ea2:	55 1f       	adc	r21, r21
     ea4:	f2 cf       	rjmp	.-28     	; 0xe8a <__fp_split3+0xe>
     ea6:	46 95       	lsr	r20
     ea8:	f1 df       	rcall	.-30     	; 0xe8c <__fp_splitA>
     eaa:	08 c0       	rjmp	.+16     	; 0xebc <__fp_splitA+0x30>
     eac:	16 16       	cp	r1, r22
     eae:	17 06       	cpc	r1, r23
     eb0:	18 06       	cpc	r1, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	f1 cf       	rjmp	.-30     	; 0xe98 <__fp_splitA+0xc>
     eb6:	86 95       	lsr	r24
     eb8:	71 05       	cpc	r23, r1
     eba:	61 05       	cpc	r22, r1
     ebc:	08 94       	sec
     ebe:	08 95       	ret

00000ec0 <__fp_zero>:
     ec0:	e8 94       	clt

00000ec2 <__fp_szero>:
     ec2:	bb 27       	eor	r27, r27
     ec4:	66 27       	eor	r22, r22
     ec6:	77 27       	eor	r23, r23
     ec8:	cb 01       	movw	r24, r22
     eca:	97 f9       	bld	r25, 7
     ecc:	08 95       	ret

00000ece <__gesf2>:
     ece:	8a df       	rcall	.-236    	; 0xde4 <__fp_cmp>
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <__gesf2+0x6>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	08 95       	ret
     ed6:	0e f0       	brts	.+2      	; 0xeda <__gesf2+0xc>
     ed8:	a6 c0       	rjmp	.+332    	; 0x1026 <__fp_mpack>
     eda:	ae cf       	rjmp	.-164    	; 0xe38 <__fp_nan>
     edc:	68 94       	set
     ede:	a6 cf       	rjmp	.-180    	; 0xe2c <__fp_inf>

00000ee0 <log>:
     ee0:	d5 df       	rcall	.-86     	; 0xe8c <__fp_splitA>
     ee2:	c8 f3       	brcs	.-14     	; 0xed6 <__gesf2+0x8>
     ee4:	99 23       	and	r25, r25
     ee6:	d1 f3       	breq	.-12     	; 0xedc <__gesf2+0xe>
     ee8:	c6 f3       	brts	.-16     	; 0xeda <__gesf2+0xc>
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	1f 93       	push	r17
     ef0:	0f 93       	push	r16
     ef2:	ff 92       	push	r15
     ef4:	c9 2f       	mov	r28, r25
     ef6:	dd 27       	eor	r29, r29
     ef8:	88 23       	and	r24, r24
     efa:	2a f0       	brmi	.+10     	; 0xf06 <log+0x26>
     efc:	21 97       	sbiw	r28, 0x01	; 1
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	da f7       	brpl	.-10     	; 0xefc <log+0x1c>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f eb       	ldi	r21, 0xBF	; 191
     f0e:	9f e3       	ldi	r25, 0x3F	; 63
     f10:	88 39       	cpi	r24, 0x98	; 152
     f12:	20 f0       	brcs	.+8      	; 0xf1c <log+0x3c>
     f14:	80 3e       	cpi	r24, 0xE0	; 224
     f16:	30 f0       	brcs	.+12     	; 0xf24 <log+0x44>
     f18:	21 96       	adiw	r28, 0x01	; 1
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	25 de       	rcall	.-950    	; 0xb68 <__addsf3>
     f1e:	ec e8       	ldi	r30, 0x8C	; 140
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <log+0x4a>
     f24:	21 de       	rcall	.-958    	; 0xb68 <__addsf3>
     f26:	e9 eb       	ldi	r30, 0xB9	; 185
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b d0       	rcall	.+278    	; 0x1042 <__fp_powser>
     f2c:	8b 01       	movw	r16, r22
     f2e:	be 01       	movw	r22, r28
     f30:	ec 01       	movw	r28, r24
     f32:	fb 2e       	mov	r15, r27
     f34:	6f 57       	subi	r22, 0x7F	; 127
     f36:	71 09       	sbc	r23, r1
     f38:	75 95       	asr	r23
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 0b       	sbc	r24, r24
     f3e:	99 0b       	sbc	r25, r25
     f40:	16 df       	rcall	.-468    	; 0xd6e <__floatsisf>
     f42:	28 e1       	ldi	r18, 0x18	; 24
     f44:	32 e7       	ldi	r19, 0x72	; 114
     f46:	41 e3       	ldi	r20, 0x31	; 49
     f48:	5f e3       	ldi	r21, 0x3F	; 63
     f4a:	16 d0       	rcall	.+44     	; 0xf78 <__mulsf3x>
     f4c:	af 2d       	mov	r26, r15
     f4e:	98 01       	movw	r18, r16
     f50:	ae 01       	movw	r20, r28
     f52:	ff 90       	pop	r15
     f54:	0f 91       	pop	r16
     f56:	1f 91       	pop	r17
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	16 de       	rcall	.-980    	; 0xb8a <__addsf3x>
     f5e:	7d cf       	rjmp	.-262    	; 0xe5a <__fp_round>

00000f60 <__mulsf3>:
     f60:	0b d0       	rcall	.+22     	; 0xf78 <__mulsf3x>
     f62:	7b cf       	rjmp	.-266    	; 0xe5a <__fp_round>
     f64:	6c df       	rcall	.-296    	; 0xe3e <__fp_pscA>
     f66:	28 f0       	brcs	.+10     	; 0xf72 <__mulsf3+0x12>
     f68:	71 df       	rcall	.-286    	; 0xe4c <__fp_pscB>
     f6a:	18 f0       	brcs	.+6      	; 0xf72 <__mulsf3+0x12>
     f6c:	95 23       	and	r25, r21
     f6e:	09 f0       	breq	.+2      	; 0xf72 <__mulsf3+0x12>
     f70:	5d cf       	rjmp	.-326    	; 0xe2c <__fp_inf>
     f72:	62 cf       	rjmp	.-316    	; 0xe38 <__fp_nan>
     f74:	11 24       	eor	r1, r1
     f76:	a5 cf       	rjmp	.-182    	; 0xec2 <__fp_szero>

00000f78 <__mulsf3x>:
     f78:	81 df       	rcall	.-254    	; 0xe7c <__fp_split3>
     f7a:	a0 f3       	brcs	.-24     	; 0xf64 <__mulsf3+0x4>

00000f7c <__mulsf3_pse>:
     f7c:	95 9f       	mul	r25, r21
     f7e:	d1 f3       	breq	.-12     	; 0xf74 <__mulsf3+0x14>
     f80:	95 0f       	add	r25, r21
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	55 1f       	adc	r21, r21
     f86:	62 9f       	mul	r22, r18
     f88:	f0 01       	movw	r30, r0
     f8a:	72 9f       	mul	r23, r18
     f8c:	bb 27       	eor	r27, r27
     f8e:	f0 0d       	add	r31, r0
     f90:	b1 1d       	adc	r27, r1
     f92:	63 9f       	mul	r22, r19
     f94:	aa 27       	eor	r26, r26
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	aa 1f       	adc	r26, r26
     f9c:	64 9f       	mul	r22, r20
     f9e:	66 27       	eor	r22, r22
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	66 1f       	adc	r22, r22
     fa6:	82 9f       	mul	r24, r18
     fa8:	22 27       	eor	r18, r18
     faa:	b0 0d       	add	r27, r0
     fac:	a1 1d       	adc	r26, r1
     fae:	62 1f       	adc	r22, r18
     fb0:	73 9f       	mul	r23, r19
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	83 9f       	mul	r24, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	22 1f       	adc	r18, r18
     fc0:	74 9f       	mul	r23, r20
     fc2:	33 27       	eor	r19, r19
     fc4:	a0 0d       	add	r26, r0
     fc6:	61 1d       	adc	r22, r1
     fc8:	23 1f       	adc	r18, r19
     fca:	84 9f       	mul	r24, r20
     fcc:	60 0d       	add	r22, r0
     fce:	21 1d       	adc	r18, r1
     fd0:	82 2f       	mov	r24, r18
     fd2:	76 2f       	mov	r23, r22
     fd4:	6a 2f       	mov	r22, r26
     fd6:	11 24       	eor	r1, r1
     fd8:	9f 57       	subi	r25, 0x7F	; 127
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	8a f0       	brmi	.+34     	; 0x1000 <__mulsf3_pse+0x84>
     fde:	e1 f0       	breq	.+56     	; 0x1018 <__mulsf3_pse+0x9c>
     fe0:	88 23       	and	r24, r24
     fe2:	4a f0       	brmi	.+18     	; 0xff6 <__mulsf3_pse+0x7a>
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	bb 1f       	adc	r27, r27
     fea:	66 1f       	adc	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__mulsf3_pse+0x64>
     ff6:	9e 3f       	cpi	r25, 0xFE	; 254
     ff8:	51 05       	cpc	r21, r1
     ffa:	70 f0       	brcs	.+28     	; 0x1018 <__mulsf3_pse+0x9c>
     ffc:	17 cf       	rjmp	.-466    	; 0xe2c <__fp_inf>
     ffe:	61 cf       	rjmp	.-318    	; 0xec2 <__fp_szero>
    1000:	5f 3f       	cpi	r21, 0xFF	; 255
    1002:	ec f3       	brlt	.-6      	; 0xffe <__mulsf3_pse+0x82>
    1004:	98 3e       	cpi	r25, 0xE8	; 232
    1006:	dc f3       	brlt	.-10     	; 0xffe <__mulsf3_pse+0x82>
    1008:	86 95       	lsr	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	b7 95       	ror	r27
    1010:	f7 95       	ror	r31
    1012:	e7 95       	ror	r30
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	c1 f7       	brne	.-16     	; 0x1008 <__mulsf3_pse+0x8c>
    1018:	fe 2b       	or	r31, r30
    101a:	88 0f       	add	r24, r24
    101c:	91 1d       	adc	r25, r1
    101e:	96 95       	lsr	r25
    1020:	87 95       	ror	r24
    1022:	97 f9       	bld	r25, 7
    1024:	08 95       	ret

00001026 <__fp_mpack>:
    1026:	9f 3f       	cpi	r25, 0xFF	; 255
    1028:	31 f0       	breq	.+12     	; 0x1036 <__fp_mpack_finite+0xc>

0000102a <__fp_mpack_finite>:
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	20 f4       	brcc	.+8      	; 0x1036 <__fp_mpack_finite+0xc>
    102e:	87 95       	ror	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	88 0f       	add	r24, r24
    1038:	91 1d       	adc	r25, r1
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <__fp_powser>:
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	1f 93       	push	r17
    1048:	0f 93       	push	r16
    104a:	ff 92       	push	r15
    104c:	ef 92       	push	r14
    104e:	df 92       	push	r13
    1050:	7b 01       	movw	r14, r22
    1052:	8c 01       	movw	r16, r24
    1054:	68 94       	set
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <__fp_powser+0x20>
    1058:	da 2e       	mov	r13, r26
    105a:	ef 01       	movw	r28, r30
    105c:	8d df       	rcall	.-230    	; 0xf78 <__mulsf3x>
    105e:	fe 01       	movw	r30, r28
    1060:	e8 94       	clt
    1062:	a5 91       	lpm	r26, Z+
    1064:	25 91       	lpm	r18, Z+
    1066:	35 91       	lpm	r19, Z+
    1068:	45 91       	lpm	r20, Z+
    106a:	55 91       	lpm	r21, Z+
    106c:	ae f3       	brts	.-22     	; 0x1058 <__fp_powser+0x16>
    106e:	ef 01       	movw	r28, r30
    1070:	8c dd       	rcall	.-1256   	; 0xb8a <__addsf3x>
    1072:	fe 01       	movw	r30, r28
    1074:	97 01       	movw	r18, r14
    1076:	a8 01       	movw	r20, r16
    1078:	da 94       	dec	r13
    107a:	79 f7       	brne	.-34     	; 0x105a <__fp_powser+0x18>
    107c:	df 90       	pop	r13
    107e:	ef 90       	pop	r14
    1080:	ff 90       	pop	r15
    1082:	0f 91       	pop	r16
    1084:	1f 91       	pop	r17
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <sprintf>:
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	2e 97       	sbiw	r28, 0x0e	; 14
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	0d 89       	ldd	r16, Y+21	; 0x15
    10a6:	1e 89       	ldd	r17, Y+22	; 0x16
    10a8:	86 e0       	ldi	r24, 0x06	; 6
    10aa:	8c 83       	std	Y+4, r24	; 0x04
    10ac:	1a 83       	std	Y+2, r17	; 0x02
    10ae:	09 83       	std	Y+1, r16	; 0x01
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f e7       	ldi	r25, 0x7F	; 127
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	ae 01       	movw	r20, r28
    10ba:	47 5e       	subi	r20, 0xE7	; 231
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	6f 89       	ldd	r22, Y+23	; 0x17
    10c0:	78 8d       	ldd	r23, Y+24	; 0x18
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	10 d0       	rcall	.+32     	; 0x10e8 <vfprintf>
    10c8:	ef 81       	ldd	r30, Y+7	; 0x07
    10ca:	f8 85       	ldd	r31, Y+8	; 0x08
    10cc:	e0 0f       	add	r30, r16
    10ce:	f1 1f       	adc	r31, r17
    10d0:	10 82       	st	Z, r1
    10d2:	2e 96       	adiw	r28, 0x0e	; 14
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <vfprintf>:
    10e8:	2f 92       	push	r2
    10ea:	3f 92       	push	r3
    10ec:	4f 92       	push	r4
    10ee:	5f 92       	push	r5
    10f0:	6f 92       	push	r6
    10f2:	7f 92       	push	r7
    10f4:	8f 92       	push	r8
    10f6:	9f 92       	push	r9
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	2b 97       	sbiw	r28, 0x0b	; 11
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	6c 01       	movw	r12, r24
    111e:	7b 01       	movw	r14, r22
    1120:	8a 01       	movw	r16, r20
    1122:	fc 01       	movw	r30, r24
    1124:	17 82       	std	Z+7, r1	; 0x07
    1126:	16 82       	std	Z+6, r1	; 0x06
    1128:	83 81       	ldd	r24, Z+3	; 0x03
    112a:	81 ff       	sbrs	r24, 1
    112c:	bf c1       	rjmp	.+894    	; 0x14ac <__stack+0x3ad>
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	3c 01       	movw	r6, r24
    1134:	f6 01       	movw	r30, r12
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	f7 01       	movw	r30, r14
    113a:	93 fd       	sbrc	r25, 3
    113c:	85 91       	lpm	r24, Z+
    113e:	93 ff       	sbrs	r25, 3
    1140:	81 91       	ld	r24, Z+
    1142:	7f 01       	movw	r14, r30
    1144:	88 23       	and	r24, r24
    1146:	09 f4       	brne	.+2      	; 0x114a <__stack+0x4b>
    1148:	ad c1       	rjmp	.+858    	; 0x14a4 <__stack+0x3a5>
    114a:	85 32       	cpi	r24, 0x25	; 37
    114c:	39 f4       	brne	.+14     	; 0x115c <__stack+0x5d>
    114e:	93 fd       	sbrc	r25, 3
    1150:	85 91       	lpm	r24, Z+
    1152:	93 ff       	sbrs	r25, 3
    1154:	81 91       	ld	r24, Z+
    1156:	7f 01       	movw	r14, r30
    1158:	85 32       	cpi	r24, 0x25	; 37
    115a:	21 f4       	brne	.+8      	; 0x1164 <__stack+0x65>
    115c:	b6 01       	movw	r22, r12
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	d6 d1       	rcall	.+940    	; 0x150e <fputc>
    1162:	e8 cf       	rjmp	.-48     	; 0x1134 <__stack+0x35>
    1164:	91 2c       	mov	r9, r1
    1166:	21 2c       	mov	r2, r1
    1168:	31 2c       	mov	r3, r1
    116a:	ff e1       	ldi	r31, 0x1F	; 31
    116c:	f3 15       	cp	r31, r3
    116e:	d8 f0       	brcs	.+54     	; 0x11a6 <__stack+0xa7>
    1170:	8b 32       	cpi	r24, 0x2B	; 43
    1172:	79 f0       	breq	.+30     	; 0x1192 <__stack+0x93>
    1174:	38 f4       	brcc	.+14     	; 0x1184 <__stack+0x85>
    1176:	80 32       	cpi	r24, 0x20	; 32
    1178:	79 f0       	breq	.+30     	; 0x1198 <__stack+0x99>
    117a:	83 32       	cpi	r24, 0x23	; 35
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <__stack+0xa7>
    117e:	23 2d       	mov	r18, r3
    1180:	20 61       	ori	r18, 0x10	; 16
    1182:	1d c0       	rjmp	.+58     	; 0x11be <__stack+0xbf>
    1184:	8d 32       	cpi	r24, 0x2D	; 45
    1186:	61 f0       	breq	.+24     	; 0x11a0 <__stack+0xa1>
    1188:	80 33       	cpi	r24, 0x30	; 48
    118a:	69 f4       	brne	.+26     	; 0x11a6 <__stack+0xa7>
    118c:	23 2d       	mov	r18, r3
    118e:	21 60       	ori	r18, 0x01	; 1
    1190:	16 c0       	rjmp	.+44     	; 0x11be <__stack+0xbf>
    1192:	83 2d       	mov	r24, r3
    1194:	82 60       	ori	r24, 0x02	; 2
    1196:	38 2e       	mov	r3, r24
    1198:	e3 2d       	mov	r30, r3
    119a:	e4 60       	ori	r30, 0x04	; 4
    119c:	3e 2e       	mov	r3, r30
    119e:	2a c0       	rjmp	.+84     	; 0x11f4 <__stack+0xf5>
    11a0:	f3 2d       	mov	r31, r3
    11a2:	f8 60       	ori	r31, 0x08	; 8
    11a4:	1d c0       	rjmp	.+58     	; 0x11e0 <__stack+0xe1>
    11a6:	37 fc       	sbrc	r3, 7
    11a8:	2d c0       	rjmp	.+90     	; 0x1204 <__stack+0x105>
    11aa:	20 ed       	ldi	r18, 0xD0	; 208
    11ac:	28 0f       	add	r18, r24
    11ae:	2a 30       	cpi	r18, 0x0A	; 10
    11b0:	40 f0       	brcs	.+16     	; 0x11c2 <__stack+0xc3>
    11b2:	8e 32       	cpi	r24, 0x2E	; 46
    11b4:	b9 f4       	brne	.+46     	; 0x11e4 <__stack+0xe5>
    11b6:	36 fc       	sbrc	r3, 6
    11b8:	75 c1       	rjmp	.+746    	; 0x14a4 <__stack+0x3a5>
    11ba:	23 2d       	mov	r18, r3
    11bc:	20 64       	ori	r18, 0x40	; 64
    11be:	32 2e       	mov	r3, r18
    11c0:	19 c0       	rjmp	.+50     	; 0x11f4 <__stack+0xf5>
    11c2:	36 fe       	sbrs	r3, 6
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <__stack+0xd3>
    11c6:	8a e0       	ldi	r24, 0x0A	; 10
    11c8:	98 9e       	mul	r9, r24
    11ca:	20 0d       	add	r18, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	92 2e       	mov	r9, r18
    11d0:	11 c0       	rjmp	.+34     	; 0x11f4 <__stack+0xf5>
    11d2:	ea e0       	ldi	r30, 0x0A	; 10
    11d4:	2e 9e       	mul	r2, r30
    11d6:	20 0d       	add	r18, r0
    11d8:	11 24       	eor	r1, r1
    11da:	22 2e       	mov	r2, r18
    11dc:	f3 2d       	mov	r31, r3
    11de:	f0 62       	ori	r31, 0x20	; 32
    11e0:	3f 2e       	mov	r3, r31
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <__stack+0xf5>
    11e4:	8c 36       	cpi	r24, 0x6C	; 108
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <__stack+0xf1>
    11e8:	83 2d       	mov	r24, r3
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	38 2e       	mov	r3, r24
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <__stack+0xf5>
    11f0:	88 36       	cpi	r24, 0x68	; 104
    11f2:	41 f4       	brne	.+16     	; 0x1204 <__stack+0x105>
    11f4:	f7 01       	movw	r30, r14
    11f6:	93 fd       	sbrc	r25, 3
    11f8:	85 91       	lpm	r24, Z+
    11fa:	93 ff       	sbrs	r25, 3
    11fc:	81 91       	ld	r24, Z+
    11fe:	7f 01       	movw	r14, r30
    1200:	81 11       	cpse	r24, r1
    1202:	b3 cf       	rjmp	.-154    	; 0x116a <__stack+0x6b>
    1204:	98 2f       	mov	r25, r24
    1206:	9f 7d       	andi	r25, 0xDF	; 223
    1208:	95 54       	subi	r25, 0x45	; 69
    120a:	93 30       	cpi	r25, 0x03	; 3
    120c:	28 f4       	brcc	.+10     	; 0x1218 <__stack+0x119>
    120e:	0c 5f       	subi	r16, 0xFC	; 252
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	9f e3       	ldi	r25, 0x3F	; 63
    1214:	99 83       	std	Y+1, r25	; 0x01
    1216:	0d c0       	rjmp	.+26     	; 0x1232 <__stack+0x133>
    1218:	83 36       	cpi	r24, 0x63	; 99
    121a:	31 f0       	breq	.+12     	; 0x1228 <__stack+0x129>
    121c:	83 37       	cpi	r24, 0x73	; 115
    121e:	71 f0       	breq	.+28     	; 0x123c <__stack+0x13d>
    1220:	83 35       	cpi	r24, 0x53	; 83
    1222:	09 f0       	breq	.+2      	; 0x1226 <__stack+0x127>
    1224:	55 c0       	rjmp	.+170    	; 0x12d0 <__stack+0x1d1>
    1226:	20 c0       	rjmp	.+64     	; 0x1268 <__stack+0x169>
    1228:	f8 01       	movw	r30, r16
    122a:	80 81       	ld	r24, Z
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	0e 5f       	subi	r16, 0xFE	; 254
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	88 24       	eor	r8, r8
    1234:	83 94       	inc	r8
    1236:	91 2c       	mov	r9, r1
    1238:	53 01       	movw	r10, r6
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <__stack+0x161>
    123c:	28 01       	movw	r4, r16
    123e:	f2 e0       	ldi	r31, 0x02	; 2
    1240:	4f 0e       	add	r4, r31
    1242:	51 1c       	adc	r5, r1
    1244:	f8 01       	movw	r30, r16
    1246:	a0 80       	ld	r10, Z
    1248:	b1 80       	ldd	r11, Z+1	; 0x01
    124a:	36 fe       	sbrs	r3, 6
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <__stack+0x155>
    124e:	69 2d       	mov	r22, r9
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <__stack+0x159>
    1254:	6f ef       	ldi	r22, 0xFF	; 255
    1256:	7f ef       	ldi	r23, 0xFF	; 255
    1258:	c5 01       	movw	r24, r10
    125a:	4e d1       	rcall	.+668    	; 0x14f8 <strnlen>
    125c:	4c 01       	movw	r8, r24
    125e:	82 01       	movw	r16, r4
    1260:	f3 2d       	mov	r31, r3
    1262:	ff 77       	andi	r31, 0x7F	; 127
    1264:	3f 2e       	mov	r3, r31
    1266:	15 c0       	rjmp	.+42     	; 0x1292 <__stack+0x193>
    1268:	28 01       	movw	r4, r16
    126a:	22 e0       	ldi	r18, 0x02	; 2
    126c:	42 0e       	add	r4, r18
    126e:	51 1c       	adc	r5, r1
    1270:	f8 01       	movw	r30, r16
    1272:	a0 80       	ld	r10, Z
    1274:	b1 80       	ldd	r11, Z+1	; 0x01
    1276:	36 fe       	sbrs	r3, 6
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <__stack+0x181>
    127a:	69 2d       	mov	r22, r9
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <__stack+0x185>
    1280:	6f ef       	ldi	r22, 0xFF	; 255
    1282:	7f ef       	ldi	r23, 0xFF	; 255
    1284:	c5 01       	movw	r24, r10
    1286:	2d d1       	rcall	.+602    	; 0x14e2 <strnlen_P>
    1288:	4c 01       	movw	r8, r24
    128a:	f3 2d       	mov	r31, r3
    128c:	f0 68       	ori	r31, 0x80	; 128
    128e:	3f 2e       	mov	r3, r31
    1290:	82 01       	movw	r16, r4
    1292:	33 fc       	sbrc	r3, 3
    1294:	19 c0       	rjmp	.+50     	; 0x12c8 <__stack+0x1c9>
    1296:	82 2d       	mov	r24, r2
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	88 16       	cp	r8, r24
    129c:	99 06       	cpc	r9, r25
    129e:	a0 f4       	brcc	.+40     	; 0x12c8 <__stack+0x1c9>
    12a0:	b6 01       	movw	r22, r12
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	33 d1       	rcall	.+614    	; 0x150e <fputc>
    12a8:	2a 94       	dec	r2
    12aa:	f5 cf       	rjmp	.-22     	; 0x1296 <__stack+0x197>
    12ac:	f5 01       	movw	r30, r10
    12ae:	37 fc       	sbrc	r3, 7
    12b0:	85 91       	lpm	r24, Z+
    12b2:	37 fe       	sbrs	r3, 7
    12b4:	81 91       	ld	r24, Z+
    12b6:	5f 01       	movw	r10, r30
    12b8:	b6 01       	movw	r22, r12
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	28 d1       	rcall	.+592    	; 0x150e <fputc>
    12be:	21 10       	cpse	r2, r1
    12c0:	2a 94       	dec	r2
    12c2:	21 e0       	ldi	r18, 0x01	; 1
    12c4:	82 1a       	sub	r8, r18
    12c6:	91 08       	sbc	r9, r1
    12c8:	81 14       	cp	r8, r1
    12ca:	91 04       	cpc	r9, r1
    12cc:	79 f7       	brne	.-34     	; 0x12ac <__stack+0x1ad>
    12ce:	e1 c0       	rjmp	.+450    	; 0x1492 <__stack+0x393>
    12d0:	84 36       	cpi	r24, 0x64	; 100
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <__stack+0x1d9>
    12d4:	89 36       	cpi	r24, 0x69	; 105
    12d6:	39 f5       	brne	.+78     	; 0x1326 <__stack+0x227>
    12d8:	f8 01       	movw	r30, r16
    12da:	37 fe       	sbrs	r3, 7
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <__stack+0x1ed>
    12de:	60 81       	ld	r22, Z
    12e0:	71 81       	ldd	r23, Z+1	; 0x01
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	0c 5f       	subi	r16, 0xFC	; 252
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <__stack+0x1fd>
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	07 2e       	mov	r0, r23
    12f2:	00 0c       	add	r0, r0
    12f4:	88 0b       	sbc	r24, r24
    12f6:	99 0b       	sbc	r25, r25
    12f8:	0e 5f       	subi	r16, 0xFE	; 254
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	f3 2d       	mov	r31, r3
    12fe:	ff 76       	andi	r31, 0x6F	; 111
    1300:	3f 2e       	mov	r3, r31
    1302:	97 ff       	sbrs	r25, 7
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <__stack+0x219>
    1306:	90 95       	com	r25
    1308:	80 95       	com	r24
    130a:	70 95       	com	r23
    130c:	61 95       	neg	r22
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	8f 4f       	sbci	r24, 0xFF	; 255
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	f0 68       	ori	r31, 0x80	; 128
    1316:	3f 2e       	mov	r3, r31
    1318:	2a e0       	ldi	r18, 0x0A	; 10
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	a3 01       	movw	r20, r6
    131e:	33 d1       	rcall	.+614    	; 0x1586 <__ultoa_invert>
    1320:	88 2e       	mov	r8, r24
    1322:	86 18       	sub	r8, r6
    1324:	44 c0       	rjmp	.+136    	; 0x13ae <__stack+0x2af>
    1326:	85 37       	cpi	r24, 0x75	; 117
    1328:	31 f4       	brne	.+12     	; 0x1336 <__stack+0x237>
    132a:	23 2d       	mov	r18, r3
    132c:	2f 7e       	andi	r18, 0xEF	; 239
    132e:	b2 2e       	mov	r11, r18
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	25 c0       	rjmp	.+74     	; 0x1380 <__stack+0x281>
    1336:	93 2d       	mov	r25, r3
    1338:	99 7f       	andi	r25, 0xF9	; 249
    133a:	b9 2e       	mov	r11, r25
    133c:	8f 36       	cpi	r24, 0x6F	; 111
    133e:	c1 f0       	breq	.+48     	; 0x1370 <__stack+0x271>
    1340:	18 f4       	brcc	.+6      	; 0x1348 <__stack+0x249>
    1342:	88 35       	cpi	r24, 0x58	; 88
    1344:	79 f0       	breq	.+30     	; 0x1364 <__stack+0x265>
    1346:	ae c0       	rjmp	.+348    	; 0x14a4 <__stack+0x3a5>
    1348:	80 37       	cpi	r24, 0x70	; 112
    134a:	19 f0       	breq	.+6      	; 0x1352 <__stack+0x253>
    134c:	88 37       	cpi	r24, 0x78	; 120
    134e:	21 f0       	breq	.+8      	; 0x1358 <__stack+0x259>
    1350:	a9 c0       	rjmp	.+338    	; 0x14a4 <__stack+0x3a5>
    1352:	e9 2f       	mov	r30, r25
    1354:	e0 61       	ori	r30, 0x10	; 16
    1356:	be 2e       	mov	r11, r30
    1358:	b4 fe       	sbrs	r11, 4
    135a:	0d c0       	rjmp	.+26     	; 0x1376 <__stack+0x277>
    135c:	fb 2d       	mov	r31, r11
    135e:	f4 60       	ori	r31, 0x04	; 4
    1360:	bf 2e       	mov	r11, r31
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <__stack+0x277>
    1364:	34 fe       	sbrs	r3, 4
    1366:	0a c0       	rjmp	.+20     	; 0x137c <__stack+0x27d>
    1368:	29 2f       	mov	r18, r25
    136a:	26 60       	ori	r18, 0x06	; 6
    136c:	b2 2e       	mov	r11, r18
    136e:	06 c0       	rjmp	.+12     	; 0x137c <__stack+0x27d>
    1370:	28 e0       	ldi	r18, 0x08	; 8
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <__stack+0x281>
    1376:	20 e1       	ldi	r18, 0x10	; 16
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <__stack+0x281>
    137c:	20 e1       	ldi	r18, 0x10	; 16
    137e:	32 e0       	ldi	r19, 0x02	; 2
    1380:	f8 01       	movw	r30, r16
    1382:	b7 fe       	sbrs	r11, 7
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <__stack+0x295>
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	0c 5f       	subi	r16, 0xFC	; 252
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <__stack+0x2a1>
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 5f       	subi	r16, 0xFE	; 254
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	a3 01       	movw	r20, r6
    13a2:	f1 d0       	rcall	.+482    	; 0x1586 <__ultoa_invert>
    13a4:	88 2e       	mov	r8, r24
    13a6:	86 18       	sub	r8, r6
    13a8:	fb 2d       	mov	r31, r11
    13aa:	ff 77       	andi	r31, 0x7F	; 127
    13ac:	3f 2e       	mov	r3, r31
    13ae:	36 fe       	sbrs	r3, 6
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <__stack+0x2cd>
    13b2:	23 2d       	mov	r18, r3
    13b4:	2e 7f       	andi	r18, 0xFE	; 254
    13b6:	a2 2e       	mov	r10, r18
    13b8:	89 14       	cp	r8, r9
    13ba:	58 f4       	brcc	.+22     	; 0x13d2 <__stack+0x2d3>
    13bc:	34 fe       	sbrs	r3, 4
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <__stack+0x2d7>
    13c0:	32 fc       	sbrc	r3, 2
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <__stack+0x2d7>
    13c4:	83 2d       	mov	r24, r3
    13c6:	8e 7e       	andi	r24, 0xEE	; 238
    13c8:	a8 2e       	mov	r10, r24
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <__stack+0x2d7>
    13cc:	b8 2c       	mov	r11, r8
    13ce:	a3 2c       	mov	r10, r3
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <__stack+0x2d9>
    13d2:	b8 2c       	mov	r11, r8
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <__stack+0x2d9>
    13d6:	b9 2c       	mov	r11, r9
    13d8:	a4 fe       	sbrs	r10, 4
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <__stack+0x2fb>
    13dc:	fe 01       	movw	r30, r28
    13de:	e8 0d       	add	r30, r8
    13e0:	f1 1d       	adc	r31, r1
    13e2:	80 81       	ld	r24, Z
    13e4:	80 33       	cpi	r24, 0x30	; 48
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <__stack+0x2f1>
    13e8:	9a 2d       	mov	r25, r10
    13ea:	99 7e       	andi	r25, 0xE9	; 233
    13ec:	a9 2e       	mov	r10, r25
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <__stack+0x303>
    13f0:	a2 fe       	sbrs	r10, 2
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <__stack+0x301>
    13f4:	b3 94       	inc	r11
    13f6:	b3 94       	inc	r11
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <__stack+0x303>
    13fa:	8a 2d       	mov	r24, r10
    13fc:	86 78       	andi	r24, 0x86	; 134
    13fe:	09 f0       	breq	.+2      	; 0x1402 <__stack+0x303>
    1400:	b3 94       	inc	r11
    1402:	a3 fc       	sbrc	r10, 3
    1404:	10 c0       	rjmp	.+32     	; 0x1426 <__stack+0x327>
    1406:	a0 fe       	sbrs	r10, 0
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <__stack+0x317>
    140a:	b2 14       	cp	r11, r2
    140c:	80 f4       	brcc	.+32     	; 0x142e <__stack+0x32f>
    140e:	28 0c       	add	r2, r8
    1410:	92 2c       	mov	r9, r2
    1412:	9b 18       	sub	r9, r11
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <__stack+0x331>
    1416:	b2 14       	cp	r11, r2
    1418:	58 f4       	brcc	.+22     	; 0x1430 <__stack+0x331>
    141a:	b6 01       	movw	r22, r12
    141c:	80 e2       	ldi	r24, 0x20	; 32
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	76 d0       	rcall	.+236    	; 0x150e <fputc>
    1422:	b3 94       	inc	r11
    1424:	f8 cf       	rjmp	.-16     	; 0x1416 <__stack+0x317>
    1426:	b2 14       	cp	r11, r2
    1428:	18 f4       	brcc	.+6      	; 0x1430 <__stack+0x331>
    142a:	2b 18       	sub	r2, r11
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <__stack+0x333>
    142e:	98 2c       	mov	r9, r8
    1430:	21 2c       	mov	r2, r1
    1432:	a4 fe       	sbrs	r10, 4
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <__stack+0x355>
    1436:	b6 01       	movw	r22, r12
    1438:	80 e3       	ldi	r24, 0x30	; 48
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	68 d0       	rcall	.+208    	; 0x150e <fputc>
    143e:	a2 fe       	sbrs	r10, 2
    1440:	16 c0       	rjmp	.+44     	; 0x146e <__stack+0x36f>
    1442:	a1 fc       	sbrc	r10, 1
    1444:	03 c0       	rjmp	.+6      	; 0x144c <__stack+0x34d>
    1446:	88 e7       	ldi	r24, 0x78	; 120
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <__stack+0x351>
    144c:	88 e5       	ldi	r24, 0x58	; 88
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	b6 01       	movw	r22, r12
    1452:	0c c0       	rjmp	.+24     	; 0x146c <__stack+0x36d>
    1454:	8a 2d       	mov	r24, r10
    1456:	86 78       	andi	r24, 0x86	; 134
    1458:	51 f0       	breq	.+20     	; 0x146e <__stack+0x36f>
    145a:	a1 fe       	sbrs	r10, 1
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <__stack+0x363>
    145e:	8b e2       	ldi	r24, 0x2B	; 43
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <__stack+0x365>
    1462:	80 e2       	ldi	r24, 0x20	; 32
    1464:	a7 fc       	sbrc	r10, 7
    1466:	8d e2       	ldi	r24, 0x2D	; 45
    1468:	b6 01       	movw	r22, r12
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	50 d0       	rcall	.+160    	; 0x150e <fputc>
    146e:	89 14       	cp	r8, r9
    1470:	30 f4       	brcc	.+12     	; 0x147e <__stack+0x37f>
    1472:	b6 01       	movw	r22, r12
    1474:	80 e3       	ldi	r24, 0x30	; 48
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	4a d0       	rcall	.+148    	; 0x150e <fputc>
    147a:	9a 94       	dec	r9
    147c:	f8 cf       	rjmp	.-16     	; 0x146e <__stack+0x36f>
    147e:	8a 94       	dec	r8
    1480:	f3 01       	movw	r30, r6
    1482:	e8 0d       	add	r30, r8
    1484:	f1 1d       	adc	r31, r1
    1486:	80 81       	ld	r24, Z
    1488:	b6 01       	movw	r22, r12
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	40 d0       	rcall	.+128    	; 0x150e <fputc>
    148e:	81 10       	cpse	r8, r1
    1490:	f6 cf       	rjmp	.-20     	; 0x147e <__stack+0x37f>
    1492:	22 20       	and	r2, r2
    1494:	09 f4       	brne	.+2      	; 0x1498 <__stack+0x399>
    1496:	4e ce       	rjmp	.-868    	; 0x1134 <__stack+0x35>
    1498:	b6 01       	movw	r22, r12
    149a:	80 e2       	ldi	r24, 0x20	; 32
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	37 d0       	rcall	.+110    	; 0x150e <fputc>
    14a0:	2a 94       	dec	r2
    14a2:	f7 cf       	rjmp	.-18     	; 0x1492 <__stack+0x393>
    14a4:	f6 01       	movw	r30, r12
    14a6:	86 81       	ldd	r24, Z+6	; 0x06
    14a8:	97 81       	ldd	r25, Z+7	; 0x07
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <__stack+0x3b1>
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	2b 96       	adiw	r28, 0x0b	; 11
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	7f 90       	pop	r7
    14d6:	6f 90       	pop	r6
    14d8:	5f 90       	pop	r5
    14da:	4f 90       	pop	r4
    14dc:	3f 90       	pop	r3
    14de:	2f 90       	pop	r2
    14e0:	08 95       	ret

000014e2 <strnlen_P>:
    14e2:	fc 01       	movw	r30, r24
    14e4:	05 90       	lpm	r0, Z+
    14e6:	61 50       	subi	r22, 0x01	; 1
    14e8:	70 40       	sbci	r23, 0x00	; 0
    14ea:	01 10       	cpse	r0, r1
    14ec:	d8 f7       	brcc	.-10     	; 0x14e4 <strnlen_P+0x2>
    14ee:	80 95       	com	r24
    14f0:	90 95       	com	r25
    14f2:	8e 0f       	add	r24, r30
    14f4:	9f 1f       	adc	r25, r31
    14f6:	08 95       	ret

000014f8 <strnlen>:
    14f8:	fc 01       	movw	r30, r24
    14fa:	61 50       	subi	r22, 0x01	; 1
    14fc:	70 40       	sbci	r23, 0x00	; 0
    14fe:	01 90       	ld	r0, Z+
    1500:	01 10       	cpse	r0, r1
    1502:	d8 f7       	brcc	.-10     	; 0x14fa <strnlen+0x2>
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	8e 0f       	add	r24, r30
    150a:	9f 1f       	adc	r25, r31
    150c:	08 95       	ret

0000150e <fputc>:
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	fb 01       	movw	r30, r22
    1518:	23 81       	ldd	r18, Z+3	; 0x03
    151a:	21 fd       	sbrc	r18, 1
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <fputc+0x16>
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	2c c0       	rjmp	.+88     	; 0x157c <fputc+0x6e>
    1524:	22 ff       	sbrs	r18, 2
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <fputc+0x46>
    1528:	46 81       	ldd	r20, Z+6	; 0x06
    152a:	57 81       	ldd	r21, Z+7	; 0x07
    152c:	24 81       	ldd	r18, Z+4	; 0x04
    152e:	35 81       	ldd	r19, Z+5	; 0x05
    1530:	42 17       	cp	r20, r18
    1532:	53 07       	cpc	r21, r19
    1534:	44 f4       	brge	.+16     	; 0x1546 <fputc+0x38>
    1536:	a0 81       	ld	r26, Z
    1538:	b1 81       	ldd	r27, Z+1	; 0x01
    153a:	9d 01       	movw	r18, r26
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	31 83       	std	Z+1, r19	; 0x01
    1542:	20 83       	st	Z, r18
    1544:	8c 93       	st	X, r24
    1546:	26 81       	ldd	r18, Z+6	; 0x06
    1548:	37 81       	ldd	r19, Z+7	; 0x07
    154a:	2f 5f       	subi	r18, 0xFF	; 255
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	37 83       	std	Z+7, r19	; 0x07
    1550:	26 83       	std	Z+6, r18	; 0x06
    1552:	14 c0       	rjmp	.+40     	; 0x157c <fputc+0x6e>
    1554:	8b 01       	movw	r16, r22
    1556:	ec 01       	movw	r28, r24
    1558:	fb 01       	movw	r30, r22
    155a:	00 84       	ldd	r0, Z+8	; 0x08
    155c:	f1 85       	ldd	r31, Z+9	; 0x09
    155e:	e0 2d       	mov	r30, r0
    1560:	09 95       	icall
    1562:	89 2b       	or	r24, r25
    1564:	e1 f6       	brne	.-72     	; 0x151e <fputc+0x10>
    1566:	d8 01       	movw	r26, r16
    1568:	16 96       	adiw	r26, 0x06	; 6
    156a:	8d 91       	ld	r24, X+
    156c:	9c 91       	ld	r25, X
    156e:	17 97       	sbiw	r26, 0x07	; 7
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	17 96       	adiw	r26, 0x07	; 7
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
    1578:	16 97       	sbiw	r26, 0x06	; 6
    157a:	ce 01       	movw	r24, r28
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <__ultoa_invert>:
    1586:	fa 01       	movw	r30, r20
    1588:	aa 27       	eor	r26, r26
    158a:	28 30       	cpi	r18, 0x08	; 8
    158c:	51 f1       	breq	.+84     	; 0x15e2 <__ultoa_invert+0x5c>
    158e:	20 31       	cpi	r18, 0x10	; 16
    1590:	81 f1       	breq	.+96     	; 0x15f2 <__ultoa_invert+0x6c>
    1592:	e8 94       	clt
    1594:	6f 93       	push	r22
    1596:	6e 7f       	andi	r22, 0xFE	; 254
    1598:	6e 5f       	subi	r22, 0xFE	; 254
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	af 4f       	sbci	r26, 0xFF	; 255
    15a2:	b1 e0       	ldi	r27, 0x01	; 1
    15a4:	3e d0       	rcall	.+124    	; 0x1622 <__ultoa_invert+0x9c>
    15a6:	b4 e0       	ldi	r27, 0x04	; 4
    15a8:	3c d0       	rcall	.+120    	; 0x1622 <__ultoa_invert+0x9c>
    15aa:	67 0f       	add	r22, r23
    15ac:	78 1f       	adc	r23, r24
    15ae:	89 1f       	adc	r24, r25
    15b0:	9a 1f       	adc	r25, r26
    15b2:	a1 1d       	adc	r26, r1
    15b4:	68 0f       	add	r22, r24
    15b6:	79 1f       	adc	r23, r25
    15b8:	8a 1f       	adc	r24, r26
    15ba:	91 1d       	adc	r25, r1
    15bc:	a1 1d       	adc	r26, r1
    15be:	6a 0f       	add	r22, r26
    15c0:	71 1d       	adc	r23, r1
    15c2:	81 1d       	adc	r24, r1
    15c4:	91 1d       	adc	r25, r1
    15c6:	a1 1d       	adc	r26, r1
    15c8:	20 d0       	rcall	.+64     	; 0x160a <__ultoa_invert+0x84>
    15ca:	09 f4       	brne	.+2      	; 0x15ce <__ultoa_invert+0x48>
    15cc:	68 94       	set
    15ce:	3f 91       	pop	r19
    15d0:	2a e0       	ldi	r18, 0x0A	; 10
    15d2:	26 9f       	mul	r18, r22
    15d4:	11 24       	eor	r1, r1
    15d6:	30 19       	sub	r19, r0
    15d8:	30 5d       	subi	r19, 0xD0	; 208
    15da:	31 93       	st	Z+, r19
    15dc:	de f6       	brtc	.-74     	; 0x1594 <__ultoa_invert+0xe>
    15de:	cf 01       	movw	r24, r30
    15e0:	08 95       	ret
    15e2:	46 2f       	mov	r20, r22
    15e4:	47 70       	andi	r20, 0x07	; 7
    15e6:	40 5d       	subi	r20, 0xD0	; 208
    15e8:	41 93       	st	Z+, r20
    15ea:	b3 e0       	ldi	r27, 0x03	; 3
    15ec:	0f d0       	rcall	.+30     	; 0x160c <__ultoa_invert+0x86>
    15ee:	c9 f7       	brne	.-14     	; 0x15e2 <__ultoa_invert+0x5c>
    15f0:	f6 cf       	rjmp	.-20     	; 0x15de <__ultoa_invert+0x58>
    15f2:	46 2f       	mov	r20, r22
    15f4:	4f 70       	andi	r20, 0x0F	; 15
    15f6:	40 5d       	subi	r20, 0xD0	; 208
    15f8:	4a 33       	cpi	r20, 0x3A	; 58
    15fa:	18 f0       	brcs	.+6      	; 0x1602 <__ultoa_invert+0x7c>
    15fc:	49 5d       	subi	r20, 0xD9	; 217
    15fe:	31 fd       	sbrc	r19, 1
    1600:	40 52       	subi	r20, 0x20	; 32
    1602:	41 93       	st	Z+, r20
    1604:	02 d0       	rcall	.+4      	; 0x160a <__ultoa_invert+0x84>
    1606:	a9 f7       	brne	.-22     	; 0x15f2 <__ultoa_invert+0x6c>
    1608:	ea cf       	rjmp	.-44     	; 0x15de <__ultoa_invert+0x58>
    160a:	b4 e0       	ldi	r27, 0x04	; 4
    160c:	a6 95       	lsr	r26
    160e:	97 95       	ror	r25
    1610:	87 95       	ror	r24
    1612:	77 95       	ror	r23
    1614:	67 95       	ror	r22
    1616:	ba 95       	dec	r27
    1618:	c9 f7       	brne	.-14     	; 0x160c <__ultoa_invert+0x86>
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	61 05       	cpc	r22, r1
    161e:	71 05       	cpc	r23, r1
    1620:	08 95       	ret
    1622:	9b 01       	movw	r18, r22
    1624:	ac 01       	movw	r20, r24
    1626:	0a 2e       	mov	r0, r26
    1628:	06 94       	lsr	r0
    162a:	57 95       	ror	r21
    162c:	47 95       	ror	r20
    162e:	37 95       	ror	r19
    1630:	27 95       	ror	r18
    1632:	ba 95       	dec	r27
    1634:	c9 f7       	brne	.-14     	; 0x1628 <__ultoa_invert+0xa2>
    1636:	62 0f       	add	r22, r18
    1638:	73 1f       	adc	r23, r19
    163a:	84 1f       	adc	r24, r20
    163c:	95 1f       	adc	r25, r21
    163e:	a0 1d       	adc	r26, r0
    1640:	08 95       	ret

00001642 <_exit>:
    1642:	f8 94       	cli

00001644 <__stop_program>:
    1644:	ff cf       	rjmp	.-2      	; 0x1644 <__stop_program>
