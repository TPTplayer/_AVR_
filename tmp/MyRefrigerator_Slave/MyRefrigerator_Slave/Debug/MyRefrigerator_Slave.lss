
MyRefrigerator_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000aa4  00000b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800130  00800130  00000b68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a7  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a91  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000834  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae0  00000000  00000000  00003a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000452b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	47 c1       	rjmp	.+654    	; 0x304 <__vector_29>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	a3 c1       	rjmp	.+838    	; 0x3cc <__vector_33>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e3       	ldi	r26, 0x30	; 48
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 33       	cpi	r26, 0x35	; 53
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	df d1       	rcall	.+958    	; 0x482 <main>
  c4:	ed c4       	rjmp	.+2522   	; 0xaa0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <CLCD_DataTransmitter>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	ef e9       	ldi	r30, 0x9F	; 159
  ca:	ff e0       	ldi	r31, 0x0F	; 15
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <CLCD_DataTransmitter+0x4>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <CLCD_DataTransmitter+0xa>
  d2:	00 00       	nop

/*It is a function based on 8bit data bus.*/

void CLCD_DataTransmitter(char data){
	_delay_ms(1);
	PORTE = RS; 
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	f5 e0       	ldi	r31, 0x05	; 5
  da:	fa 95       	dec	r31
  dc:	f1 f7       	brne	.-4      	; 0xda <CLCD_DataTransmitter+0x12>
  de:	00 00       	nop
	_delay_us(1); 
	PORTE = (RS | E); 
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	93 b9       	out	0x03, r25	; 3
  e4:	95 e0       	ldi	r25, 0x05	; 5
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <CLCD_DataTransmitter+0x1e>
  ea:	00 00       	nop
	_delay_us(1);
	PORTB = data; 
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	e5 e0       	ldi	r30, 0x05	; 5
  f0:	ea 95       	dec	r30
  f2:	f1 f7       	brne	.-4      	; 0xf0 <CLCD_DataTransmitter+0x28>
  f4:	00 00       	nop
	_delay_us(1);
	PORTE = RW;	
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	83 b9       	out	0x03, r24	; 3
  fa:	08 95       	ret

000000fc <CLCD_Controller>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	36 e7       	ldi	r19, 0x76	; 118
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <CLCD_Controller+0x6>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <CLCD_Controller+0x10>
 10c:	00 00       	nop
}

void CLCD_Controller(char ctl){
	_delay_ms(30);
	PORTE = 0x00; //RW clear
 10e:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	25 e0       	ldi	r18, 0x05	; 5
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <CLCD_Controller+0x16>
 116:	00 00       	nop
	_delay_us(1);
	PORTE = E;
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	93 b9       	out	0x03, r25	; 3
 11c:	35 e0       	ldi	r19, 0x05	; 5
 11e:	3a 95       	dec	r19
 120:	f1 f7       	brne	.-4      	; 0x11e <CLCD_Controller+0x22>
 122:	00 00       	nop
	_delay_us(1);
	PORTB = ctl;
 124:	88 bb       	out	0x18, r24	; 24
 126:	85 e0       	ldi	r24, 0x05	; 5
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <CLCD_Controller+0x2c>
 12c:	00 00       	nop
	_delay_us(1);
	PORTE = (RS | RW);
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	83 b9       	out	0x03, r24	; 3
 132:	08 95       	ret

00000134 <CLCD_initalizer>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	80 e7       	ldi	r24, 0x70	; 112
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <CLCD_initalizer+0x6>
 142:	00 c0       	rjmp	.+0      	; 0x144 <CLCD_initalizer+0x10>
 144:	00 00       	nop
}

void CLCD_initalizer(void){
	_delay_ms(50);
	CLCD_Controller(FUNC_DISPLAY_LINE_2 | FUNC_DATA_LINE_8);
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	d9 df       	rcall	.-78     	; 0xfc <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	25 ed       	ldi	r18, 0xD5	; 213
 14c:	2a 95       	dec	r18
 14e:	f1 f7       	brne	.-4      	; 0x14c <CLCD_initalizer+0x18>
 150:	00 00       	nop
	_delay_us(40);
	CLCD_Controller(DISPLAY_ON);
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	d3 df       	rcall	.-90     	; 0xfc <CLCD_Controller>
 156:	85 ed       	ldi	r24, 0xD5	; 213
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <CLCD_initalizer+0x24>
	_delay_us(40);
	CLCD_Controller(CLEAR_DISPLAY);
 15c:	00 00       	nop
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	cd df       	rcall	.-102    	; 0xfc <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9f e1       	ldi	r25, 0x1F	; 31
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <CLCD_initalizer+0x32>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <CLCD_initalizer+0x38>
	_delay_ms(2);
	CLCD_Controller(ENTRY_NO_SHIFT);
 16c:	00 00       	nop
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	c5 cf       	rjmp	.-118    	; 0xfc <CLCD_Controller>
 172:	08 95       	ret

00000174 <CLCD_putstr>:
}

void CLCD_putstr(char addr, char *str){
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	7b 01       	movw	r14, r22
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
 182:	08 2f       	mov	r16, r24
 184:	00 68       	ori	r16, 0x80	; 128
 186:	80 2f       	mov	r24, r16
 188:	b9 df       	rcall	.-142    	; 0xfc <CLCD_Controller>
	while(*str != '\0'){
 18a:	f7 01       	movw	r30, r14
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	89 f0       	breq	.+34     	; 0x1b4 <CLCD_putstr+0x40>
 192:	e7 01       	movw	r28, r14
		if(((addr | CLCD_DD_RAM_BASE) + char_count) == 0x90){
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	0e 19       	sub	r16, r14
 198:	1f 09       	sbc	r17, r15
 19a:	ce 01       	movw	r24, r28
 19c:	80 0f       	add	r24, r16
 19e:	91 1f       	adc	r25, r17
 1a0:	80 39       	cpi	r24, 0x90	; 144
 1a2:	91 05       	cpc	r25, r1
 1a4:	11 f4       	brne	.+4      	; 0x1aa <CLCD_putstr+0x36>
			CLCD_Controller(CLCD_DD_RAM_BASE | 0x40);
 1a6:	80 ec       	ldi	r24, 0xC0	; 192
 1a8:	a9 df       	rcall	.-174    	; 0xfc <CLCD_Controller>
		}
		CLCD_DataTransmitter(*str);
 1aa:	89 91       	ld	r24, Y+
 1ac:	8d df       	rcall	.-230    	; 0xc8 <CLCD_DataTransmitter>
 1ae:	88 81       	ld	r24, Y

void CLCD_putstr(char addr, char *str){
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
	while(*str != '\0'){
 1b0:	81 11       	cpse	r24, r1
 1b2:	f3 cf       	rjmp	.-26     	; 0x19a <CLCD_putstr+0x26>
 1b4:	df 91       	pop	r29
		CLCD_DataTransmitter(*str);
		
		str += 1;
		char_count += 1;
	}
}
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <CLCD_printstr>:
 1c2:	cf 92       	push	r12

void CLCD_printstr(char addr, char *str, char size){
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	6b 01       	movw	r12, r22
 1d4:	c4 2f       	mov	r28, r20
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
 1d6:	08 2f       	mov	r16, r24
 1d8:	00 68       	ori	r16, 0x80	; 128
 1da:	80 2f       	mov	r24, r16
 1dc:	8f df       	rcall	.-226    	; 0xfc <CLCD_Controller>
	for(char_count = 0; char_count <= size - 1; char_count++){
 1de:	8c 2f       	mov	r24, r28
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a2 f0       	brmi	.+40     	; 0x20e <CLCD_printstr+0x4c>
 1e6:	76 01       	movw	r14, r12
 1e8:	ec 0e       	add	r14, r28
 1ea:	f1 1c       	adc	r15, r1
 1ec:	e6 01       	movw	r28, r12
		if(((addr | CLCD_DD_RAM_BASE) + char_count) == 0x90){
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	0c 19       	sub	r16, r12
 1f2:	1d 09       	sbc	r17, r13
 1f4:	ce 01       	movw	r24, r28
 1f6:	80 0f       	add	r24, r16
 1f8:	91 1f       	adc	r25, r17
 1fa:	80 39       	cpi	r24, 0x90	; 144
 1fc:	91 05       	cpc	r25, r1
 1fe:	11 f4       	brne	.+4      	; 0x204 <CLCD_printstr+0x42>
			CLCD_Controller(CLCD_DD_RAM_BASE | 0x40);
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	7c df       	rcall	.-264    	; 0xfc <CLCD_Controller>
		}
		
		CLCD_DataTransmitter(*str);
 204:	89 91       	ld	r24, Y+
 206:	60 df       	rcall	.-320    	; 0xc8 <CLCD_DataTransmitter>
 208:	ce 15       	cp	r28, r14

void CLCD_printstr(char addr, char *str, char size){
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
	for(char_count = 0; char_count <= size - 1; char_count++){
 20a:	df 05       	cpc	r29, r15
 20c:	99 f7       	brne	.-26     	; 0x1f4 <CLCD_printstr+0x32>
 20e:	df 91       	pop	r29
		}
		
		CLCD_DataTransmitter(*str);
		str += 1;
	}
}
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

00000220 <DisplayCurrentStatus>:
 220:	cf 92       	push	r12
#include <stdlib.h>
#include <string.h>

#include "CLCD.h"

void DisplayCurrentStatus(int8_t temp, int8_t ovh_flag){
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	e7 97       	sbiw	r28, 0x37	; 55
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	f8 2e       	mov	r15, r24
 242:	e6 2e       	mov	r14, r22
	char str[17] = {0, };
 244:	8e 01       	movw	r16, r28
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	81 e1       	ldi	r24, 0x11	; 17
 24c:	f8 01       	movw	r30, r16
 24e:	11 92       	st	Z+, r1
 250:	8a 95       	dec	r24
 252:	e9 f7       	brne	.-6      	; 0x24e <DisplayCurrentStatus+0x2e>
	char warning[17] = "WARNING OVERHEAT";
 254:	81 e1       	ldi	r24, 0x11	; 17
 256:	ed e0       	ldi	r30, 0x0D	; 13
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	de 01       	movw	r26, r28
 25c:	52 96       	adiw	r26, 0x12	; 18
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <DisplayCurrentStatus+0x3e>
	char void_arr[17] = "                ";
 266:	81 e1       	ldi	r24, 0x11	; 17
 268:	ee e1       	ldi	r30, 0x1E	; 30
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	de 01       	movw	r26, r28
 26e:	93 96       	adiw	r26, 0x23	; 35
 270:	01 90       	ld	r0, Z+
 272:	0d 92       	st	X+, r0
 274:	8a 95       	dec	r24
 276:	e1 f7       	brne	.-8      	; 0x270 <DisplayCurrentStatus+0x50>
	char dummy[4] = {0, };
 278:	1c aa       	std	Y+52, r1	; 0x34
 27a:	1d aa       	std	Y+53, r1	; 0x35
 27c:	1e aa       	std	Y+54, r1	; 0x36
 27e:	1f aa       	std	Y+55, r1	; 0x37
	
	sprintf(dummy, "%d", temp);
 280:	cf 2c       	mov	r12, r15
 282:	0f 2c       	mov	r0, r15
 284:	00 0c       	add	r0, r0
 286:	dd 08       	sbc	r13, r13
 288:	df 92       	push	r13
 28a:	ff 92       	push	r15
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	9f 93       	push	r25
 292:	8f 93       	push	r24
 294:	ce 01       	movw	r24, r28
 296:	c4 96       	adiw	r24, 0x34	; 52
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	26 d1       	rcall	.+588    	; 0x4ea <sprintf>
		
	sprintf(str, "Inside: %d", temp);
 29e:	df 92       	push	r13
 2a0:	ff 92       	push	r15
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	9f 93       	push	r25
 2a8:	8f 93       	push	r24
 2aa:	1f 93       	push	r17
 2ac:	0f 93       	push	r16
 2ae:	1d d1       	rcall	.+570    	; 0x4ea <sprintf>
	CLCD_putstr(0x00, str);
 2b0:	b8 01       	movw	r22, r16
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	5f df       	rcall	.-322    	; 0x174 <CLCD_putstr>
	CLCD_printstr(0x0F, "C", 1);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	6b e0       	ldi	r22, 0x0B	; 11
 2ba:	71 e0       	ldi	r23, 0x01	; 1
 2bc:	8f e0       	ldi	r24, 0x0F	; 15
 2be:	81 df       	rcall	.-254    	; 0x1c2 <CLCD_printstr>
	
	if(ovh_flag == 1){
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	e9 12       	cpse	r14, r25
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <DisplayCurrentStatus+0xbc>
		CLCD_putstr(0x40, warning);	
 2d0:	be 01       	movw	r22, r28
 2d2:	6e 5e       	subi	r22, 0xEE	; 238
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	4d df       	rcall	.-358    	; 0x174 <CLCD_putstr>
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <DisplayCurrentStatus+0xc6>
	}
	else{
		CLCD_putstr(0x40, void_arr);
 2dc:	be 01       	movw	r22, r28
 2de:	6d 5d       	subi	r22, 0xDD	; 221
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	47 df       	rcall	.-370    	; 0x174 <CLCD_putstr>
 2e6:	e7 96       	adiw	r28, 0x37	; 55
	}
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <__vector_29>:
int8_t receive_tempdata;
int8_t receive_overheat_flag;

volatile int soundflag = 0;

ISR(TIMER3_OVF_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	0b b6       	in	r0, 0x3b	; 59
 310:	0f 92       	push	r0
 312:	2f 93       	push	r18
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	if(soundflag < 500){
 31c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 320:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 324:	84 3f       	cpi	r24, 0xF4	; 244
 326:	91 40       	sbci	r25, 0x01	; 1
 328:	b4 f4       	brge	.+44     	; 0x356 <__vector_29+0x52>
		PORTF ^= 0x01;
 32a:	e2 e6       	ldi	r30, 0x62	; 98
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	90 81       	ld	r25, Z
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 27       	eor	r24, r25
 334:	80 83       	st	Z, r24
		TCNT3 = 0xFFFF - 50;
 336:	8d ec       	ldi	r24, 0xCD	; 205
 338:	9f ef       	ldi	r25, 0xFF	; 255
 33a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 33e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		soundflag += 1;
 342:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 346:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 350:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 354:	2f c0       	rjmp	.+94     	; 0x3b4 <__vector_29+0xb0>
	}
	else if(soundflag >= 500 && soundflag < 1000){
 356:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 35a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 35e:	84 3f       	cpi	r24, 0xF4	; 244
 360:	91 40       	sbci	r25, 0x01	; 1
 362:	bc f0       	brlt	.+46     	; 0x392 <__vector_29+0x8e>
 364:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 368:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 36c:	88 3e       	cpi	r24, 0xE8	; 232
 36e:	93 40       	sbci	r25, 0x03	; 3
 370:	84 f4       	brge	.+32     	; 0x392 <__vector_29+0x8e>
		TCNT3 = 0xFFFF - 50;
 372:	8d ec       	ldi	r24, 0xCD	; 205
 374:	9f ef       	ldi	r25, 0xFF	; 255
 376:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 37a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		soundflag += 1;
 37e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 382:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 38c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <__vector_29+0xb0>
	}
	else if(soundflag == 1000){
 392:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 396:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 39a:	88 3e       	cpi	r24, 0xE8	; 232
 39c:	93 40       	sbci	r25, 0x03	; 3
 39e:	51 f4       	brne	.+20     	; 0x3b4 <__vector_29+0xb0>
		soundflag = 0;
 3a0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
 3a4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
		TCNT3 = 0xFFFF - 50;
 3a8:	8d ec       	ldi	r24, 0xCD	; 205
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0b be       	out	0x3b, r0	; 59
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_33>:

ISR(TWI_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
	if(TWSR == 0x60){ //after receive start condition and slave address
 3d8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 3dc:	80 36       	cpi	r24, 0x60	; 96
 3de:	21 f4       	brne	.+8      	; 0x3e8 <__vector_33+0x1c>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 3e0:	85 ec       	ldi	r24, 0xC5	; 197
 3e2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3e6:	2d c0       	rjmp	.+90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}
	else if(TWSR == 0x80 && receive_flag == 0){ //after receive data
 3e8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 3ec:	80 38       	cpi	r24, 0x80	; 128
 3ee:	79 f4       	brne	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <receive_flag>
 3f4:	81 11       	cpse	r24, r1
 3f6:	0b c0       	rjmp	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		receive_tempdata = TWDR;
 3f8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 3fc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <receive_tempdata>
		receive_flag += 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <receive_flag>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 406:	85 ec       	ldi	r24, 0xC5	; 197
 408:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 40c:	1a c0       	rjmp	.+52     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}
	else if(TWSR == 0x80 && receive_flag == 1){ //after receive data
 40e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 412:	80 38       	cpi	r24, 0x80	; 128
 414:	79 f4       	brne	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 416:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <receive_flag>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	59 f4       	brne	.+22     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		receive_overheat_flag = TWDR;
 41e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 422:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <receive_overheat_flag>
		receive_flag += 1;
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <receive_flag>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 42c:	85 ec       	ldi	r24, 0xC5	; 197
 42e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 432:	07 c0       	rjmp	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}
	else if(TWSR == 0xA0){
 434:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 438:	80 3a       	cpi	r24, 0xA0	; 160
 43a:	19 f4       	brne	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		TWCR = (1 << TWIE) | (1 << TWEA) | (1 << TWEN) | (1 << TWINT);
 43c:	85 ec       	ldi	r24, 0xC5	; 197
 43e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	}
}
 442:	8f 91       	pop	r24
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <TWI_initializer>:
		DisplayCurrentStatus(temp, ovh_flag);
	}
}

void TWI_initializer(void){
	cli();
 44e:	f8 94       	cli
	TWAR = (SLAVE_ADDR << 1) & 0xFE; 
 450:	86 e4       	ldi	r24, 0x46	; 70
 452:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	TWCR = (1 << TWIE) | (1 << TWEA) | (1 << TWEN);
 456:	85 e4       	ldi	r24, 0x45	; 69
 458:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	sei();
 45c:	78 94       	sei
 45e:	08 95       	ret

00000460 <setTimer_warning>:
}


void setTimer_warning(){
	TCCR3A = 0x00;
 460:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1 << CS31) | (1 << CS30);
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
 46a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	ETIMSK = (1 << TOIE3);
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>

	TCNT3 = 0xFFFF - 50;
 474:	8d ec       	ldi	r24, 0xCD	; 205
 476:	9f ef       	ldi	r25, 0xFF	; 255
 478:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 47c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 480:	08 95       	ret

00000482 <main>:
		TWCR = (1 << TWIE) | (1 << TWEA) | (1 << TWEN) | (1 << TWINT);
	}
}

int main(void){
	DDRA = 0xFF; //unused
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; //CLCD Databus (0xFF | 0xFF)
 486:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; //unused
 488:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00; //TWI
 48a:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xFF; //CLCD Control (0x07 | 0xFF)
 48c:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xFF; //speaker (0x01 | 0xFF)
 48e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x1F; //unused
 492:	8f e1       	ldi	r24, 0x1F	; 31
 494:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	int8_t temp = 0, ovh_flag = 0;
	
	setTimer_warning();
 498:	e3 df       	rcall	.-58     	; 0x460 <setTimer_warning>
	CLCD_initalizer();
 49a:	4c de       	rcall	.-872    	; 0x134 <CLCD_initalizer>
	TWI_initializer();
 49c:	d8 df       	rcall	.-80     	; 0x44e <TWI_initializer>
 49e:	78 94       	sei
	
	sei();
 4a0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
	PORTF = 0x00;
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
	DDRD = 0x00; //TWI
	DDRE = 0xFF; //CLCD Control (0x07 | 0xFF)
	DDRF = 0xFF; //speaker (0x01 | 0xFF)
	DDRG = 0x1F; //unused
	
	int8_t temp = 0, ovh_flag = 0;
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	0d e7       	ldi	r16, 0x7D	; 125
		if(ovh_flag == 0){
			ETIMSK = 0x00;
			PORTF = 0x00;
		}
		else{
			ETIMSK = (1 << TOIE3);
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	68 94       	set
 4ae:	dd 24       	eor	r13, r13
 4b0:	d2 f8       	bld	r13, 2
 4b2:	0f 2e       	mov	r0, r31
			receive_flag = 0;
		}
		
		if(ovh_flag == 0){
			ETIMSK = 0x00;
			PORTF = 0x00;
 4b4:	f2 e6       	ldi	r31, 0x62	; 98
 4b6:	ef 2e       	mov	r14, r31
 4b8:	f1 2c       	mov	r15, r1
 4ba:	f0 2d       	mov	r31, r0
 4bc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <receive_flag>
	sei();
	
	PORTF = 0x00;
	
    while (1) {
		if(receive_flag == 2){
 4c0:	82 30       	cpi	r24, 0x02	; 2
 4c2:	31 f4       	brne	.+12     	; 0x4d0 <main+0x4e>
 4c4:	d0 91 34 01 	lds	r29, 0x0134	; 0x800134 <receive_tempdata>
			temp = receive_tempdata;
 4c8:	c0 91 33 01 	lds	r28, 0x0133	; 0x800133 <receive_overheat_flag>
			ovh_flag = receive_overheat_flag;
 4cc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <receive_flag>
			receive_flag = 0;
 4d0:	c1 11       	cpse	r28, r1
		}
		
		if(ovh_flag == 0){
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <main+0x5c>
 4d4:	f8 01       	movw	r30, r16
			ETIMSK = 0x00;
 4d6:	10 82       	st	Z, r1
 4d8:	f7 01       	movw	r30, r14
			PORTF = 0x00;
 4da:	10 82       	st	Z, r1
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <main+0x60>
 4de:	f8 01       	movw	r30, r16
		}
		else{
			ETIMSK = (1 << TOIE3);
 4e0:	d0 82       	st	Z, r13
		}
		
		DisplayCurrentStatus(temp, ovh_flag);
 4e2:	6c 2f       	mov	r22, r28
 4e4:	8d 2f       	mov	r24, r29
 4e6:	9c de       	rcall	.-712    	; 0x220 <DisplayCurrentStatus>
 4e8:	e9 cf       	rjmp	.-46     	; 0x4bc <main+0x3a>

000004ea <sprintf>:
	}
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	2e 97       	sbiw	r28, 0x0e	; 14
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	f8 94       	cli
 4fc:	de bf       	out	0x3e, r29	; 62
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	cd bf       	out	0x3d, r28	; 61
 502:	0d 89       	ldd	r16, Y+21	; 0x15
 504:	1e 89       	ldd	r17, Y+22	; 0x16
 506:	86 e0       	ldi	r24, 0x06	; 6
 508:	8c 83       	std	Y+4, r24	; 0x04
 50a:	1a 83       	std	Y+2, r17	; 0x02
 50c:	09 83       	std	Y+1, r16	; 0x01
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	9f e7       	ldi	r25, 0x7F	; 127
 512:	9e 83       	std	Y+6, r25	; 0x06
 514:	8d 83       	std	Y+5, r24	; 0x05
 516:	ae 01       	movw	r20, r28
 518:	47 5e       	subi	r20, 0xE7	; 231
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	6f 89       	ldd	r22, Y+23	; 0x17
 51e:	78 8d       	ldd	r23, Y+24	; 0x18
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	10 d0       	rcall	.+32     	; 0x546 <vfprintf>
 526:	ef 81       	ldd	r30, Y+7	; 0x07
 528:	f8 85       	ldd	r31, Y+8	; 0x08
 52a:	e0 0f       	add	r30, r16
 52c:	f1 1f       	adc	r31, r17
 52e:	10 82       	st	Z, r1
 530:	2e 96       	adiw	r28, 0x0e	; 14
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	08 95       	ret

00000546 <vfprintf>:
 546:	2f 92       	push	r2
 548:	3f 92       	push	r3
 54a:	4f 92       	push	r4
 54c:	5f 92       	push	r5
 54e:	6f 92       	push	r6
 550:	7f 92       	push	r7
 552:	8f 92       	push	r8
 554:	9f 92       	push	r9
 556:	af 92       	push	r10
 558:	bf 92       	push	r11
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	2b 97       	sbiw	r28, 0x0b	; 11
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	6c 01       	movw	r12, r24
 57c:	7b 01       	movw	r14, r22
 57e:	8a 01       	movw	r16, r20
 580:	fc 01       	movw	r30, r24
 582:	17 82       	std	Z+7, r1	; 0x07
 584:	16 82       	std	Z+6, r1	; 0x06
 586:	83 81       	ldd	r24, Z+3	; 0x03
 588:	81 ff       	sbrs	r24, 1
 58a:	bf c1       	rjmp	.+894    	; 0x90a <vfprintf+0x3c4>
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	3c 01       	movw	r6, r24
 592:	f6 01       	movw	r30, r12
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	f7 01       	movw	r30, r14
 598:	93 fd       	sbrc	r25, 3
 59a:	85 91       	lpm	r24, Z+
 59c:	93 ff       	sbrs	r25, 3
 59e:	81 91       	ld	r24, Z+
 5a0:	7f 01       	movw	r14, r30
 5a2:	88 23       	and	r24, r24
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <vfprintf+0x62>
 5a6:	ad c1       	rjmp	.+858    	; 0x902 <vfprintf+0x3bc>
 5a8:	85 32       	cpi	r24, 0x25	; 37
 5aa:	39 f4       	brne	.+14     	; 0x5ba <vfprintf+0x74>
 5ac:	93 fd       	sbrc	r25, 3
 5ae:	85 91       	lpm	r24, Z+
 5b0:	93 ff       	sbrs	r25, 3
 5b2:	81 91       	ld	r24, Z+
 5b4:	7f 01       	movw	r14, r30
 5b6:	85 32       	cpi	r24, 0x25	; 37
 5b8:	21 f4       	brne	.+8      	; 0x5c2 <vfprintf+0x7c>
 5ba:	b6 01       	movw	r22, r12
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	d6 d1       	rcall	.+940    	; 0x96c <fputc>
 5c0:	e8 cf       	rjmp	.-48     	; 0x592 <vfprintf+0x4c>
 5c2:	91 2c       	mov	r9, r1
 5c4:	21 2c       	mov	r2, r1
 5c6:	31 2c       	mov	r3, r1
 5c8:	ff e1       	ldi	r31, 0x1F	; 31
 5ca:	f3 15       	cp	r31, r3
 5cc:	d8 f0       	brcs	.+54     	; 0x604 <vfprintf+0xbe>
 5ce:	8b 32       	cpi	r24, 0x2B	; 43
 5d0:	79 f0       	breq	.+30     	; 0x5f0 <vfprintf+0xaa>
 5d2:	38 f4       	brcc	.+14     	; 0x5e2 <vfprintf+0x9c>
 5d4:	80 32       	cpi	r24, 0x20	; 32
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <vfprintf+0xb0>
 5d8:	83 32       	cpi	r24, 0x23	; 35
 5da:	a1 f4       	brne	.+40     	; 0x604 <vfprintf+0xbe>
 5dc:	23 2d       	mov	r18, r3
 5de:	20 61       	ori	r18, 0x10	; 16
 5e0:	1d c0       	rjmp	.+58     	; 0x61c <vfprintf+0xd6>
 5e2:	8d 32       	cpi	r24, 0x2D	; 45
 5e4:	61 f0       	breq	.+24     	; 0x5fe <vfprintf+0xb8>
 5e6:	80 33       	cpi	r24, 0x30	; 48
 5e8:	69 f4       	brne	.+26     	; 0x604 <vfprintf+0xbe>
 5ea:	23 2d       	mov	r18, r3
 5ec:	21 60       	ori	r18, 0x01	; 1
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <vfprintf+0xd6>
 5f0:	83 2d       	mov	r24, r3
 5f2:	82 60       	ori	r24, 0x02	; 2
 5f4:	38 2e       	mov	r3, r24
 5f6:	e3 2d       	mov	r30, r3
 5f8:	e4 60       	ori	r30, 0x04	; 4
 5fa:	3e 2e       	mov	r3, r30
 5fc:	2a c0       	rjmp	.+84     	; 0x652 <vfprintf+0x10c>
 5fe:	f3 2d       	mov	r31, r3
 600:	f8 60       	ori	r31, 0x08	; 8
 602:	1d c0       	rjmp	.+58     	; 0x63e <vfprintf+0xf8>
 604:	37 fc       	sbrc	r3, 7
 606:	2d c0       	rjmp	.+90     	; 0x662 <vfprintf+0x11c>
 608:	20 ed       	ldi	r18, 0xD0	; 208
 60a:	28 0f       	add	r18, r24
 60c:	2a 30       	cpi	r18, 0x0A	; 10
 60e:	40 f0       	brcs	.+16     	; 0x620 <vfprintf+0xda>
 610:	8e 32       	cpi	r24, 0x2E	; 46
 612:	b9 f4       	brne	.+46     	; 0x642 <vfprintf+0xfc>
 614:	36 fc       	sbrc	r3, 6
 616:	75 c1       	rjmp	.+746    	; 0x902 <vfprintf+0x3bc>
 618:	23 2d       	mov	r18, r3
 61a:	20 64       	ori	r18, 0x40	; 64
 61c:	32 2e       	mov	r3, r18
 61e:	19 c0       	rjmp	.+50     	; 0x652 <vfprintf+0x10c>
 620:	36 fe       	sbrs	r3, 6
 622:	06 c0       	rjmp	.+12     	; 0x630 <vfprintf+0xea>
 624:	8a e0       	ldi	r24, 0x0A	; 10
 626:	98 9e       	mul	r9, r24
 628:	20 0d       	add	r18, r0
 62a:	11 24       	eor	r1, r1
 62c:	92 2e       	mov	r9, r18
 62e:	11 c0       	rjmp	.+34     	; 0x652 <vfprintf+0x10c>
 630:	ea e0       	ldi	r30, 0x0A	; 10
 632:	2e 9e       	mul	r2, r30
 634:	20 0d       	add	r18, r0
 636:	11 24       	eor	r1, r1
 638:	22 2e       	mov	r2, r18
 63a:	f3 2d       	mov	r31, r3
 63c:	f0 62       	ori	r31, 0x20	; 32
 63e:	3f 2e       	mov	r3, r31
 640:	08 c0       	rjmp	.+16     	; 0x652 <vfprintf+0x10c>
 642:	8c 36       	cpi	r24, 0x6C	; 108
 644:	21 f4       	brne	.+8      	; 0x64e <vfprintf+0x108>
 646:	83 2d       	mov	r24, r3
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	38 2e       	mov	r3, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <vfprintf+0x10c>
 64e:	88 36       	cpi	r24, 0x68	; 104
 650:	41 f4       	brne	.+16     	; 0x662 <vfprintf+0x11c>
 652:	f7 01       	movw	r30, r14
 654:	93 fd       	sbrc	r25, 3
 656:	85 91       	lpm	r24, Z+
 658:	93 ff       	sbrs	r25, 3
 65a:	81 91       	ld	r24, Z+
 65c:	7f 01       	movw	r14, r30
 65e:	81 11       	cpse	r24, r1
 660:	b3 cf       	rjmp	.-154    	; 0x5c8 <vfprintf+0x82>
 662:	98 2f       	mov	r25, r24
 664:	9f 7d       	andi	r25, 0xDF	; 223
 666:	95 54       	subi	r25, 0x45	; 69
 668:	93 30       	cpi	r25, 0x03	; 3
 66a:	28 f4       	brcc	.+10     	; 0x676 <vfprintf+0x130>
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	9f e3       	ldi	r25, 0x3F	; 63
 672:	99 83       	std	Y+1, r25	; 0x01
 674:	0d c0       	rjmp	.+26     	; 0x690 <vfprintf+0x14a>
 676:	83 36       	cpi	r24, 0x63	; 99
 678:	31 f0       	breq	.+12     	; 0x686 <vfprintf+0x140>
 67a:	83 37       	cpi	r24, 0x73	; 115
 67c:	71 f0       	breq	.+28     	; 0x69a <vfprintf+0x154>
 67e:	83 35       	cpi	r24, 0x53	; 83
 680:	09 f0       	breq	.+2      	; 0x684 <vfprintf+0x13e>
 682:	55 c0       	rjmp	.+170    	; 0x72e <vfprintf+0x1e8>
 684:	20 c0       	rjmp	.+64     	; 0x6c6 <vfprintf+0x180>
 686:	f8 01       	movw	r30, r16
 688:	80 81       	ld	r24, Z
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	0e 5f       	subi	r16, 0xFE	; 254
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	88 24       	eor	r8, r8
 692:	83 94       	inc	r8
 694:	91 2c       	mov	r9, r1
 696:	53 01       	movw	r10, r6
 698:	12 c0       	rjmp	.+36     	; 0x6be <vfprintf+0x178>
 69a:	28 01       	movw	r4, r16
 69c:	f2 e0       	ldi	r31, 0x02	; 2
 69e:	4f 0e       	add	r4, r31
 6a0:	51 1c       	adc	r5, r1
 6a2:	f8 01       	movw	r30, r16
 6a4:	a0 80       	ld	r10, Z
 6a6:	b1 80       	ldd	r11, Z+1	; 0x01
 6a8:	36 fe       	sbrs	r3, 6
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <vfprintf+0x16c>
 6ac:	69 2d       	mov	r22, r9
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0x170>
 6b2:	6f ef       	ldi	r22, 0xFF	; 255
 6b4:	7f ef       	ldi	r23, 0xFF	; 255
 6b6:	c5 01       	movw	r24, r10
 6b8:	4e d1       	rcall	.+668    	; 0x956 <strnlen>
 6ba:	4c 01       	movw	r8, r24
 6bc:	82 01       	movw	r16, r4
 6be:	f3 2d       	mov	r31, r3
 6c0:	ff 77       	andi	r31, 0x7F	; 127
 6c2:	3f 2e       	mov	r3, r31
 6c4:	15 c0       	rjmp	.+42     	; 0x6f0 <vfprintf+0x1aa>
 6c6:	28 01       	movw	r4, r16
 6c8:	22 e0       	ldi	r18, 0x02	; 2
 6ca:	42 0e       	add	r4, r18
 6cc:	51 1c       	adc	r5, r1
 6ce:	f8 01       	movw	r30, r16
 6d0:	a0 80       	ld	r10, Z
 6d2:	b1 80       	ldd	r11, Z+1	; 0x01
 6d4:	36 fe       	sbrs	r3, 6
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <vfprintf+0x198>
 6d8:	69 2d       	mov	r22, r9
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0x19c>
 6de:	6f ef       	ldi	r22, 0xFF	; 255
 6e0:	7f ef       	ldi	r23, 0xFF	; 255
 6e2:	c5 01       	movw	r24, r10
 6e4:	2d d1       	rcall	.+602    	; 0x940 <strnlen_P>
 6e6:	4c 01       	movw	r8, r24
 6e8:	f3 2d       	mov	r31, r3
 6ea:	f0 68       	ori	r31, 0x80	; 128
 6ec:	3f 2e       	mov	r3, r31
 6ee:	82 01       	movw	r16, r4
 6f0:	33 fc       	sbrc	r3, 3
 6f2:	19 c0       	rjmp	.+50     	; 0x726 <vfprintf+0x1e0>
 6f4:	82 2d       	mov	r24, r2
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	88 16       	cp	r8, r24
 6fa:	99 06       	cpc	r9, r25
 6fc:	a0 f4       	brcc	.+40     	; 0x726 <vfprintf+0x1e0>
 6fe:	b6 01       	movw	r22, r12
 700:	80 e2       	ldi	r24, 0x20	; 32
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	33 d1       	rcall	.+614    	; 0x96c <fputc>
 706:	2a 94       	dec	r2
 708:	f5 cf       	rjmp	.-22     	; 0x6f4 <vfprintf+0x1ae>
 70a:	f5 01       	movw	r30, r10
 70c:	37 fc       	sbrc	r3, 7
 70e:	85 91       	lpm	r24, Z+
 710:	37 fe       	sbrs	r3, 7
 712:	81 91       	ld	r24, Z+
 714:	5f 01       	movw	r10, r30
 716:	b6 01       	movw	r22, r12
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	28 d1       	rcall	.+592    	; 0x96c <fputc>
 71c:	21 10       	cpse	r2, r1
 71e:	2a 94       	dec	r2
 720:	21 e0       	ldi	r18, 0x01	; 1
 722:	82 1a       	sub	r8, r18
 724:	91 08       	sbc	r9, r1
 726:	81 14       	cp	r8, r1
 728:	91 04       	cpc	r9, r1
 72a:	79 f7       	brne	.-34     	; 0x70a <vfprintf+0x1c4>
 72c:	e1 c0       	rjmp	.+450    	; 0x8f0 <vfprintf+0x3aa>
 72e:	84 36       	cpi	r24, 0x64	; 100
 730:	11 f0       	breq	.+4      	; 0x736 <vfprintf+0x1f0>
 732:	89 36       	cpi	r24, 0x69	; 105
 734:	39 f5       	brne	.+78     	; 0x784 <vfprintf+0x23e>
 736:	f8 01       	movw	r30, r16
 738:	37 fe       	sbrs	r3, 7
 73a:	07 c0       	rjmp	.+14     	; 0x74a <vfprintf+0x204>
 73c:	60 81       	ld	r22, Z
 73e:	71 81       	ldd	r23, Z+1	; 0x01
 740:	82 81       	ldd	r24, Z+2	; 0x02
 742:	93 81       	ldd	r25, Z+3	; 0x03
 744:	0c 5f       	subi	r16, 0xFC	; 252
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	08 c0       	rjmp	.+16     	; 0x75a <vfprintf+0x214>
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	07 2e       	mov	r0, r23
 750:	00 0c       	add	r0, r0
 752:	88 0b       	sbc	r24, r24
 754:	99 0b       	sbc	r25, r25
 756:	0e 5f       	subi	r16, 0xFE	; 254
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	f3 2d       	mov	r31, r3
 75c:	ff 76       	andi	r31, 0x6F	; 111
 75e:	3f 2e       	mov	r3, r31
 760:	97 ff       	sbrs	r25, 7
 762:	09 c0       	rjmp	.+18     	; 0x776 <vfprintf+0x230>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	f0 68       	ori	r31, 0x80	; 128
 774:	3f 2e       	mov	r3, r31
 776:	2a e0       	ldi	r18, 0x0A	; 10
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	a3 01       	movw	r20, r6
 77c:	33 d1       	rcall	.+614    	; 0x9e4 <__ultoa_invert>
 77e:	88 2e       	mov	r8, r24
 780:	86 18       	sub	r8, r6
 782:	44 c0       	rjmp	.+136    	; 0x80c <vfprintf+0x2c6>
 784:	85 37       	cpi	r24, 0x75	; 117
 786:	31 f4       	brne	.+12     	; 0x794 <vfprintf+0x24e>
 788:	23 2d       	mov	r18, r3
 78a:	2f 7e       	andi	r18, 0xEF	; 239
 78c:	b2 2e       	mov	r11, r18
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	25 c0       	rjmp	.+74     	; 0x7de <vfprintf+0x298>
 794:	93 2d       	mov	r25, r3
 796:	99 7f       	andi	r25, 0xF9	; 249
 798:	b9 2e       	mov	r11, r25
 79a:	8f 36       	cpi	r24, 0x6F	; 111
 79c:	c1 f0       	breq	.+48     	; 0x7ce <vfprintf+0x288>
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <vfprintf+0x260>
 7a0:	88 35       	cpi	r24, 0x58	; 88
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <vfprintf+0x27c>
 7a4:	ae c0       	rjmp	.+348    	; 0x902 <vfprintf+0x3bc>
 7a6:	80 37       	cpi	r24, 0x70	; 112
 7a8:	19 f0       	breq	.+6      	; 0x7b0 <vfprintf+0x26a>
 7aa:	88 37       	cpi	r24, 0x78	; 120
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <vfprintf+0x270>
 7ae:	a9 c0       	rjmp	.+338    	; 0x902 <vfprintf+0x3bc>
 7b0:	e9 2f       	mov	r30, r25
 7b2:	e0 61       	ori	r30, 0x10	; 16
 7b4:	be 2e       	mov	r11, r30
 7b6:	b4 fe       	sbrs	r11, 4
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x28e>
 7ba:	fb 2d       	mov	r31, r11
 7bc:	f4 60       	ori	r31, 0x04	; 4
 7be:	bf 2e       	mov	r11, r31
 7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <vfprintf+0x28e>
 7c2:	34 fe       	sbrs	r3, 4
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <vfprintf+0x294>
 7c6:	29 2f       	mov	r18, r25
 7c8:	26 60       	ori	r18, 0x06	; 6
 7ca:	b2 2e       	mov	r11, r18
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x294>
 7ce:	28 e0       	ldi	r18, 0x08	; 8
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <vfprintf+0x298>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x298>
 7da:	20 e1       	ldi	r18, 0x10	; 16
 7dc:	32 e0       	ldi	r19, 0x02	; 2
 7de:	f8 01       	movw	r30, r16
 7e0:	b7 fe       	sbrs	r11, 7
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <vfprintf+0x2ac>
 7e4:	60 81       	ld	r22, Z
 7e6:	71 81       	ldd	r23, Z+1	; 0x01
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	93 81       	ldd	r25, Z+3	; 0x03
 7ec:	0c 5f       	subi	r16, 0xFC	; 252
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x2b8>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 5f       	subi	r16, 0xFE	; 254
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	a3 01       	movw	r20, r6
 800:	f1 d0       	rcall	.+482    	; 0x9e4 <__ultoa_invert>
 802:	88 2e       	mov	r8, r24
 804:	86 18       	sub	r8, r6
 806:	fb 2d       	mov	r31, r11
 808:	ff 77       	andi	r31, 0x7F	; 127
 80a:	3f 2e       	mov	r3, r31
 80c:	36 fe       	sbrs	r3, 6
 80e:	0d c0       	rjmp	.+26     	; 0x82a <vfprintf+0x2e4>
 810:	23 2d       	mov	r18, r3
 812:	2e 7f       	andi	r18, 0xFE	; 254
 814:	a2 2e       	mov	r10, r18
 816:	89 14       	cp	r8, r9
 818:	58 f4       	brcc	.+22     	; 0x830 <vfprintf+0x2ea>
 81a:	34 fe       	sbrs	r3, 4
 81c:	0b c0       	rjmp	.+22     	; 0x834 <vfprintf+0x2ee>
 81e:	32 fc       	sbrc	r3, 2
 820:	09 c0       	rjmp	.+18     	; 0x834 <vfprintf+0x2ee>
 822:	83 2d       	mov	r24, r3
 824:	8e 7e       	andi	r24, 0xEE	; 238
 826:	a8 2e       	mov	r10, r24
 828:	05 c0       	rjmp	.+10     	; 0x834 <vfprintf+0x2ee>
 82a:	b8 2c       	mov	r11, r8
 82c:	a3 2c       	mov	r10, r3
 82e:	03 c0       	rjmp	.+6      	; 0x836 <vfprintf+0x2f0>
 830:	b8 2c       	mov	r11, r8
 832:	01 c0       	rjmp	.+2      	; 0x836 <vfprintf+0x2f0>
 834:	b9 2c       	mov	r11, r9
 836:	a4 fe       	sbrs	r10, 4
 838:	0f c0       	rjmp	.+30     	; 0x858 <vfprintf+0x312>
 83a:	fe 01       	movw	r30, r28
 83c:	e8 0d       	add	r30, r8
 83e:	f1 1d       	adc	r31, r1
 840:	80 81       	ld	r24, Z
 842:	80 33       	cpi	r24, 0x30	; 48
 844:	21 f4       	brne	.+8      	; 0x84e <vfprintf+0x308>
 846:	9a 2d       	mov	r25, r10
 848:	99 7e       	andi	r25, 0xE9	; 233
 84a:	a9 2e       	mov	r10, r25
 84c:	09 c0       	rjmp	.+18     	; 0x860 <vfprintf+0x31a>
 84e:	a2 fe       	sbrs	r10, 2
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0x318>
 852:	b3 94       	inc	r11
 854:	b3 94       	inc	r11
 856:	04 c0       	rjmp	.+8      	; 0x860 <vfprintf+0x31a>
 858:	8a 2d       	mov	r24, r10
 85a:	86 78       	andi	r24, 0x86	; 134
 85c:	09 f0       	breq	.+2      	; 0x860 <vfprintf+0x31a>
 85e:	b3 94       	inc	r11
 860:	a3 fc       	sbrc	r10, 3
 862:	10 c0       	rjmp	.+32     	; 0x884 <vfprintf+0x33e>
 864:	a0 fe       	sbrs	r10, 0
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x32e>
 868:	b2 14       	cp	r11, r2
 86a:	80 f4       	brcc	.+32     	; 0x88c <vfprintf+0x346>
 86c:	28 0c       	add	r2, r8
 86e:	92 2c       	mov	r9, r2
 870:	9b 18       	sub	r9, r11
 872:	0d c0       	rjmp	.+26     	; 0x88e <vfprintf+0x348>
 874:	b2 14       	cp	r11, r2
 876:	58 f4       	brcc	.+22     	; 0x88e <vfprintf+0x348>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	76 d0       	rcall	.+236    	; 0x96c <fputc>
 880:	b3 94       	inc	r11
 882:	f8 cf       	rjmp	.-16     	; 0x874 <vfprintf+0x32e>
 884:	b2 14       	cp	r11, r2
 886:	18 f4       	brcc	.+6      	; 0x88e <vfprintf+0x348>
 888:	2b 18       	sub	r2, r11
 88a:	02 c0       	rjmp	.+4      	; 0x890 <vfprintf+0x34a>
 88c:	98 2c       	mov	r9, r8
 88e:	21 2c       	mov	r2, r1
 890:	a4 fe       	sbrs	r10, 4
 892:	0f c0       	rjmp	.+30     	; 0x8b2 <vfprintf+0x36c>
 894:	b6 01       	movw	r22, r12
 896:	80 e3       	ldi	r24, 0x30	; 48
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	68 d0       	rcall	.+208    	; 0x96c <fputc>
 89c:	a2 fe       	sbrs	r10, 2
 89e:	16 c0       	rjmp	.+44     	; 0x8cc <vfprintf+0x386>
 8a0:	a1 fc       	sbrc	r10, 1
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <vfprintf+0x364>
 8a4:	88 e7       	ldi	r24, 0x78	; 120
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x368>
 8aa:	88 e5       	ldi	r24, 0x58	; 88
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	b6 01       	movw	r22, r12
 8b0:	0c c0       	rjmp	.+24     	; 0x8ca <vfprintf+0x384>
 8b2:	8a 2d       	mov	r24, r10
 8b4:	86 78       	andi	r24, 0x86	; 134
 8b6:	51 f0       	breq	.+20     	; 0x8cc <vfprintf+0x386>
 8b8:	a1 fe       	sbrs	r10, 1
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfprintf+0x37a>
 8bc:	8b e2       	ldi	r24, 0x2B	; 43
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <vfprintf+0x37c>
 8c0:	80 e2       	ldi	r24, 0x20	; 32
 8c2:	a7 fc       	sbrc	r10, 7
 8c4:	8d e2       	ldi	r24, 0x2D	; 45
 8c6:	b6 01       	movw	r22, r12
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	50 d0       	rcall	.+160    	; 0x96c <fputc>
 8cc:	89 14       	cp	r8, r9
 8ce:	30 f4       	brcc	.+12     	; 0x8dc <vfprintf+0x396>
 8d0:	b6 01       	movw	r22, r12
 8d2:	80 e3       	ldi	r24, 0x30	; 48
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	4a d0       	rcall	.+148    	; 0x96c <fputc>
 8d8:	9a 94       	dec	r9
 8da:	f8 cf       	rjmp	.-16     	; 0x8cc <vfprintf+0x386>
 8dc:	8a 94       	dec	r8
 8de:	f3 01       	movw	r30, r6
 8e0:	e8 0d       	add	r30, r8
 8e2:	f1 1d       	adc	r31, r1
 8e4:	80 81       	ld	r24, Z
 8e6:	b6 01       	movw	r22, r12
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	40 d0       	rcall	.+128    	; 0x96c <fputc>
 8ec:	81 10       	cpse	r8, r1
 8ee:	f6 cf       	rjmp	.-20     	; 0x8dc <vfprintf+0x396>
 8f0:	22 20       	and	r2, r2
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <vfprintf+0x3b0>
 8f4:	4e ce       	rjmp	.-868    	; 0x592 <vfprintf+0x4c>
 8f6:	b6 01       	movw	r22, r12
 8f8:	80 e2       	ldi	r24, 0x20	; 32
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	37 d0       	rcall	.+110    	; 0x96c <fputc>
 8fe:	2a 94       	dec	r2
 900:	f7 cf       	rjmp	.-18     	; 0x8f0 <vfprintf+0x3aa>
 902:	f6 01       	movw	r30, r12
 904:	86 81       	ldd	r24, Z+6	; 0x06
 906:	97 81       	ldd	r25, Z+7	; 0x07
 908:	02 c0       	rjmp	.+4      	; 0x90e <vfprintf+0x3c8>
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	9f ef       	ldi	r25, 0xFF	; 255
 90e:	2b 96       	adiw	r28, 0x0b	; 11
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	0f 91       	pop	r16
 922:	ff 90       	pop	r15
 924:	ef 90       	pop	r14
 926:	df 90       	pop	r13
 928:	cf 90       	pop	r12
 92a:	bf 90       	pop	r11
 92c:	af 90       	pop	r10
 92e:	9f 90       	pop	r9
 930:	8f 90       	pop	r8
 932:	7f 90       	pop	r7
 934:	6f 90       	pop	r6
 936:	5f 90       	pop	r5
 938:	4f 90       	pop	r4
 93a:	3f 90       	pop	r3
 93c:	2f 90       	pop	r2
 93e:	08 95       	ret

00000940 <strnlen_P>:
 940:	fc 01       	movw	r30, r24
 942:	05 90       	lpm	r0, Z+
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 10       	cpse	r0, r1
 94a:	d8 f7       	brcc	.-10     	; 0x942 <strnlen_P+0x2>
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	8e 0f       	add	r24, r30
 952:	9f 1f       	adc	r25, r31
 954:	08 95       	ret

00000956 <strnlen>:
 956:	fc 01       	movw	r30, r24
 958:	61 50       	subi	r22, 0x01	; 1
 95a:	70 40       	sbci	r23, 0x00	; 0
 95c:	01 90       	ld	r0, Z+
 95e:	01 10       	cpse	r0, r1
 960:	d8 f7       	brcc	.-10     	; 0x958 <strnlen+0x2>
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	8e 0f       	add	r24, r30
 968:	9f 1f       	adc	r25, r31
 96a:	08 95       	ret

0000096c <fputc>:
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	fb 01       	movw	r30, r22
 976:	23 81       	ldd	r18, Z+3	; 0x03
 978:	21 fd       	sbrc	r18, 1
 97a:	03 c0       	rjmp	.+6      	; 0x982 <fputc+0x16>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	2c c0       	rjmp	.+88     	; 0x9da <fputc+0x6e>
 982:	22 ff       	sbrs	r18, 2
 984:	16 c0       	rjmp	.+44     	; 0x9b2 <fputc+0x46>
 986:	46 81       	ldd	r20, Z+6	; 0x06
 988:	57 81       	ldd	r21, Z+7	; 0x07
 98a:	24 81       	ldd	r18, Z+4	; 0x04
 98c:	35 81       	ldd	r19, Z+5	; 0x05
 98e:	42 17       	cp	r20, r18
 990:	53 07       	cpc	r21, r19
 992:	44 f4       	brge	.+16     	; 0x9a4 <fputc+0x38>
 994:	a0 81       	ld	r26, Z
 996:	b1 81       	ldd	r27, Z+1	; 0x01
 998:	9d 01       	movw	r18, r26
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	31 83       	std	Z+1, r19	; 0x01
 9a0:	20 83       	st	Z, r18
 9a2:	8c 93       	st	X, r24
 9a4:	26 81       	ldd	r18, Z+6	; 0x06
 9a6:	37 81       	ldd	r19, Z+7	; 0x07
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	37 83       	std	Z+7, r19	; 0x07
 9ae:	26 83       	std	Z+6, r18	; 0x06
 9b0:	14 c0       	rjmp	.+40     	; 0x9da <fputc+0x6e>
 9b2:	8b 01       	movw	r16, r22
 9b4:	ec 01       	movw	r28, r24
 9b6:	fb 01       	movw	r30, r22
 9b8:	00 84       	ldd	r0, Z+8	; 0x08
 9ba:	f1 85       	ldd	r31, Z+9	; 0x09
 9bc:	e0 2d       	mov	r30, r0
 9be:	09 95       	icall
 9c0:	89 2b       	or	r24, r25
 9c2:	e1 f6       	brne	.-72     	; 0x97c <fputc+0x10>
 9c4:	d8 01       	movw	r26, r16
 9c6:	16 96       	adiw	r26, 0x06	; 6
 9c8:	8d 91       	ld	r24, X+
 9ca:	9c 91       	ld	r25, X
 9cc:	17 97       	sbiw	r26, 0x07	; 7
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	17 96       	adiw	r26, 0x07	; 7
 9d2:	9c 93       	st	X, r25
 9d4:	8e 93       	st	-X, r24
 9d6:	16 97       	sbiw	r26, 0x06	; 6
 9d8:	ce 01       	movw	r24, r28
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	08 95       	ret

000009e4 <__ultoa_invert>:
 9e4:	fa 01       	movw	r30, r20
 9e6:	aa 27       	eor	r26, r26
 9e8:	28 30       	cpi	r18, 0x08	; 8
 9ea:	51 f1       	breq	.+84     	; 0xa40 <__ultoa_invert+0x5c>
 9ec:	20 31       	cpi	r18, 0x10	; 16
 9ee:	81 f1       	breq	.+96     	; 0xa50 <__ultoa_invert+0x6c>
 9f0:	e8 94       	clt
 9f2:	6f 93       	push	r22
 9f4:	6e 7f       	andi	r22, 0xFE	; 254
 9f6:	6e 5f       	subi	r22, 0xFE	; 254
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	af 4f       	sbci	r26, 0xFF	; 255
 a00:	b1 e0       	ldi	r27, 0x01	; 1
 a02:	3e d0       	rcall	.+124    	; 0xa80 <__ultoa_invert+0x9c>
 a04:	b4 e0       	ldi	r27, 0x04	; 4
 a06:	3c d0       	rcall	.+120    	; 0xa80 <__ultoa_invert+0x9c>
 a08:	67 0f       	add	r22, r23
 a0a:	78 1f       	adc	r23, r24
 a0c:	89 1f       	adc	r24, r25
 a0e:	9a 1f       	adc	r25, r26
 a10:	a1 1d       	adc	r26, r1
 a12:	68 0f       	add	r22, r24
 a14:	79 1f       	adc	r23, r25
 a16:	8a 1f       	adc	r24, r26
 a18:	91 1d       	adc	r25, r1
 a1a:	a1 1d       	adc	r26, r1
 a1c:	6a 0f       	add	r22, r26
 a1e:	71 1d       	adc	r23, r1
 a20:	81 1d       	adc	r24, r1
 a22:	91 1d       	adc	r25, r1
 a24:	a1 1d       	adc	r26, r1
 a26:	20 d0       	rcall	.+64     	; 0xa68 <__ultoa_invert+0x84>
 a28:	09 f4       	brne	.+2      	; 0xa2c <__ultoa_invert+0x48>
 a2a:	68 94       	set
 a2c:	3f 91       	pop	r19
 a2e:	2a e0       	ldi	r18, 0x0A	; 10
 a30:	26 9f       	mul	r18, r22
 a32:	11 24       	eor	r1, r1
 a34:	30 19       	sub	r19, r0
 a36:	30 5d       	subi	r19, 0xD0	; 208
 a38:	31 93       	st	Z+, r19
 a3a:	de f6       	brtc	.-74     	; 0x9f2 <__ultoa_invert+0xe>
 a3c:	cf 01       	movw	r24, r30
 a3e:	08 95       	ret
 a40:	46 2f       	mov	r20, r22
 a42:	47 70       	andi	r20, 0x07	; 7
 a44:	40 5d       	subi	r20, 0xD0	; 208
 a46:	41 93       	st	Z+, r20
 a48:	b3 e0       	ldi	r27, 0x03	; 3
 a4a:	0f d0       	rcall	.+30     	; 0xa6a <__ultoa_invert+0x86>
 a4c:	c9 f7       	brne	.-14     	; 0xa40 <__ultoa_invert+0x5c>
 a4e:	f6 cf       	rjmp	.-20     	; 0xa3c <__ultoa_invert+0x58>
 a50:	46 2f       	mov	r20, r22
 a52:	4f 70       	andi	r20, 0x0F	; 15
 a54:	40 5d       	subi	r20, 0xD0	; 208
 a56:	4a 33       	cpi	r20, 0x3A	; 58
 a58:	18 f0       	brcs	.+6      	; 0xa60 <__ultoa_invert+0x7c>
 a5a:	49 5d       	subi	r20, 0xD9	; 217
 a5c:	31 fd       	sbrc	r19, 1
 a5e:	40 52       	subi	r20, 0x20	; 32
 a60:	41 93       	st	Z+, r20
 a62:	02 d0       	rcall	.+4      	; 0xa68 <__ultoa_invert+0x84>
 a64:	a9 f7       	brne	.-22     	; 0xa50 <__ultoa_invert+0x6c>
 a66:	ea cf       	rjmp	.-44     	; 0xa3c <__ultoa_invert+0x58>
 a68:	b4 e0       	ldi	r27, 0x04	; 4
 a6a:	a6 95       	lsr	r26
 a6c:	97 95       	ror	r25
 a6e:	87 95       	ror	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	ba 95       	dec	r27
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0x86>
 a78:	00 97       	sbiw	r24, 0x00	; 0
 a7a:	61 05       	cpc	r22, r1
 a7c:	71 05       	cpc	r23, r1
 a7e:	08 95       	ret
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	0a 2e       	mov	r0, r26
 a86:	06 94       	lsr	r0
 a88:	57 95       	ror	r21
 a8a:	47 95       	ror	r20
 a8c:	37 95       	ror	r19
 a8e:	27 95       	ror	r18
 a90:	ba 95       	dec	r27
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__ultoa_invert+0xa2>
 a94:	62 0f       	add	r22, r18
 a96:	73 1f       	adc	r23, r19
 a98:	84 1f       	adc	r24, r20
 a9a:	95 1f       	adc	r25, r21
 a9c:	a0 1d       	adc	r26, r0
 a9e:	08 95       	ret

00000aa0 <_exit>:
 aa0:	f8 94       	cli

00000aa2 <__stop_program>:
 aa2:	ff cf       	rjmp	.-2      	; 0xaa2 <__stop_program>
