
MyRefreezerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001440  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  000014f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4e  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e15  00000000  00000000  00003336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e45  00000000  00000000  0000414b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a9  00000000  00000000  0000532c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000172a  00000000  00000000  000059d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000070ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c1       	rjmp	.+750    	; 0x300 <__vector_4>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <EINT_set>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e1       	ldi	r29, 0x10	; 16
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	e0 e4       	ldi	r30, 0x40	; 64
      fa:	f4 e1       	ldi	r31, 0x14	; 20
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 32       	cpi	r26, 0x20	; 32
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a0 e2       	ldi	r26, 0x20	; 32
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a4 32       	cpi	r26, 0x24	; 36
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	08 d1       	rcall	.+528    	; 0x32e <main>
     11e:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CLCD_DataTransmitter>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     124:	ef e9       	ldi	r30, 0x9F	; 159
     126:	ff e0       	ldi	r31, 0x0F	; 15
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <CLCD_DataTransmitter+0x4>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <CLCD_DataTransmitter+0xa>
     12e:	00 00       	nop

/*It is a function based on 8bit data bus.*/

void CLCD_DataTransmitter(char data){
	_delay_ms(1);
	PORTE = RS; 
     130:	94 e0       	ldi	r25, 0x04	; 4
     132:	93 b9       	out	0x03, r25	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	f5 e0       	ldi	r31, 0x05	; 5
     136:	fa 95       	dec	r31
     138:	f1 f7       	brne	.-4      	; 0x136 <CLCD_DataTransmitter+0x12>
     13a:	00 00       	nop
	_delay_us(1); 
	PORTE = (RS | E); 
     13c:	95 e0       	ldi	r25, 0x05	; 5
     13e:	93 b9       	out	0x03, r25	; 3
     140:	95 e0       	ldi	r25, 0x05	; 5
     142:	9a 95       	dec	r25
     144:	f1 f7       	brne	.-4      	; 0x142 <CLCD_DataTransmitter+0x1e>
     146:	00 00       	nop
	_delay_us(1);
	PORTB = data; 
     148:	88 bb       	out	0x18, r24	; 24
     14a:	e5 e0       	ldi	r30, 0x05	; 5
     14c:	ea 95       	dec	r30
     14e:	f1 f7       	brne	.-4      	; 0x14c <CLCD_DataTransmitter+0x28>
     150:	00 00       	nop
	_delay_us(1);
	PORTE = RW;	
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	83 b9       	out	0x03, r24	; 3
     156:	08 95       	ret

00000158 <CLCD_Controller>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	2f ef       	ldi	r18, 0xFF	; 255
     15a:	36 e7       	ldi	r19, 0x76	; 118
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	30 40       	sbci	r19, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <CLCD_Controller+0x6>
     166:	00 c0       	rjmp	.+0      	; 0x168 <CLCD_Controller+0x10>
     168:	00 00       	nop
}

void CLCD_Controller(char ctl){
	_delay_ms(30);
	PORTE = 0x00; //RW clear
     16a:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16c:	25 e0       	ldi	r18, 0x05	; 5
     16e:	2a 95       	dec	r18
     170:	f1 f7       	brne	.-4      	; 0x16e <CLCD_Controller+0x16>
     172:	00 00       	nop
	_delay_us(1);
	PORTE = E;
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	93 b9       	out	0x03, r25	; 3
     178:	35 e0       	ldi	r19, 0x05	; 5
     17a:	3a 95       	dec	r19
     17c:	f1 f7       	brne	.-4      	; 0x17a <CLCD_Controller+0x22>
     17e:	00 00       	nop
	_delay_us(1);
	PORTB = ctl;
     180:	88 bb       	out	0x18, r24	; 24
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	8a 95       	dec	r24
     186:	f1 f7       	brne	.-4      	; 0x184 <CLCD_Controller+0x2c>
     188:	00 00       	nop
	_delay_us(1);
	PORTE = (RS | RW);
     18a:	86 e0       	ldi	r24, 0x06	; 6
     18c:	83 b9       	out	0x03, r24	; 3
     18e:	08 95       	ret

00000190 <CLCD_initalizer>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	2f ef       	ldi	r18, 0xFF	; 255
     192:	80 e7       	ldi	r24, 0x70	; 112
     194:	92 e0       	ldi	r25, 0x02	; 2
     196:	21 50       	subi	r18, 0x01	; 1
     198:	80 40       	sbci	r24, 0x00	; 0
     19a:	90 40       	sbci	r25, 0x00	; 0
     19c:	e1 f7       	brne	.-8      	; 0x196 <CLCD_initalizer+0x6>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <CLCD_initalizer+0x10>
     1a0:	00 00       	nop
}

void CLCD_initalizer(void){
	_delay_ms(50);
	CLCD_Controller(FUNC_DISPLAY_LINE_2 | FUNC_DATA_LINE_8);
     1a2:	88 e3       	ldi	r24, 0x38	; 56
     1a4:	d9 df       	rcall	.-78     	; 0x158 <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a6:	25 ed       	ldi	r18, 0xD5	; 213
     1a8:	2a 95       	dec	r18
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <CLCD_initalizer+0x18>
     1ac:	00 00       	nop
	_delay_us(40);
	CLCD_Controller(DISPLAY_ON);
     1ae:	8c e0       	ldi	r24, 0x0C	; 12
     1b0:	d3 df       	rcall	.-90     	; 0x158 <CLCD_Controller>
     1b2:	85 ed       	ldi	r24, 0xD5	; 213
     1b4:	8a 95       	dec	r24
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <CLCD_initalizer+0x24>
	_delay_us(40);
	CLCD_Controller(CLEAR_DISPLAY);
     1b8:	00 00       	nop
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	cd df       	rcall	.-102    	; 0x158 <CLCD_Controller>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	8f e3       	ldi	r24, 0x3F	; 63
     1c0:	9f e1       	ldi	r25, 0x1F	; 31
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <CLCD_initalizer+0x32>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <CLCD_initalizer+0x38>
	_delay_ms(2);
	CLCD_Controller(ENTRY_NO_SHIFT);
     1c8:	00 00       	nop
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	c5 cf       	rjmp	.-118    	; 0x158 <CLCD_Controller>
     1ce:	08 95       	ret

000001d0 <CLCD_putstr>:
}

void CLCD_putstr(char addr, char *str){
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	7b 01       	movw	r14, r22
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
     1de:	08 2f       	mov	r16, r24
     1e0:	00 68       	ori	r16, 0x80	; 128
     1e2:	80 2f       	mov	r24, r16
     1e4:	b9 df       	rcall	.-142    	; 0x158 <CLCD_Controller>
	while(*str != '\0'){
     1e6:	f7 01       	movw	r30, r14
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	89 f0       	breq	.+34     	; 0x210 <CLCD_putstr+0x40>
     1ee:	e7 01       	movw	r28, r14
		if(((addr | CLCD_DD_RAM_BASE) + char_count) == 0x90){
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	0e 19       	sub	r16, r14
     1f4:	1f 09       	sbc	r17, r15
     1f6:	ce 01       	movw	r24, r28
     1f8:	80 0f       	add	r24, r16
     1fa:	91 1f       	adc	r25, r17
     1fc:	80 39       	cpi	r24, 0x90	; 144
     1fe:	91 05       	cpc	r25, r1
     200:	11 f4       	brne	.+4      	; 0x206 <CLCD_putstr+0x36>
			CLCD_Controller(CLCD_DD_RAM_BASE | 0x40);
     202:	80 ec       	ldi	r24, 0xC0	; 192
     204:	a9 df       	rcall	.-174    	; 0x158 <CLCD_Controller>
		}
		CLCD_DataTransmitter(*str);
     206:	89 91       	ld	r24, Y+
     208:	8d df       	rcall	.-230    	; 0x124 <CLCD_DataTransmitter>
     20a:	88 81       	ld	r24, Y

void CLCD_putstr(char addr, char *str){
	int char_count = 0;
	
	CLCD_Controller(addr | CLCD_DD_RAM_BASE);
	while(*str != '\0'){
     20c:	81 11       	cpse	r24, r1
     20e:	f3 cf       	rjmp	.-26     	; 0x1f6 <CLCD_putstr+0x26>
     210:	df 91       	pop	r29
		CLCD_DataTransmitter(*str);
		
		str += 1;
		char_count += 1;
	}
}
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <DisplayHeatsinkTemp>:
     21e:	cf 92       	push	r12

void convertFloattoUint_8(float number, uint8_t *v_uint_8){
	*v_uint_8 = number;
}

void DisplayHeatsinkTemp(float *temp){
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	65 97       	sbiw	r28, 0x15	; 21
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
	uint8_t v_uint_8[4] = {0, };
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	1a 82       	std	Y+2, r1	; 0x02
     242:	1b 82       	std	Y+3, r1	; 0x03
     244:	1c 82       	std	Y+4, r1	; 0x04
	char str[17] = {0, };
     246:	fe 01       	movw	r30, r28
     248:	35 96       	adiw	r30, 0x05	; 5
     24a:	21 e1       	ldi	r18, 0x11	; 17
     24c:	df 01       	movw	r26, r30
     24e:	1d 92       	st	X+, r1
     250:	2a 95       	dec	r18
     252:	e9 f7       	brne	.-6      	; 0x24e <DisplayHeatsinkTemp+0x30>
     254:	7c 01       	movw	r14, r24
     256:	8e 01       	movw	r16, r28
     258:	0f 5f       	subi	r16, 0xFF	; 255
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
     25c:	6f 01       	movw	r12, r30
	
	for(int cnt = 0; cnt < 4; cnt++){
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
     25e:	f7 01       	movw	r30, r14
     260:	61 91       	ld	r22, Z+
     262:	71 91       	ld	r23, Z+
     264:	81 91       	ld	r24, Z+
     266:	91 91       	ld	r25, Z+
     268:	7f 01       	movw	r14, r30
#include "CLCD.h"
#include "sensor.h"
#include "TWI.h"

void convertFloattoUint_8(float number, uint8_t *v_uint_8){
	*v_uint_8 = number;
     26a:	50 d4       	rcall	.+2208   	; 0xb0c <__fixunssfsi>
     26c:	d8 01       	movw	r26, r16
     26e:	6d 93       	st	X+, r22
     270:	8d 01       	movw	r16, r26

void DisplayHeatsinkTemp(float *temp){
	uint8_t v_uint_8[4] = {0, };
	char str[17] = {0, };
	
	for(int cnt = 0; cnt < 4; cnt++){
     272:	ac 15       	cp	r26, r12
     274:	bd 05       	cpc	r27, r13
     276:	99 f7       	brne	.-26     	; 0x25e <DisplayHeatsinkTemp+0x40>
		convertFloattoUint_8(temp[cnt], &(v_uint_8[cnt]));
	}
	
	sprintf(str, "P1:%dC  P2:%dC", v_uint_8[0], v_uint_8[1]);
     278:	8a 81       	ldd	r24, Y+2	; 0x02
     27a:	1f 92       	push	r1
     27c:	8f 93       	push	r24
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	1f 92       	push	r1
     282:	8f 93       	push	r24
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	8e 01       	movw	r16, r28
     28e:	0b 5f       	subi	r16, 0xFB	; 251
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	1f 93       	push	r17
     294:	0f 93       	push	r16
     296:	f7 d5       	rcall	.+3054   	; 0xe86 <sprintf>
	CLCD_putstr(0x00, str);
     298:	b8 01       	movw	r22, r16
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	99 df       	rcall	.-206    	; 0x1d0 <CLCD_putstr>
	
	memset(str, 0x00, 17);
     29e:	81 e1       	ldi	r24, 0x11	; 17
     2a0:	f8 01       	movw	r30, r16
     2a2:	11 92       	st	Z+, r1
     2a4:	8a 95       	dec	r24
     2a6:	e9 f7       	brne	.-6      	; 0x2a2 <DisplayHeatsinkTemp+0x84>
	
	sprintf(str, "P3:%dC  P4:%dC", v_uint_8[2], v_uint_8[3]);
     2a8:	8c 81       	ldd	r24, Y+4	; 0x04
     2aa:	1f 92       	push	r1
     2ac:	8f 93       	push	r24
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	1f 92       	push	r1
     2b2:	8f 93       	push	r24
     2b4:	80 e1       	ldi	r24, 0x10	; 16
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	1f 93       	push	r17
     2be:	0f 93       	push	r16
	CLCD_putstr(0x40, str);
     2c0:	e2 d5       	rcall	.+3012   	; 0xe86 <sprintf>
     2c2:	b8 01       	movw	r22, r16
     2c4:	80 e4       	ldi	r24, 0x40	; 64
     2c6:	84 df       	rcall	.-248    	; 0x1d0 <CLCD_putstr>
}
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	65 96       	adiw	r28, 0x15	; 21
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	08 95       	ret

000002f0 <DisplayInsideTemp_master>:

void DisplayInsideTemp_master(float temp){
	uint8_t v_uint_8 = 0;
	
	convertFloattoUint_8(temp, &v_uint_8);
	TWI_transmit(SLAVE_ADDR, v_uint_8);
     2f0:	0d d4       	rcall	.+2074   	; 0xb0c <__fixunssfsi>
     2f2:	83 e2       	ldi	r24, 0x23	; 35
     2f4:	01 c3       	rjmp	.+1538   	; 0x8f8 <TWI_transmit>
     2f6:	08 95       	ret

000002f8 <DisplayWaringMessage>:
}

void DisplayWaringMessage(void){
	uint8_t val = -127;
	
	TWI_transmit(SLAVE_ADDR, val);
     2f8:	61 e8       	ldi	r22, 0x81	; 129
     2fa:	83 e2       	ldi	r24, 0x23	; 35
     2fc:	fd c2       	rjmp	.+1530   	; 0x8f8 <TWI_transmit>
     2fe:	08 95       	ret

00000300 <__vector_4>:
#define TEMP_LIMIT 120

uint8_t flag_overheat[4] = {0, };
uint8_t powcnt = 1;

ISR(INT3_vect){
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	8f 93       	push	r24
	powcnt += 1;
     30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     310:	8f 5f       	subi	r24, 0xFF	; 255
	if(powcnt == 4){
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	19 f0       	breq	.+6      	; 0x31c <__vector_4+0x1c>

uint8_t flag_overheat[4] = {0, };
uint8_t powcnt = 1;

ISR(INT3_vect){
	powcnt += 1;
     316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     31a:	03 c0       	rjmp	.+6      	; 0x322 <__vector_4+0x22>
	if(powcnt == 4){
		powcnt = 1;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
     322:	8f 91       	pop	r24
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <main>:

int main(void){
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	64 97       	sbiw	r28, 0x14	; 20
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; //SSR (0x0F | 0xFF)
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; //CLCD Databus (0xFF | 0xFF)
     346:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; //status LED (0x0F | 0xFF)
     348:	84 bb       	out	0x14, r24	; 20
	DDRD = (!0x08); //TWI, Switch
     34a:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xFF; //CLCD Control (0x07 | 0xFF)
     34c:	82 b9       	out	0x02, r24	; 2
	DDRF = (!0x1F); //ADC
     34e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x1F; //unused
     352:	8f e1       	ldi	r24, 0x1F	; 31
     354:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	float temp_heatsink[4] = {0, }, temp_inside = 0;
     358:	fe 01       	movw	r30, r28
     35a:	31 96       	adiw	r30, 0x01	; 1
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	df 01       	movw	r26, r30
     360:	1d 92       	st	X+, r1
     362:	8a 95       	dec	r24
     364:	e9 f7       	brne	.-6      	; 0x360 <main+0x32>
	
	PORTA = 0x01;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0xFE;
     36a:	8e ef       	ldi	r24, 0xFE	; 254
     36c:	85 bb       	out	0x15, r24	; 21
	
	CLCD_initalizer();
     36e:	10 df       	rcall	.-480    	; 0x190 <CLCD_initalizer>
	ADC_initializer();
     370:	9f d0       	rcall	.+318    	; 0x4b0 <ADC_initializer>
	TWI_initializer();
     372:	bc d2       	rcall	.+1400   	; 0x8ec <TWI_initializer>
     374:	b5 d2       	rcall	.+1386   	; 0x8e0 <EINT_set>
	EINT_set();
     376:	78 94       	sei
     378:	0f 2e       	mov	r0, r31
	sei();
     37a:	f4 e2       	ldi	r31, 0x24	; 36
     37c:	8f 2e       	mov	r8, r31
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	9f 2e       	mov	r9, r31
     382:	f0 2d       	mov	r31, r0
     384:	77 24       	eor	r7, r7
     386:	73 94       	inc	r7
		temp_heatsink[3] = getHeatsink4Temp();
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
			if(temp_heatsink[cnt] > TEMP_LIMIT){
				flag_overheat[cnt] = 1;
     388:	0f 2e       	mov	r0, r31
     38a:	f0 e2       	ldi	r31, 0x20	; 32
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 30){
				flag_overheat[cnt] = 0;
			}
		}
		
		if(flag_overheat[0] == 1){
     38c:	2f 2e       	mov	r2, r31
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	3f 2e       	mov	r3, r31
     392:	f0 2d       	mov	r31, r0
     394:	c6 d0       	rcall	.+396    	; 0x522 <getHeatsink1Temp>
	TWI_initializer();
	EINT_set();
	sei();
	
    while (1) {
		temp_heatsink[0] = getHeatsink1Temp();
     396:	69 83       	std	Y+1, r22	; 0x01
     398:	7a 83       	std	Y+2, r23	; 0x02
     39a:	8b 83       	std	Y+3, r24	; 0x03
     39c:	9c 83       	std	Y+4, r25	; 0x04
     39e:	21 d1       	rcall	.+578    	; 0x5e2 <getHeatsink2Temp>
		temp_heatsink[1] = getHeatsink2Temp();
     3a0:	6d 83       	std	Y+5, r22	; 0x05
     3a2:	7e 83       	std	Y+6, r23	; 0x06
     3a4:	8f 83       	std	Y+7, r24	; 0x07
     3a6:	98 87       	std	Y+8, r25	; 0x08
     3a8:	7b d1       	rcall	.+758    	; 0x6a0 <getHeatsink3Temp>
		temp_heatsink[2] = getHeatsink3Temp();
     3aa:	69 87       	std	Y+9, r22	; 0x09
     3ac:	7a 87       	std	Y+10, r23	; 0x0a
     3ae:	8b 87       	std	Y+11, r24	; 0x0b
     3b0:	9c 87       	std	Y+12, r25	; 0x0c
     3b2:	d6 d1       	rcall	.+940    	; 0x760 <getHeatsink4Temp>
		temp_heatsink[3] = getHeatsink4Temp();
     3b4:	6d 87       	std	Y+13, r22	; 0x0d
     3b6:	7e 87       	std	Y+14, r23	; 0x0e
     3b8:	8f 87       	std	Y+15, r24	; 0x0f
     3ba:	98 8b       	std	Y+16, r25	; 0x10
     3bc:	31 d2       	rcall	.+1122   	; 0x820 <getInsideTemp>
     3be:	69 8b       	std	Y+17, r22	; 0x11
		temp_inside = getInsideTemp();
     3c0:	7a 8b       	std	Y+18, r23	; 0x12
     3c2:	8b 8b       	std	Y+19, r24	; 0x13
     3c4:	9c 8b       	std	Y+20, r25	; 0x14
     3c6:	fe 01       	movw	r30, r28
     3c8:	31 96       	adiw	r30, 0x01	; 1
     3ca:	5f 01       	movw	r10, r30
     3cc:	00 e2       	ldi	r16, 0x20	; 32
     3ce:	11 e0       	ldi	r17, 0x01	; 1
     3d0:	d5 01       	movw	r26, r10
     3d2:	cd 90       	ld	r12, X+
     3d4:	dd 90       	ld	r13, X+
		
		for(int cnt = 0; cnt < 4; cnt++){
			if(temp_heatsink[cnt] > TEMP_LIMIT){
     3d6:	ed 90       	ld	r14, X+
     3d8:	fd 90       	ld	r15, X+
     3da:	5d 01       	movw	r10, r26
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 ef       	ldi	r20, 0xF0	; 240
     3e2:	52 e4       	ldi	r21, 0x42	; 66
     3e4:	c7 01       	movw	r24, r14
     3e6:	b6 01       	movw	r22, r12
     3e8:	6f d4       	rcall	.+2270   	; 0xcc8 <__gesf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	24 f4       	brge	.+8      	; 0x3f6 <main+0xc8>
     3ee:	f8 01       	movw	r30, r16
     3f0:	70 82       	st	Z, r7
				flag_overheat[cnt] = 1;
     3f2:	82 df       	rcall	.-252    	; 0x2f8 <DisplayWaringMessage>
				DisplayWaringMessage();
     3f4:	0b c0       	rjmp	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
			}
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 30){
     3fa:	44 eb       	ldi	r20, 0xB4	; 180
     3fc:	52 e4       	ldi	r21, 0x42	; 66
     3fe:	c7 01       	movw	r24, r14
     400:	b6 01       	movw	r22, r12
     402:	18 d3       	rcall	.+1584   	; 0xa34 <__cmpsf2>
     404:	88 23       	and	r24, r24
     406:	14 f4       	brge	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	d8 01       	movw	r26, r16
     40a:	1c 92       	st	X, r1
     40c:	0f 5f       	subi	r16, 0xFF	; 255
				flag_overheat[cnt] = 0;
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	08 15       	cp	r16, r8
     412:	19 05       	cpc	r17, r9
     414:	e9 f6       	brne	.-70     	; 0x3d0 <main+0xa2>
		temp_heatsink[1] = getHeatsink2Temp();
		temp_heatsink[2] = getHeatsink3Temp();
		temp_heatsink[3] = getHeatsink4Temp();
		temp_inside = getInsideTemp();
		
		for(int cnt = 0; cnt < 4; cnt++){
     416:	f1 01       	movw	r30, r2
     418:	80 81       	ld	r24, Z
     41a:	81 30       	cpi	r24, 0x01	; 1
			else if(temp_heatsink[cnt] < TEMP_LIMIT - 30){
				flag_overheat[cnt] = 0;
			}
		}
		
		if(flag_overheat[0] == 1){
     41c:	11 f4       	brne	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	d8 98       	cbi	0x1b, 0	; 27
     420:	ab 98       	cbi	0x15, 3	; 21
     422:	d1 01       	movw	r26, r2
			PORTA &= 0xFE; //1111 1110
     424:	11 96       	adiw	r26, 0x01	; 1
			PORTC &= 0xF7; //1111 0111
     426:	8c 91       	ld	r24, X
		}
		if(flag_overheat[1] == 1){
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	d9 98       	cbi	0x1b, 1	; 27
     42e:	aa 98       	cbi	0x15, 2	; 21
     430:	f1 01       	movw	r30, r2
			PORTA &= 0xFD; //1111 1101
     432:	82 81       	ldd	r24, Z+2	; 0x02
			PORTC &= 0xFB; //1111 1011
     434:	81 30       	cpi	r24, 0x01	; 1
		}
		if(flag_overheat[2] == 1){
     436:	11 f4       	brne	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     438:	da 98       	cbi	0x1b, 2	; 27
     43a:	a9 98       	cbi	0x15, 1	; 21
     43c:	d1 01       	movw	r26, r2
			PORTA &= 0xFB; //1111 1011
     43e:	13 96       	adiw	r26, 0x03	; 3
			PORTC &= 0xFD; //1111 1101
     440:	8c 91       	ld	r24, X
		}
		if(flag_overheat[3] == 1){
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	11 f4       	brne	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	db 98       	cbi	0x1b, 3	; 27
     448:	a8 98       	cbi	0x15, 0	; 21
     44a:	f1 01       	movw	r30, r2
			PORTA &= 0xF7; //1111 0111
     44c:	80 81       	ld	r24, Z
			PORTC &= 0xFE; //1111 1110
     44e:	81 11       	cpse	r24, r1
		}
		
		if(flag_overheat[0] == 0 && powcnt == 1){
     450:	06 c0       	rjmp	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     452:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	11 f4       	brne	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	d8 9a       	sbi	0x1b, 0	; 27
     45c:	ab 9a       	sbi	0x15, 3	; 21
     45e:	d1 01       	movw	r26, r2
			PORTA |= 0x01; //0000 0001
     460:	11 96       	adiw	r26, 0x01	; 1
			PORTC |= 0x08; //0000 1000
     462:	8c 91       	ld	r24, X
		}
		if(flag_overheat[1] == 0 && powcnt == 2){
     464:	81 11       	cpse	r24, r1
     466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     468:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	11 f4       	brne	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     470:	d9 9a       	sbi	0x1b, 1	; 27
     472:	aa 9a       	sbi	0x15, 2	; 21
     474:	f1 01       	movw	r30, r2
			PORTA |= 0x02; //0000 0010
     476:	82 81       	ldd	r24, Z+2	; 0x02
			PORTC |= 0x04; //0000 0100
     478:	81 11       	cpse	r24, r1
		}
		if(flag_overheat[2] == 0 && powcnt == 3){
     47a:	06 c0       	rjmp	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     480:	83 30       	cpi	r24, 0x03	; 3
     482:	11 f4       	brne	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     484:	da 9a       	sbi	0x1b, 2	; 27
     486:	a9 9a       	sbi	0x15, 1	; 21
     488:	d1 01       	movw	r26, r2
			PORTA |= 0x04; //0000 0100
     48a:	13 96       	adiw	r26, 0x03	; 3
			PORTC |= 0x02; //0000 0010
     48c:	8c 91       	ld	r24, X
		}
		if(flag_overheat[3] == 0 && powcnt == 4){
     48e:	81 11       	cpse	r24, r1
     490:	06 c0       	rjmp	.+12     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	11 f4       	brne	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49a:	db 9a       	sbi	0x1b, 3	; 27
			PORTA |= 0x08; //0000 1000
     49c:	a8 9a       	sbi	0x15, 0	; 21
			PORTC |= 0x01; //0000 0001
     49e:	ce 01       	movw	r24, r28
		}
		
		DisplayHeatsinkTemp(temp_heatsink);
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	bd de       	rcall	.-646    	; 0x21e <DisplayHeatsinkTemp>
     4a4:	69 89       	ldd	r22, Y+17	; 0x11
     4a6:	7a 89       	ldd	r23, Y+18	; 0x12
		DisplayInsideTemp_master(temp_inside);
     4a8:	8b 89       	ldd	r24, Y+19	; 0x13
     4aa:	9c 89       	ldd	r25, Y+20	; 0x14
     4ac:	21 df       	rcall	.-446    	; 0x2f0 <DisplayInsideTemp_master>
     4ae:	72 cf       	rjmp	.-284    	; 0x394 <main+0x66>

000004b0 <ADC_initializer>:
﻿#include <avr/io.h>
#include <util/delay.h>
#include <math.h>
#include "sensor.h"

void ADC_initializer(void){
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <ADC_initializer+0x6>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <ADC_initializer+0x8>
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	volatile float dummy = 0;
     4bc:	19 82       	std	Y+1, r1	; 0x01
     4be:	1a 82       	std	Y+2, r1	; 0x02
     4c0:	1b 82       	std	Y+3, r1	; 0x03
     4c2:	1c 82       	std	Y+4, r1	; 0x04
	
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     4c4:	87 e8       	ldi	r24, 0x87	; 135
     4c6:	86 b9       	out	0x06, r24	; 6
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
     4ca:	81 ee       	ldi	r24, 0xE1	; 225
     4cc:	94 e0       	ldi	r25, 0x04	; 4
     4ce:	21 50       	subi	r18, 0x01	; 1
     4d0:	80 40       	sbci	r24, 0x00	; 0
     4d2:	90 40       	sbci	r25, 0x00	; 0
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <ADC_initializer+0x1e>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <ADC_initializer+0x28>
     4d8:	00 00       	nop
	_delay_ms(100);
	ADMUX = (1 << MUX0) | (1 << REFS0);
     4da:	81 e4       	ldi	r24, 0x41	; 65
     4dc:	87 b9       	out	0x07, r24	; 7
     4de:	8f e3       	ldi	r24, 0x3F	; 63
     4e0:	9c e9       	ldi	r25, 0x9C	; 156
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <ADC_initializer+0x32>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <ADC_initializer+0x38>
     4e8:	00 00       	nop
	_delay_ms(10);
	
	ADCSRA |= (1 << ADSC);
     4ea:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     4ec:	36 99       	sbic	0x06, 6	; 6
     4ee:	fe cf       	rjmp	.-4      	; 0x4ec <ADC_initializer+0x3c>
	dummy = ADC;
     4f0:	64 b1       	in	r22, 0x04	; 4
     4f2:	75 b1       	in	r23, 0x05	; 5
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	35 d3       	rcall	.+1642   	; 0xb64 <__floatunsisf>
     4fa:	69 83       	std	Y+1, r22	; 0x01
     4fc:	7a 83       	std	Y+2, r23	; 0x02
     4fe:	8b 83       	std	Y+3, r24	; 0x03
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	9f ef       	ldi	r25, 0xFF	; 255
     504:	21 ee       	ldi	r18, 0xE1	; 225
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	91 50       	subi	r25, 0x01	; 1
     50a:	20 40       	sbci	r18, 0x00	; 0
     50c:	80 40       	sbci	r24, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <ADC_initializer+0x58>
     510:	00 c0       	rjmp	.+0      	; 0x512 <ADC_initializer+0x62>
     512:	00 00       	nop
	_delay_ms(100);
}
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <getHeatsink1Temp>:

/*Thremistor: 10KD-5K*/
/*10KD-5K's B-parameter: 4200*/
/*voltage dividing resistor: 2K*/

float getHeatsink1Temp(void){
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX &= 0x00; 
     52e:	87 b1       	in	r24, 0x07	; 7
     530:	17 b8       	out	0x07, r1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	8f e8       	ldi	r24, 0x8F	; 143
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <getHeatsink1Temp+0x14>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <getHeatsink1Temp+0x1a>
     53c:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC); 
     53e:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC)); 
     540:	36 99       	sbic	0x06, 6	; 6
     542:	fe cf       	rjmp	.-4      	; 0x540 <getHeatsink1Temp+0x1e>
     544:	ca e0       	ldi	r28, 0x0A	; 10
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	c1 2c       	mov	r12, r1
     54a:	d1 2c       	mov	r13, r1
     54c:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     54e:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     550:	36 99       	sbic	0x06, 6	; 6
     552:	fe cf       	rjmp	.-4      	; 0x550 <getHeatsink1Temp+0x2e>
		Vo += ADC;
     554:	64 b1       	in	r22, 0x04	; 4
     556:	75 b1       	in	r23, 0x05	; 5
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	03 d3       	rcall	.+1542   	; 0xb64 <__floatunsisf>
     55e:	9b 01       	movw	r18, r22
     560:	ac 01       	movw	r20, r24
     562:	c7 01       	movw	r24, r14
     564:	b6 01       	movw	r22, r12
     566:	02 d2       	rcall	.+1028   	; 0x96c <__addsf3>
     568:	6b 01       	movw	r12, r22
     56a:	7c 01       	movw	r14, r24
     56c:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC); 
	while(ADCSRA & (1 << ADSC)); 
	
	for(int i = 0; i < F_VAL; i++){
     56e:	79 f7       	brne	.-34     	; 0x54e <getHeatsink1Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e2       	ldi	r20, 0x20	; 32
     576:	51 e4       	ldi	r21, 0x41	; 65
     578:	61 d2       	rcall	.+1218   	; 0xa3c <__divsf3>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 ec       	ldi	r23, 0xC0	; 192
     582:	8f e7       	ldi	r24, 0x7F	; 127
     584:	94 e4       	ldi	r25, 0x44	; 68
     586:	5a d2       	rcall	.+1204   	; 0xa3c <__divsf3>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	5f e3       	ldi	r21, 0x3F	; 63
     590:	ec d1       	rcall	.+984    	; 0x96a <__subsf3>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	4a ef       	ldi	r20, 0xFA	; 250
     598:	54 e4       	ldi	r21, 0x44	; 68
     59a:	df d3       	rcall	.+1982   	; 0xd5a <__mulsf3>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e4       	ldi	r19, 0x40	; 64
     5a0:	4c e1       	ldi	r20, 0x1C	; 28
     5a2:	56 e4       	ldi	r21, 0x46	; 70
     5a4:	4b d2       	rcall	.+1174   	; 0xa3c <__divsf3>
     5a6:	99 d3       	rcall	.+1842   	; 0xcda <log>
	Cel = T - 273.15;
	return Cel;
     5a8:	24 e3       	ldi	r18, 0x34	; 52
     5aa:	39 ea       	ldi	r19, 0xA9	; 169
     5ac:	49 e7       	ldi	r20, 0x79	; 121
     5ae:	59 e3       	ldi	r21, 0x39	; 57
     5b0:	d4 d3       	rcall	.+1960   	; 0xd5a <__mulsf3>
     5b2:	2f e0       	ldi	r18, 0x0F	; 15
     5b4:	3f ec       	ldi	r19, 0xCF	; 207
     5b6:	4b e5       	ldi	r20, 0x5B	; 91
     5b8:	5b e3       	ldi	r21, 0x3B	; 59
     5ba:	d8 d1       	rcall	.+944    	; 0x96c <__addsf3>
     5bc:	9b 01       	movw	r18, r22
     5be:	ac 01       	movw	r20, r24
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e8       	ldi	r24, 0x80	; 128
     5c6:	9f e3       	ldi	r25, 0x3F	; 63
     5c8:	39 d2       	rcall	.+1138   	; 0xa3c <__divsf3>
     5ca:	23 e3       	ldi	r18, 0x33	; 51
     5cc:	33 e9       	ldi	r19, 0x93	; 147
     5ce:	48 e8       	ldi	r20, 0x88	; 136
     5d0:	53 e4       	ldi	r21, 0x43	; 67
     5d2:	cb d1       	rcall	.+918    	; 0x96a <__subsf3>
     5d4:	df 91       	pop	r29
}
     5d6:	cf 91       	pop	r28
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <getHeatsink2Temp>:
     5e2:	cf 92       	push	r12

float getHeatsink2Temp(void){ 
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX0 << 1);
     5ee:	17 b8       	out	0x07, r1	; 7
     5f0:	8f e8       	ldi	r24, 0x8F	; 143
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <getHeatsink2Temp+0x12>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <getHeatsink2Temp+0x18>
     5fa:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     5fc:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     5fe:	36 99       	sbic	0x06, 6	; 6
     600:	fe cf       	rjmp	.-4      	; 0x5fe <getHeatsink2Temp+0x1c>
     602:	ca e0       	ldi	r28, 0x0A	; 10
     604:	d0 e0       	ldi	r29, 0x00	; 0
     606:	c1 2c       	mov	r12, r1
     608:	d1 2c       	mov	r13, r1
     60a:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     60c:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     60e:	36 99       	sbic	0x06, 6	; 6
     610:	fe cf       	rjmp	.-4      	; 0x60e <getHeatsink2Temp+0x2c>
		Vo += ADC;
     612:	64 b1       	in	r22, 0x04	; 4
     614:	75 b1       	in	r23, 0x05	; 5
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a4 d2       	rcall	.+1352   	; 0xb64 <__floatunsisf>
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
     620:	c7 01       	movw	r24, r14
     622:	b6 01       	movw	r22, r12
     624:	a3 d1       	rcall	.+838    	; 0x96c <__addsf3>
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
     62a:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     62c:	79 f7       	brne	.-34     	; 0x60c <getHeatsink2Temp+0x2a>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e2       	ldi	r20, 0x20	; 32
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	02 d2       	rcall	.+1028   	; 0xa3c <__divsf3>
     638:	9b 01       	movw	r18, r22
     63a:	ac 01       	movw	r20, r24
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 ec       	ldi	r23, 0xC0	; 192
     640:	8f e7       	ldi	r24, 0x7F	; 127
     642:	94 e4       	ldi	r25, 0x44	; 68
     644:	fb d1       	rcall	.+1014   	; 0xa3c <__divsf3>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e8       	ldi	r20, 0x80	; 128
     64c:	5f e3       	ldi	r21, 0x3F	; 63
     64e:	8d d1       	rcall	.+794    	; 0x96a <__subsf3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4a ef       	ldi	r20, 0xFA	; 250
     656:	54 e4       	ldi	r21, 0x44	; 68
     658:	80 d3       	rcall	.+1792   	; 0xd5a <__mulsf3>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e4       	ldi	r19, 0x40	; 64
     65e:	4c e1       	ldi	r20, 0x1C	; 28
     660:	56 e4       	ldi	r21, 0x46	; 70
     662:	ec d1       	rcall	.+984    	; 0xa3c <__divsf3>
     664:	3a d3       	rcall	.+1652   	; 0xcda <log>
	Cel = T - 273.15;
	return Cel;
     666:	24 e3       	ldi	r18, 0x34	; 52
     668:	39 ea       	ldi	r19, 0xA9	; 169
     66a:	49 e7       	ldi	r20, 0x79	; 121
     66c:	59 e3       	ldi	r21, 0x39	; 57
     66e:	75 d3       	rcall	.+1770   	; 0xd5a <__mulsf3>
     670:	2f e0       	ldi	r18, 0x0F	; 15
     672:	3f ec       	ldi	r19, 0xCF	; 207
     674:	4b e5       	ldi	r20, 0x5B	; 91
     676:	5b e3       	ldi	r21, 0x3B	; 59
     678:	79 d1       	rcall	.+754    	; 0x96c <__addsf3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e8       	ldi	r24, 0x80	; 128
     684:	9f e3       	ldi	r25, 0x3F	; 63
     686:	da d1       	rcall	.+948    	; 0xa3c <__divsf3>
     688:	23 e3       	ldi	r18, 0x33	; 51
     68a:	33 e9       	ldi	r19, 0x93	; 147
     68c:	48 e8       	ldi	r20, 0x88	; 136
     68e:	53 e4       	ldi	r21, 0x43	; 67
     690:	6c d1       	rcall	.+728    	; 0x96a <__subsf3>
     692:	df 91       	pop	r29
}
     694:	cf 91       	pop	r28
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	08 95       	ret

000006a0 <getHeatsink3Temp>:
     6a0:	cf 92       	push	r12

float getHeatsink3Temp(void){
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX1 << 1);
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	87 b9       	out	0x07, r24	; 7
     6b0:	8f e8       	ldi	r24, 0x8F	; 143
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <getHeatsink3Temp+0x14>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <getHeatsink3Temp+0x1a>
     6ba:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     6bc:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     6be:	36 99       	sbic	0x06, 6	; 6
     6c0:	fe cf       	rjmp	.-4      	; 0x6be <getHeatsink3Temp+0x1e>
     6c2:	ca e0       	ldi	r28, 0x0A	; 10
     6c4:	d0 e0       	ldi	r29, 0x00	; 0
     6c6:	c1 2c       	mov	r12, r1
     6c8:	d1 2c       	mov	r13, r1
     6ca:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     6cc:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     6ce:	36 99       	sbic	0x06, 6	; 6
     6d0:	fe cf       	rjmp	.-4      	; 0x6ce <getHeatsink3Temp+0x2e>
		Vo += ADC;
     6d2:	64 b1       	in	r22, 0x04	; 4
     6d4:	75 b1       	in	r23, 0x05	; 5
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	44 d2       	rcall	.+1160   	; 0xb64 <__floatunsisf>
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	c7 01       	movw	r24, r14
     6e2:	b6 01       	movw	r22, r12
     6e4:	43 d1       	rcall	.+646    	; 0x96c <__addsf3>
     6e6:	6b 01       	movw	r12, r22
     6e8:	7c 01       	movw	r14, r24
     6ea:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     6ec:	79 f7       	brne	.-34     	; 0x6cc <getHeatsink3Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e2       	ldi	r20, 0x20	; 32
     6f4:	51 e4       	ldi	r21, 0x41	; 65
     6f6:	a2 d1       	rcall	.+836    	; 0xa3c <__divsf3>
     6f8:	9b 01       	movw	r18, r22
     6fa:	ac 01       	movw	r20, r24
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 ec       	ldi	r23, 0xC0	; 192
     700:	8f e7       	ldi	r24, 0x7F	; 127
     702:	94 e4       	ldi	r25, 0x44	; 68
     704:	9b d1       	rcall	.+822    	; 0xa3c <__divsf3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e8       	ldi	r20, 0x80	; 128
     70c:	5f e3       	ldi	r21, 0x3F	; 63
     70e:	2d d1       	rcall	.+602    	; 0x96a <__subsf3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4a ef       	ldi	r20, 0xFA	; 250
     716:	54 e4       	ldi	r21, 0x44	; 68
     718:	20 d3       	rcall	.+1600   	; 0xd5a <__mulsf3>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e4       	ldi	r19, 0x40	; 64
     71e:	4c e1       	ldi	r20, 0x1C	; 28
     720:	56 e4       	ldi	r21, 0x46	; 70
     722:	8c d1       	rcall	.+792    	; 0xa3c <__divsf3>
     724:	da d2       	rcall	.+1460   	; 0xcda <log>
	Cel = T - 273.15;
	return Cel;
     726:	24 e3       	ldi	r18, 0x34	; 52
     728:	39 ea       	ldi	r19, 0xA9	; 169
     72a:	49 e7       	ldi	r20, 0x79	; 121
     72c:	59 e3       	ldi	r21, 0x39	; 57
     72e:	15 d3       	rcall	.+1578   	; 0xd5a <__mulsf3>
     730:	2f e0       	ldi	r18, 0x0F	; 15
     732:	3f ec       	ldi	r19, 0xCF	; 207
     734:	4b e5       	ldi	r20, 0x5B	; 91
     736:	5b e3       	ldi	r21, 0x3B	; 59
     738:	19 d1       	rcall	.+562    	; 0x96c <__addsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	80 e8       	ldi	r24, 0x80	; 128
     744:	9f e3       	ldi	r25, 0x3F	; 63
     746:	7a d1       	rcall	.+756    	; 0xa3c <__divsf3>
     748:	23 e3       	ldi	r18, 0x33	; 51
     74a:	33 e9       	ldi	r19, 0x93	; 147
     74c:	48 e8       	ldi	r20, 0x88	; 136
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	0c d1       	rcall	.+536    	; 0x96a <__subsf3>
     752:	df 91       	pop	r29
}
     754:	cf 91       	pop	r28
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <getHeatsink4Temp>:
     760:	cf 92       	push	r12

float getHeatsink4Temp(void){
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX0 << 1) | (MUX1 << 1);
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	87 b9       	out	0x07, r24	; 7
     770:	8f e8       	ldi	r24, 0x8F	; 143
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <getHeatsink4Temp+0x14>
     778:	00 c0       	rjmp	.+0      	; 0x77a <getHeatsink4Temp+0x1a>
     77a:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     77c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     77e:	36 99       	sbic	0x06, 6	; 6
     780:	fe cf       	rjmp	.-4      	; 0x77e <getHeatsink4Temp+0x1e>
     782:	ca e0       	ldi	r28, 0x0A	; 10
     784:	d0 e0       	ldi	r29, 0x00	; 0
     786:	c1 2c       	mov	r12, r1
     788:	d1 2c       	mov	r13, r1
     78a:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     78c:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     78e:	36 99       	sbic	0x06, 6	; 6
     790:	fe cf       	rjmp	.-4      	; 0x78e <getHeatsink4Temp+0x2e>
		Vo += ADC;
     792:	64 b1       	in	r22, 0x04	; 4
     794:	75 b1       	in	r23, 0x05	; 5
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	e4 d1       	rcall	.+968    	; 0xb64 <__floatunsisf>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	e3 d0       	rcall	.+454    	; 0x96c <__addsf3>
     7a6:	6b 01       	movw	r12, r22
     7a8:	7c 01       	movw	r14, r24
     7aa:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     7ac:	79 f7       	brne	.-34     	; 0x78c <getHeatsink4Temp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e2       	ldi	r20, 0x20	; 32
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	42 d1       	rcall	.+644    	; 0xa3c <__divsf3>
     7b8:	9b 01       	movw	r18, r22
     7ba:	ac 01       	movw	r20, r24
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 ec       	ldi	r23, 0xC0	; 192
     7c0:	8f e7       	ldi	r24, 0x7F	; 127
     7c2:	94 e4       	ldi	r25, 0x44	; 68
     7c4:	3b d1       	rcall	.+630    	; 0xa3c <__divsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e8       	ldi	r20, 0x80	; 128
     7cc:	5f e3       	ldi	r21, 0x3F	; 63
     7ce:	cd d0       	rcall	.+410    	; 0x96a <__subsf3>
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	4a ef       	ldi	r20, 0xFA	; 250
     7d6:	54 e4       	ldi	r21, 0x44	; 68
     7d8:	c0 d2       	rcall	.+1408   	; 0xd5a <__mulsf3>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e4       	ldi	r19, 0x40	; 64
     7de:	4c e1       	ldi	r20, 0x1C	; 28
     7e0:	56 e4       	ldi	r21, 0x46	; 70
     7e2:	2c d1       	rcall	.+600    	; 0xa3c <__divsf3>
     7e4:	7a d2       	rcall	.+1268   	; 0xcda <log>
	Cel = T - 273.15;
	return Cel;
     7e6:	24 e3       	ldi	r18, 0x34	; 52
     7e8:	39 ea       	ldi	r19, 0xA9	; 169
     7ea:	49 e7       	ldi	r20, 0x79	; 121
     7ec:	59 e3       	ldi	r21, 0x39	; 57
     7ee:	b5 d2       	rcall	.+1386   	; 0xd5a <__mulsf3>
     7f0:	2f e0       	ldi	r18, 0x0F	; 15
     7f2:	3f ec       	ldi	r19, 0xCF	; 207
     7f4:	4b e5       	ldi	r20, 0x5B	; 91
     7f6:	5b e3       	ldi	r21, 0x3B	; 59
     7f8:	b9 d0       	rcall	.+370    	; 0x96c <__addsf3>
     7fa:	9b 01       	movw	r18, r22
     7fc:	ac 01       	movw	r20, r24
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e8       	ldi	r24, 0x80	; 128
     804:	9f e3       	ldi	r25, 0x3F	; 63
     806:	1a d1       	rcall	.+564    	; 0xa3c <__divsf3>
     808:	23 e3       	ldi	r18, 0x33	; 51
     80a:	33 e9       	ldi	r19, 0x93	; 147
     80c:	48 e8       	ldi	r20, 0x88	; 136
     80e:	53 e4       	ldi	r21, 0x43	; 67
     810:	ac d0       	rcall	.+344    	; 0x96a <__subsf3>
     812:	df 91       	pop	r29
}
     814:	cf 91       	pop	r28
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <getInsideTemp>:
     820:	cf 92       	push	r12

float getInsideTemp(void){ 
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
	float Vo = 0;
	float T0 = 298.15, R = 2000.0, R0 = 10000, B = 4200;
	float Rt = 0, T = 0, Cel = 0;
	
	ADMUX = (MUX2 << 1);
     82c:	84 e0       	ldi	r24, 0x04	; 4
     82e:	87 b9       	out	0x07, r24	; 7
     830:	8f e8       	ldi	r24, 0x8F	; 143
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <getInsideTemp+0x14>
     838:	00 c0       	rjmp	.+0      	; 0x83a <getInsideTemp+0x1a>
     83a:	00 00       	nop
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
     83c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     83e:	36 99       	sbic	0x06, 6	; 6
     840:	fe cf       	rjmp	.-4      	; 0x83e <getInsideTemp+0x1e>
     842:	ca e0       	ldi	r28, 0x0A	; 10
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	76 01       	movw	r14, r12
	
	for(int i = 0; i < F_VAL; i++){
		ADCSRA = ADCSRA | (1 << ADSC);
     84c:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1 << ADSC));
     84e:	36 99       	sbic	0x06, 6	; 6
     850:	fe cf       	rjmp	.-4      	; 0x84e <getInsideTemp+0x2e>
		Vo += ADC;
     852:	64 b1       	in	r22, 0x04	; 4
     854:	75 b1       	in	r23, 0x05	; 5
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	84 d1       	rcall	.+776    	; 0xb64 <__floatunsisf>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	83 d0       	rcall	.+262    	; 0x96c <__addsf3>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
     86a:	21 97       	sbiw	r28, 0x01	; 1
	_delay_us(100);
	
	ADCSRA = ADCSRA | (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	
	for(int i = 0; i < F_VAL; i++){
     86c:	79 f7       	brne	.-34     	; 0x84c <getInsideTemp+0x2c>
	}
	
	Vo /= F_VAL;
	Rt = R*(1023.0/(float)Vo - 1.0);
	
	T = 1.0/((1.0/T0) + (1/B)*log((Rt/R0)));
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e2       	ldi	r20, 0x20	; 32
     874:	51 e4       	ldi	r21, 0x41	; 65
     876:	e2 d0       	rcall	.+452    	; 0xa3c <__divsf3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 ec       	ldi	r23, 0xC0	; 192
     880:	8f e7       	ldi	r24, 0x7F	; 127
     882:	94 e4       	ldi	r25, 0x44	; 68
     884:	db d0       	rcall	.+438    	; 0xa3c <__divsf3>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	6d d0       	rcall	.+218    	; 0x96a <__subsf3>
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	4a ef       	ldi	r20, 0xFA	; 250
     896:	54 e4       	ldi	r21, 0x44	; 68
     898:	60 d2       	rcall	.+1216   	; 0xd5a <__mulsf3>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e4       	ldi	r19, 0x40	; 64
     89e:	4c e1       	ldi	r20, 0x1C	; 28
     8a0:	56 e4       	ldi	r21, 0x46	; 70
     8a2:	cc d0       	rcall	.+408    	; 0xa3c <__divsf3>
     8a4:	1a d2       	rcall	.+1076   	; 0xcda <log>
	Cel = T - 273.15;
	return Cel;
     8a6:	24 e3       	ldi	r18, 0x34	; 52
     8a8:	39 ea       	ldi	r19, 0xA9	; 169
     8aa:	49 e7       	ldi	r20, 0x79	; 121
     8ac:	59 e3       	ldi	r21, 0x39	; 57
     8ae:	55 d2       	rcall	.+1194   	; 0xd5a <__mulsf3>
     8b0:	2f e0       	ldi	r18, 0x0F	; 15
     8b2:	3f ec       	ldi	r19, 0xCF	; 207
     8b4:	4b e5       	ldi	r20, 0x5B	; 91
     8b6:	5b e3       	ldi	r21, 0x3B	; 59
     8b8:	59 d0       	rcall	.+178    	; 0x96c <__addsf3>
     8ba:	9b 01       	movw	r18, r22
     8bc:	ac 01       	movw	r20, r24
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e8       	ldi	r24, 0x80	; 128
     8c4:	9f e3       	ldi	r25, 0x3F	; 63
     8c6:	ba d0       	rcall	.+372    	; 0xa3c <__divsf3>
     8c8:	23 e3       	ldi	r18, 0x33	; 51
     8ca:	33 e9       	ldi	r19, 0x93	; 147
     8cc:	48 e8       	ldi	r20, 0x88	; 136
     8ce:	53 e4       	ldi	r21, 0x43	; 67
     8d0:	4c d0       	rcall	.+152    	; 0x96a <__subsf3>
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	08 95       	ret

000008e0 <EINT_set>:
﻿#include <avr/io.h>
#include <avr/interrupt.h>

void EINT_set(void){
	EICRA = (1 << ISC31);
     8e0:	80 e8       	ldi	r24, 0x80	; 128
     8e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = (1 << INT3);
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	89 bf       	out	0x39, r24	; 57
     8ea:	08 95       	ret

000008ec <TWI_initializer>:
﻿#include <avr/io.h>
#include <util/delay.h>
#include "TWI.h"

void TWI_initializer(void){
	TWBR = 12;
     8ec:	8c e0       	ldi	r24, 0x0C	; 12
     8ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TWSR = 0x00;
     8f2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     8f6:	08 95       	ret

000008f8 <TWI_transmit>:
}

void TWI_transmit(uint8_t slave_addr, uint8_t data){
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); //transmit start signal
     8f8:	94 ea       	ldi	r25, 0xA4	; 164
     8fa:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0) || (TWSR & 0xF8) != 0x08); //check status register
     8fe:	e4 e7       	ldi	r30, 0x74	; 116
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	a1 e7       	ldi	r26, 0x71	; 113
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	90 81       	ld	r25, Z
     908:	99 23       	and	r25, r25
     90a:	ec f7       	brge	.-6      	; 0x906 <TWI_transmit+0xe>
     90c:	9c 91       	ld	r25, X
     90e:	98 7f       	andi	r25, 0xF8	; 248
     910:	98 30       	cpi	r25, 0x08	; 8
     912:	c9 f7       	brne	.-14     	; 0x906 <TWI_transmit+0xe>
     914:	9a e0       	ldi	r25, 0x0A	; 10
     916:	9a 95       	dec	r25
     918:	f1 f7       	brne	.-4      	; 0x916 <TWI_transmit+0x1e>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <TWI_transmit+0x24>
	
	_delay_us(2); 
	TWDR = (slave_addr << 1) & 0xFE; //TWD0 clear
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); //TWI enable & Transmit TWDR
     926:	84 e8       	ldi	r24, 0x84	; 132
     928:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0) || (TWSR & 0xF8) != 0x18); //wait ACK signal
     92c:	e4 e7       	ldi	r30, 0x74	; 116
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	a1 e7       	ldi	r26, 0x71	; 113
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	88 23       	and	r24, r24
     938:	ec f7       	brge	.-6      	; 0x934 <TWI_transmit+0x3c>
     93a:	8c 91       	ld	r24, X
     93c:	88 7f       	andi	r24, 0xF8	; 248
     93e:	88 31       	cpi	r24, 0x18	; 24
     940:	c9 f7       	brne	.-14     	; 0x934 <TWI_transmit+0x3c>
	
	TWDR = data; 
     942:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN); //TWI enable & Transmit data
     946:	84 e8       	ldi	r24, 0x84	; 132
     948:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0) || (TWSR & 0xF8) != 0x28); //wait ACK signal
     94c:	e4 e7       	ldi	r30, 0x74	; 116
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	a1 e7       	ldi	r26, 0x71	; 113
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	88 23       	and	r24, r24
     958:	ec f7       	brge	.-6      	; 0x954 <TWI_transmit+0x5c>
     95a:	8c 91       	ld	r24, X
     95c:	88 7f       	andi	r24, 0xF8	; 248
     95e:	88 32       	cpi	r24, 0x28	; 40
     960:	c9 f7       	brne	.-14     	; 0x954 <TWI_transmit+0x5c>
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); //transmit end signal
     962:	84 e9       	ldi	r24, 0x94	; 148
     964:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     968:	08 95       	ret

0000096a <__subsf3>:
     96a:	50 58       	subi	r21, 0x80	; 128

0000096c <__addsf3>:
     96c:	bb 27       	eor	r27, r27
     96e:	aa 27       	eor	r26, r26
     970:	0e d0       	rcall	.+28     	; 0x98e <__addsf3x>
     972:	70 c1       	rjmp	.+736    	; 0xc54 <__fp_round>
     974:	61 d1       	rcall	.+706    	; 0xc38 <__fp_pscA>
     976:	30 f0       	brcs	.+12     	; 0x984 <__addsf3+0x18>
     978:	66 d1       	rcall	.+716    	; 0xc46 <__fp_pscB>
     97a:	20 f0       	brcs	.+8      	; 0x984 <__addsf3+0x18>
     97c:	31 f4       	brne	.+12     	; 0x98a <__addsf3+0x1e>
     97e:	9f 3f       	cpi	r25, 0xFF	; 255
     980:	11 f4       	brne	.+4      	; 0x986 <__addsf3+0x1a>
     982:	1e f4       	brtc	.+6      	; 0x98a <__addsf3+0x1e>
     984:	56 c1       	rjmp	.+684    	; 0xc32 <__fp_nan>
     986:	0e f4       	brtc	.+2      	; 0x98a <__addsf3+0x1e>
     988:	e0 95       	com	r30
     98a:	e7 fb       	bst	r30, 7
     98c:	4c c1       	rjmp	.+664    	; 0xc26 <__fp_inf>

0000098e <__addsf3x>:
     98e:	e9 2f       	mov	r30, r25
     990:	72 d1       	rcall	.+740    	; 0xc76 <__fp_split3>
     992:	80 f3       	brcs	.-32     	; 0x974 <__addsf3+0x8>
     994:	ba 17       	cp	r27, r26
     996:	62 07       	cpc	r22, r18
     998:	73 07       	cpc	r23, r19
     99a:	84 07       	cpc	r24, r20
     99c:	95 07       	cpc	r25, r21
     99e:	18 f0       	brcs	.+6      	; 0x9a6 <__addsf3x+0x18>
     9a0:	71 f4       	brne	.+28     	; 0x9be <__addsf3x+0x30>
     9a2:	9e f5       	brtc	.+102    	; 0xa0a <__addsf3x+0x7c>
     9a4:	8a c1       	rjmp	.+788    	; 0xcba <__fp_zero>
     9a6:	0e f4       	brtc	.+2      	; 0x9aa <__addsf3x+0x1c>
     9a8:	e0 95       	com	r30
     9aa:	0b 2e       	mov	r0, r27
     9ac:	ba 2f       	mov	r27, r26
     9ae:	a0 2d       	mov	r26, r0
     9b0:	0b 01       	movw	r0, r22
     9b2:	b9 01       	movw	r22, r18
     9b4:	90 01       	movw	r18, r0
     9b6:	0c 01       	movw	r0, r24
     9b8:	ca 01       	movw	r24, r20
     9ba:	a0 01       	movw	r20, r0
     9bc:	11 24       	eor	r1, r1
     9be:	ff 27       	eor	r31, r31
     9c0:	59 1b       	sub	r21, r25
     9c2:	99 f0       	breq	.+38     	; 0x9ea <__addsf3x+0x5c>
     9c4:	59 3f       	cpi	r21, 0xF9	; 249
     9c6:	50 f4       	brcc	.+20     	; 0x9dc <__addsf3x+0x4e>
     9c8:	50 3e       	cpi	r21, 0xE0	; 224
     9ca:	68 f1       	brcs	.+90     	; 0xa26 <__addsf3x+0x98>
     9cc:	1a 16       	cp	r1, r26
     9ce:	f0 40       	sbci	r31, 0x00	; 0
     9d0:	a2 2f       	mov	r26, r18
     9d2:	23 2f       	mov	r18, r19
     9d4:	34 2f       	mov	r19, r20
     9d6:	44 27       	eor	r20, r20
     9d8:	58 5f       	subi	r21, 0xF8	; 248
     9da:	f3 cf       	rjmp	.-26     	; 0x9c2 <__addsf3x+0x34>
     9dc:	46 95       	lsr	r20
     9de:	37 95       	ror	r19
     9e0:	27 95       	ror	r18
     9e2:	a7 95       	ror	r26
     9e4:	f0 40       	sbci	r31, 0x00	; 0
     9e6:	53 95       	inc	r21
     9e8:	c9 f7       	brne	.-14     	; 0x9dc <__addsf3x+0x4e>
     9ea:	7e f4       	brtc	.+30     	; 0xa0a <__addsf3x+0x7c>
     9ec:	1f 16       	cp	r1, r31
     9ee:	ba 0b       	sbc	r27, r26
     9f0:	62 0b       	sbc	r22, r18
     9f2:	73 0b       	sbc	r23, r19
     9f4:	84 0b       	sbc	r24, r20
     9f6:	ba f0       	brmi	.+46     	; 0xa26 <__addsf3x+0x98>
     9f8:	91 50       	subi	r25, 0x01	; 1
     9fa:	a1 f0       	breq	.+40     	; 0xa24 <__addsf3x+0x96>
     9fc:	ff 0f       	add	r31, r31
     9fe:	bb 1f       	adc	r27, r27
     a00:	66 1f       	adc	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	88 1f       	adc	r24, r24
     a06:	c2 f7       	brpl	.-16     	; 0x9f8 <__addsf3x+0x6a>
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <__addsf3x+0x98>
     a0a:	ba 0f       	add	r27, r26
     a0c:	62 1f       	adc	r22, r18
     a0e:	73 1f       	adc	r23, r19
     a10:	84 1f       	adc	r24, r20
     a12:	48 f4       	brcc	.+18     	; 0xa26 <__addsf3x+0x98>
     a14:	87 95       	ror	r24
     a16:	77 95       	ror	r23
     a18:	67 95       	ror	r22
     a1a:	b7 95       	ror	r27
     a1c:	f7 95       	ror	r31
     a1e:	9e 3f       	cpi	r25, 0xFE	; 254
     a20:	08 f0       	brcs	.+2      	; 0xa24 <__addsf3x+0x96>
     a22:	b3 cf       	rjmp	.-154    	; 0x98a <__addsf3+0x1e>
     a24:	93 95       	inc	r25
     a26:	88 0f       	add	r24, r24
     a28:	08 f0       	brcs	.+2      	; 0xa2c <__addsf3x+0x9e>
     a2a:	99 27       	eor	r25, r25
     a2c:	ee 0f       	add	r30, r30
     a2e:	97 95       	ror	r25
     a30:	87 95       	ror	r24
     a32:	08 95       	ret

00000a34 <__cmpsf2>:
     a34:	d4 d0       	rcall	.+424    	; 0xbde <__fp_cmp>
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__cmpsf2+0x6>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	08 95       	ret

00000a3c <__divsf3>:
     a3c:	0c d0       	rcall	.+24     	; 0xa56 <__divsf3x>
     a3e:	0a c1       	rjmp	.+532    	; 0xc54 <__fp_round>
     a40:	02 d1       	rcall	.+516    	; 0xc46 <__fp_pscB>
     a42:	40 f0       	brcs	.+16     	; 0xa54 <__divsf3+0x18>
     a44:	f9 d0       	rcall	.+498    	; 0xc38 <__fp_pscA>
     a46:	30 f0       	brcs	.+12     	; 0xa54 <__divsf3+0x18>
     a48:	21 f4       	brne	.+8      	; 0xa52 <__divsf3+0x16>
     a4a:	5f 3f       	cpi	r21, 0xFF	; 255
     a4c:	19 f0       	breq	.+6      	; 0xa54 <__divsf3+0x18>
     a4e:	eb c0       	rjmp	.+470    	; 0xc26 <__fp_inf>
     a50:	51 11       	cpse	r21, r1
     a52:	34 c1       	rjmp	.+616    	; 0xcbc <__fp_szero>
     a54:	ee c0       	rjmp	.+476    	; 0xc32 <__fp_nan>

00000a56 <__divsf3x>:
     a56:	0f d1       	rcall	.+542    	; 0xc76 <__fp_split3>
     a58:	98 f3       	brcs	.-26     	; 0xa40 <__divsf3+0x4>

00000a5a <__divsf3_pse>:
     a5a:	99 23       	and	r25, r25
     a5c:	c9 f3       	breq	.-14     	; 0xa50 <__divsf3+0x14>
     a5e:	55 23       	and	r21, r21
     a60:	b1 f3       	breq	.-20     	; 0xa4e <__divsf3+0x12>
     a62:	95 1b       	sub	r25, r21
     a64:	55 0b       	sbc	r21, r21
     a66:	bb 27       	eor	r27, r27
     a68:	aa 27       	eor	r26, r26
     a6a:	62 17       	cp	r22, r18
     a6c:	73 07       	cpc	r23, r19
     a6e:	84 07       	cpc	r24, r20
     a70:	38 f0       	brcs	.+14     	; 0xa80 <__divsf3_pse+0x26>
     a72:	9f 5f       	subi	r25, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	22 0f       	add	r18, r18
     a78:	33 1f       	adc	r19, r19
     a7a:	44 1f       	adc	r20, r20
     a7c:	aa 1f       	adc	r26, r26
     a7e:	a9 f3       	breq	.-22     	; 0xa6a <__divsf3_pse+0x10>
     a80:	33 d0       	rcall	.+102    	; 0xae8 <__divsf3_pse+0x8e>
     a82:	0e 2e       	mov	r0, r30
     a84:	3a f0       	brmi	.+14     	; 0xa94 <__divsf3_pse+0x3a>
     a86:	e0 e8       	ldi	r30, 0x80	; 128
     a88:	30 d0       	rcall	.+96     	; 0xaea <__divsf3_pse+0x90>
     a8a:	91 50       	subi	r25, 0x01	; 1
     a8c:	50 40       	sbci	r21, 0x00	; 0
     a8e:	e6 95       	lsr	r30
     a90:	00 1c       	adc	r0, r0
     a92:	ca f7       	brpl	.-14     	; 0xa86 <__divsf3_pse+0x2c>
     a94:	29 d0       	rcall	.+82     	; 0xae8 <__divsf3_pse+0x8e>
     a96:	fe 2f       	mov	r31, r30
     a98:	27 d0       	rcall	.+78     	; 0xae8 <__divsf3_pse+0x8e>
     a9a:	66 0f       	add	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	88 1f       	adc	r24, r24
     aa0:	bb 1f       	adc	r27, r27
     aa2:	26 17       	cp	r18, r22
     aa4:	37 07       	cpc	r19, r23
     aa6:	48 07       	cpc	r20, r24
     aa8:	ab 07       	cpc	r26, r27
     aaa:	b0 e8       	ldi	r27, 0x80	; 128
     aac:	09 f0       	breq	.+2      	; 0xab0 <__divsf3_pse+0x56>
     aae:	bb 0b       	sbc	r27, r27
     ab0:	80 2d       	mov	r24, r0
     ab2:	bf 01       	movw	r22, r30
     ab4:	ff 27       	eor	r31, r31
     ab6:	93 58       	subi	r25, 0x83	; 131
     ab8:	5f 4f       	sbci	r21, 0xFF	; 255
     aba:	2a f0       	brmi	.+10     	; 0xac6 <__divsf3_pse+0x6c>
     abc:	9e 3f       	cpi	r25, 0xFE	; 254
     abe:	51 05       	cpc	r21, r1
     ac0:	68 f0       	brcs	.+26     	; 0xadc <__divsf3_pse+0x82>
     ac2:	b1 c0       	rjmp	.+354    	; 0xc26 <__fp_inf>
     ac4:	fb c0       	rjmp	.+502    	; 0xcbc <__fp_szero>
     ac6:	5f 3f       	cpi	r21, 0xFF	; 255
     ac8:	ec f3       	brlt	.-6      	; 0xac4 <__divsf3_pse+0x6a>
     aca:	98 3e       	cpi	r25, 0xE8	; 232
     acc:	dc f3       	brlt	.-10     	; 0xac4 <__divsf3_pse+0x6a>
     ace:	86 95       	lsr	r24
     ad0:	77 95       	ror	r23
     ad2:	67 95       	ror	r22
     ad4:	b7 95       	ror	r27
     ad6:	f7 95       	ror	r31
     ad8:	9f 5f       	subi	r25, 0xFF	; 255
     ada:	c9 f7       	brne	.-14     	; 0xace <__divsf3_pse+0x74>
     adc:	88 0f       	add	r24, r24
     ade:	91 1d       	adc	r25, r1
     ae0:	96 95       	lsr	r25
     ae2:	87 95       	ror	r24
     ae4:	97 f9       	bld	r25, 7
     ae6:	08 95       	ret
     ae8:	e1 e0       	ldi	r30, 0x01	; 1
     aea:	66 0f       	add	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	88 1f       	adc	r24, r24
     af0:	bb 1f       	adc	r27, r27
     af2:	62 17       	cp	r22, r18
     af4:	73 07       	cpc	r23, r19
     af6:	84 07       	cpc	r24, r20
     af8:	ba 07       	cpc	r27, r26
     afa:	20 f0       	brcs	.+8      	; 0xb04 <__divsf3_pse+0xaa>
     afc:	62 1b       	sub	r22, r18
     afe:	73 0b       	sbc	r23, r19
     b00:	84 0b       	sbc	r24, r20
     b02:	ba 0b       	sbc	r27, r26
     b04:	ee 1f       	adc	r30, r30
     b06:	88 f7       	brcc	.-30     	; 0xaea <__divsf3_pse+0x90>
     b08:	e0 95       	com	r30
     b0a:	08 95       	ret

00000b0c <__fixunssfsi>:
     b0c:	bc d0       	rcall	.+376    	; 0xc86 <__fp_splitA>
     b0e:	88 f0       	brcs	.+34     	; 0xb32 <__fixunssfsi+0x26>
     b10:	9f 57       	subi	r25, 0x7F	; 127
     b12:	90 f0       	brcs	.+36     	; 0xb38 <__fixunssfsi+0x2c>
     b14:	b9 2f       	mov	r27, r25
     b16:	99 27       	eor	r25, r25
     b18:	b7 51       	subi	r27, 0x17	; 23
     b1a:	a0 f0       	brcs	.+40     	; 0xb44 <__fixunssfsi+0x38>
     b1c:	d1 f0       	breq	.+52     	; 0xb52 <__fixunssfsi+0x46>
     b1e:	66 0f       	add	r22, r22
     b20:	77 1f       	adc	r23, r23
     b22:	88 1f       	adc	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	1a f0       	brmi	.+6      	; 0xb2e <__fixunssfsi+0x22>
     b28:	ba 95       	dec	r27
     b2a:	c9 f7       	brne	.-14     	; 0xb1e <__fixunssfsi+0x12>
     b2c:	12 c0       	rjmp	.+36     	; 0xb52 <__fixunssfsi+0x46>
     b2e:	b1 30       	cpi	r27, 0x01	; 1
     b30:	81 f0       	breq	.+32     	; 0xb52 <__fixunssfsi+0x46>
     b32:	c3 d0       	rcall	.+390    	; 0xcba <__fp_zero>
     b34:	b1 e0       	ldi	r27, 0x01	; 1
     b36:	08 95       	ret
     b38:	c0 c0       	rjmp	.+384    	; 0xcba <__fp_zero>
     b3a:	67 2f       	mov	r22, r23
     b3c:	78 2f       	mov	r23, r24
     b3e:	88 27       	eor	r24, r24
     b40:	b8 5f       	subi	r27, 0xF8	; 248
     b42:	39 f0       	breq	.+14     	; 0xb52 <__fixunssfsi+0x46>
     b44:	b9 3f       	cpi	r27, 0xF9	; 249
     b46:	cc f3       	brlt	.-14     	; 0xb3a <__fixunssfsi+0x2e>
     b48:	86 95       	lsr	r24
     b4a:	77 95       	ror	r23
     b4c:	67 95       	ror	r22
     b4e:	b3 95       	inc	r27
     b50:	d9 f7       	brne	.-10     	; 0xb48 <__fixunssfsi+0x3c>
     b52:	3e f4       	brtc	.+14     	; 0xb62 <__fixunssfsi+0x56>
     b54:	90 95       	com	r25
     b56:	80 95       	com	r24
     b58:	70 95       	com	r23
     b5a:	61 95       	neg	r22
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	8f 4f       	sbci	r24, 0xFF	; 255
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	08 95       	ret

00000b64 <__floatunsisf>:
     b64:	e8 94       	clt
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <__floatsisf+0x12>

00000b68 <__floatsisf>:
     b68:	97 fb       	bst	r25, 7
     b6a:	3e f4       	brtc	.+14     	; 0xb7a <__floatsisf+0x12>
     b6c:	90 95       	com	r25
     b6e:	80 95       	com	r24
     b70:	70 95       	com	r23
     b72:	61 95       	neg	r22
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	99 23       	and	r25, r25
     b7c:	a9 f0       	breq	.+42     	; 0xba8 <__floatsisf+0x40>
     b7e:	f9 2f       	mov	r31, r25
     b80:	96 e9       	ldi	r25, 0x96	; 150
     b82:	bb 27       	eor	r27, r27
     b84:	93 95       	inc	r25
     b86:	f6 95       	lsr	r31
     b88:	87 95       	ror	r24
     b8a:	77 95       	ror	r23
     b8c:	67 95       	ror	r22
     b8e:	b7 95       	ror	r27
     b90:	f1 11       	cpse	r31, r1
     b92:	f8 cf       	rjmp	.-16     	; 0xb84 <__floatsisf+0x1c>
     b94:	fa f4       	brpl	.+62     	; 0xbd4 <__floatsisf+0x6c>
     b96:	bb 0f       	add	r27, r27
     b98:	11 f4       	brne	.+4      	; 0xb9e <__floatsisf+0x36>
     b9a:	60 ff       	sbrs	r22, 0
     b9c:	1b c0       	rjmp	.+54     	; 0xbd4 <__floatsisf+0x6c>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	16 c0       	rjmp	.+44     	; 0xbd4 <__floatsisf+0x6c>
     ba8:	88 23       	and	r24, r24
     baa:	11 f0       	breq	.+4      	; 0xbb0 <__floatsisf+0x48>
     bac:	96 e9       	ldi	r25, 0x96	; 150
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <__floatsisf+0x6a>
     bb0:	77 23       	and	r23, r23
     bb2:	21 f0       	breq	.+8      	; 0xbbc <__floatsisf+0x54>
     bb4:	9e e8       	ldi	r25, 0x8E	; 142
     bb6:	87 2f       	mov	r24, r23
     bb8:	76 2f       	mov	r23, r22
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__floatsisf+0x5e>
     bbc:	66 23       	and	r22, r22
     bbe:	71 f0       	breq	.+28     	; 0xbdc <__floatsisf+0x74>
     bc0:	96 e8       	ldi	r25, 0x86	; 134
     bc2:	86 2f       	mov	r24, r22
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	2a f0       	brmi	.+10     	; 0xbd4 <__floatsisf+0x6c>
     bca:	9a 95       	dec	r25
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	88 1f       	adc	r24, r24
     bd2:	da f7       	brpl	.-10     	; 0xbca <__floatsisf+0x62>
     bd4:	88 0f       	add	r24, r24
     bd6:	96 95       	lsr	r25
     bd8:	87 95       	ror	r24
     bda:	97 f9       	bld	r25, 7
     bdc:	08 95       	ret

00000bde <__fp_cmp>:
     bde:	99 0f       	add	r25, r25
     be0:	00 08       	sbc	r0, r0
     be2:	55 0f       	add	r21, r21
     be4:	aa 0b       	sbc	r26, r26
     be6:	e0 e8       	ldi	r30, 0x80	; 128
     be8:	fe ef       	ldi	r31, 0xFE	; 254
     bea:	16 16       	cp	r1, r22
     bec:	17 06       	cpc	r1, r23
     bee:	e8 07       	cpc	r30, r24
     bf0:	f9 07       	cpc	r31, r25
     bf2:	c0 f0       	brcs	.+48     	; 0xc24 <__fp_cmp+0x46>
     bf4:	12 16       	cp	r1, r18
     bf6:	13 06       	cpc	r1, r19
     bf8:	e4 07       	cpc	r30, r20
     bfa:	f5 07       	cpc	r31, r21
     bfc:	98 f0       	brcs	.+38     	; 0xc24 <__fp_cmp+0x46>
     bfe:	62 1b       	sub	r22, r18
     c00:	73 0b       	sbc	r23, r19
     c02:	84 0b       	sbc	r24, r20
     c04:	95 0b       	sbc	r25, r21
     c06:	39 f4       	brne	.+14     	; 0xc16 <__fp_cmp+0x38>
     c08:	0a 26       	eor	r0, r26
     c0a:	61 f0       	breq	.+24     	; 0xc24 <__fp_cmp+0x46>
     c0c:	23 2b       	or	r18, r19
     c0e:	24 2b       	or	r18, r20
     c10:	25 2b       	or	r18, r21
     c12:	21 f4       	brne	.+8      	; 0xc1c <__fp_cmp+0x3e>
     c14:	08 95       	ret
     c16:	0a 26       	eor	r0, r26
     c18:	09 f4       	brne	.+2      	; 0xc1c <__fp_cmp+0x3e>
     c1a:	a1 40       	sbci	r26, 0x01	; 1
     c1c:	a6 95       	lsr	r26
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	81 1d       	adc	r24, r1
     c22:	81 1d       	adc	r24, r1
     c24:	08 95       	ret

00000c26 <__fp_inf>:
     c26:	97 f9       	bld	r25, 7
     c28:	9f 67       	ori	r25, 0x7F	; 127
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	08 95       	ret

00000c32 <__fp_nan>:
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	80 ec       	ldi	r24, 0xC0	; 192
     c36:	08 95       	ret

00000c38 <__fp_pscA>:
     c38:	00 24       	eor	r0, r0
     c3a:	0a 94       	dec	r0
     c3c:	16 16       	cp	r1, r22
     c3e:	17 06       	cpc	r1, r23
     c40:	18 06       	cpc	r1, r24
     c42:	09 06       	cpc	r0, r25
     c44:	08 95       	ret

00000c46 <__fp_pscB>:
     c46:	00 24       	eor	r0, r0
     c48:	0a 94       	dec	r0
     c4a:	12 16       	cp	r1, r18
     c4c:	13 06       	cpc	r1, r19
     c4e:	14 06       	cpc	r1, r20
     c50:	05 06       	cpc	r0, r21
     c52:	08 95       	ret

00000c54 <__fp_round>:
     c54:	09 2e       	mov	r0, r25
     c56:	03 94       	inc	r0
     c58:	00 0c       	add	r0, r0
     c5a:	11 f4       	brne	.+4      	; 0xc60 <__fp_round+0xc>
     c5c:	88 23       	and	r24, r24
     c5e:	52 f0       	brmi	.+20     	; 0xc74 <__fp_round+0x20>
     c60:	bb 0f       	add	r27, r27
     c62:	40 f4       	brcc	.+16     	; 0xc74 <__fp_round+0x20>
     c64:	bf 2b       	or	r27, r31
     c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0x18>
     c68:	60 ff       	sbrs	r22, 0
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__fp_round+0x20>
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	8f 4f       	sbci	r24, 0xFF	; 255
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	08 95       	ret

00000c76 <__fp_split3>:
     c76:	57 fd       	sbrc	r21, 7
     c78:	90 58       	subi	r25, 0x80	; 128
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	59 f0       	breq	.+22     	; 0xc96 <__fp_splitA+0x10>
     c80:	5f 3f       	cpi	r21, 0xFF	; 255
     c82:	71 f0       	breq	.+28     	; 0xca0 <__fp_splitA+0x1a>
     c84:	47 95       	ror	r20

00000c86 <__fp_splitA>:
     c86:	88 0f       	add	r24, r24
     c88:	97 fb       	bst	r25, 7
     c8a:	99 1f       	adc	r25, r25
     c8c:	61 f0       	breq	.+24     	; 0xca6 <__fp_splitA+0x20>
     c8e:	9f 3f       	cpi	r25, 0xFF	; 255
     c90:	79 f0       	breq	.+30     	; 0xcb0 <__fp_splitA+0x2a>
     c92:	87 95       	ror	r24
     c94:	08 95       	ret
     c96:	12 16       	cp	r1, r18
     c98:	13 06       	cpc	r1, r19
     c9a:	14 06       	cpc	r1, r20
     c9c:	55 1f       	adc	r21, r21
     c9e:	f2 cf       	rjmp	.-28     	; 0xc84 <__fp_split3+0xe>
     ca0:	46 95       	lsr	r20
     ca2:	f1 df       	rcall	.-30     	; 0xc86 <__fp_splitA>
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <__fp_splitA+0x30>
     ca6:	16 16       	cp	r1, r22
     ca8:	17 06       	cpc	r1, r23
     caa:	18 06       	cpc	r1, r24
     cac:	99 1f       	adc	r25, r25
     cae:	f1 cf       	rjmp	.-30     	; 0xc92 <__fp_splitA+0xc>
     cb0:	86 95       	lsr	r24
     cb2:	71 05       	cpc	r23, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	08 94       	sec
     cb8:	08 95       	ret

00000cba <__fp_zero>:
     cba:	e8 94       	clt

00000cbc <__fp_szero>:
     cbc:	bb 27       	eor	r27, r27
     cbe:	66 27       	eor	r22, r22
     cc0:	77 27       	eor	r23, r23
     cc2:	cb 01       	movw	r24, r22
     cc4:	97 f9       	bld	r25, 7
     cc6:	08 95       	ret

00000cc8 <__gesf2>:
     cc8:	8a df       	rcall	.-236    	; 0xbde <__fp_cmp>
     cca:	08 f4       	brcc	.+2      	; 0xcce <__gesf2+0x6>
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	08 95       	ret
     cd0:	0e f0       	brts	.+2      	; 0xcd4 <__gesf2+0xc>
     cd2:	a6 c0       	rjmp	.+332    	; 0xe20 <__fp_mpack>
     cd4:	ae cf       	rjmp	.-164    	; 0xc32 <__fp_nan>
     cd6:	68 94       	set
     cd8:	a6 cf       	rjmp	.-180    	; 0xc26 <__fp_inf>

00000cda <log>:
     cda:	d5 df       	rcall	.-86     	; 0xc86 <__fp_splitA>
     cdc:	c8 f3       	brcs	.-14     	; 0xcd0 <__gesf2+0x8>
     cde:	99 23       	and	r25, r25
     ce0:	d1 f3       	breq	.-12     	; 0xcd6 <__gesf2+0xe>
     ce2:	c6 f3       	brts	.-16     	; 0xcd4 <__gesf2+0xc>
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	1f 93       	push	r17
     cea:	0f 93       	push	r16
     cec:	ff 92       	push	r15
     cee:	c9 2f       	mov	r28, r25
     cf0:	dd 27       	eor	r29, r29
     cf2:	88 23       	and	r24, r24
     cf4:	2a f0       	brmi	.+10     	; 0xd00 <log+0x26>
     cf6:	21 97       	sbiw	r28, 0x01	; 1
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	da f7       	brpl	.-10     	; 0xcf6 <log+0x1c>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e8       	ldi	r20, 0x80	; 128
     d06:	5f eb       	ldi	r21, 0xBF	; 191
     d08:	9f e3       	ldi	r25, 0x3F	; 63
     d0a:	88 39       	cpi	r24, 0x98	; 152
     d0c:	20 f0       	brcs	.+8      	; 0xd16 <log+0x3c>
     d0e:	80 3e       	cpi	r24, 0xE0	; 224
     d10:	30 f0       	brcs	.+12     	; 0xd1e <log+0x44>
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	2a de       	rcall	.-940    	; 0x96c <__addsf3>
     d18:	ec e8       	ldi	r30, 0x8C	; 140
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <log+0x4a>
     d1e:	26 de       	rcall	.-948    	; 0x96c <__addsf3>
     d20:	e9 eb       	ldi	r30, 0xB9	; 185
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	8b d0       	rcall	.+278    	; 0xe3c <__fp_powser>
     d26:	8b 01       	movw	r16, r22
     d28:	be 01       	movw	r22, r28
     d2a:	ec 01       	movw	r28, r24
     d2c:	fb 2e       	mov	r15, r27
     d2e:	6f 57       	subi	r22, 0x7F	; 127
     d30:	71 09       	sbc	r23, r1
     d32:	75 95       	asr	r23
     d34:	77 1f       	adc	r23, r23
     d36:	88 0b       	sbc	r24, r24
     d38:	99 0b       	sbc	r25, r25
     d3a:	16 df       	rcall	.-468    	; 0xb68 <__floatsisf>
     d3c:	28 e1       	ldi	r18, 0x18	; 24
     d3e:	32 e7       	ldi	r19, 0x72	; 114
     d40:	41 e3       	ldi	r20, 0x31	; 49
     d42:	5f e3       	ldi	r21, 0x3F	; 63
     d44:	16 d0       	rcall	.+44     	; 0xd72 <__mulsf3x>
     d46:	af 2d       	mov	r26, r15
     d48:	98 01       	movw	r18, r16
     d4a:	ae 01       	movw	r20, r28
     d4c:	ff 90       	pop	r15
     d4e:	0f 91       	pop	r16
     d50:	1f 91       	pop	r17
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	1b de       	rcall	.-970    	; 0x98e <__addsf3x>
     d58:	7d cf       	rjmp	.-262    	; 0xc54 <__fp_round>

00000d5a <__mulsf3>:
     d5a:	0b d0       	rcall	.+22     	; 0xd72 <__mulsf3x>
     d5c:	7b cf       	rjmp	.-266    	; 0xc54 <__fp_round>
     d5e:	6c df       	rcall	.-296    	; 0xc38 <__fp_pscA>
     d60:	28 f0       	brcs	.+10     	; 0xd6c <__mulsf3+0x12>
     d62:	71 df       	rcall	.-286    	; 0xc46 <__fp_pscB>
     d64:	18 f0       	brcs	.+6      	; 0xd6c <__mulsf3+0x12>
     d66:	95 23       	and	r25, r21
     d68:	09 f0       	breq	.+2      	; 0xd6c <__mulsf3+0x12>
     d6a:	5d cf       	rjmp	.-326    	; 0xc26 <__fp_inf>
     d6c:	62 cf       	rjmp	.-316    	; 0xc32 <__fp_nan>
     d6e:	11 24       	eor	r1, r1
     d70:	a5 cf       	rjmp	.-182    	; 0xcbc <__fp_szero>

00000d72 <__mulsf3x>:
     d72:	81 df       	rcall	.-254    	; 0xc76 <__fp_split3>
     d74:	a0 f3       	brcs	.-24     	; 0xd5e <__mulsf3+0x4>

00000d76 <__mulsf3_pse>:
     d76:	95 9f       	mul	r25, r21
     d78:	d1 f3       	breq	.-12     	; 0xd6e <__mulsf3+0x14>
     d7a:	95 0f       	add	r25, r21
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	55 1f       	adc	r21, r21
     d80:	62 9f       	mul	r22, r18
     d82:	f0 01       	movw	r30, r0
     d84:	72 9f       	mul	r23, r18
     d86:	bb 27       	eor	r27, r27
     d88:	f0 0d       	add	r31, r0
     d8a:	b1 1d       	adc	r27, r1
     d8c:	63 9f       	mul	r22, r19
     d8e:	aa 27       	eor	r26, r26
     d90:	f0 0d       	add	r31, r0
     d92:	b1 1d       	adc	r27, r1
     d94:	aa 1f       	adc	r26, r26
     d96:	64 9f       	mul	r22, r20
     d98:	66 27       	eor	r22, r22
     d9a:	b0 0d       	add	r27, r0
     d9c:	a1 1d       	adc	r26, r1
     d9e:	66 1f       	adc	r22, r22
     da0:	82 9f       	mul	r24, r18
     da2:	22 27       	eor	r18, r18
     da4:	b0 0d       	add	r27, r0
     da6:	a1 1d       	adc	r26, r1
     da8:	62 1f       	adc	r22, r18
     daa:	73 9f       	mul	r23, r19
     dac:	b0 0d       	add	r27, r0
     dae:	a1 1d       	adc	r26, r1
     db0:	62 1f       	adc	r22, r18
     db2:	83 9f       	mul	r24, r19
     db4:	a0 0d       	add	r26, r0
     db6:	61 1d       	adc	r22, r1
     db8:	22 1f       	adc	r18, r18
     dba:	74 9f       	mul	r23, r20
     dbc:	33 27       	eor	r19, r19
     dbe:	a0 0d       	add	r26, r0
     dc0:	61 1d       	adc	r22, r1
     dc2:	23 1f       	adc	r18, r19
     dc4:	84 9f       	mul	r24, r20
     dc6:	60 0d       	add	r22, r0
     dc8:	21 1d       	adc	r18, r1
     dca:	82 2f       	mov	r24, r18
     dcc:	76 2f       	mov	r23, r22
     dce:	6a 2f       	mov	r22, r26
     dd0:	11 24       	eor	r1, r1
     dd2:	9f 57       	subi	r25, 0x7F	; 127
     dd4:	50 40       	sbci	r21, 0x00	; 0
     dd6:	8a f0       	brmi	.+34     	; 0xdfa <__mulsf3_pse+0x84>
     dd8:	e1 f0       	breq	.+56     	; 0xe12 <__mulsf3_pse+0x9c>
     dda:	88 23       	and	r24, r24
     ddc:	4a f0       	brmi	.+18     	; 0xdf0 <__mulsf3_pse+0x7a>
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	bb 1f       	adc	r27, r27
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	91 50       	subi	r25, 0x01	; 1
     dec:	50 40       	sbci	r21, 0x00	; 0
     dee:	a9 f7       	brne	.-22     	; 0xdda <__mulsf3_pse+0x64>
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	51 05       	cpc	r21, r1
     df4:	70 f0       	brcs	.+28     	; 0xe12 <__mulsf3_pse+0x9c>
     df6:	17 cf       	rjmp	.-466    	; 0xc26 <__fp_inf>
     df8:	61 cf       	rjmp	.-318    	; 0xcbc <__fp_szero>
     dfa:	5f 3f       	cpi	r21, 0xFF	; 255
     dfc:	ec f3       	brlt	.-6      	; 0xdf8 <__mulsf3_pse+0x82>
     dfe:	98 3e       	cpi	r25, 0xE8	; 232
     e00:	dc f3       	brlt	.-10     	; 0xdf8 <__mulsf3_pse+0x82>
     e02:	86 95       	lsr	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b7 95       	ror	r27
     e0a:	f7 95       	ror	r31
     e0c:	e7 95       	ror	r30
     e0e:	9f 5f       	subi	r25, 0xFF	; 255
     e10:	c1 f7       	brne	.-16     	; 0xe02 <__mulsf3_pse+0x8c>
     e12:	fe 2b       	or	r31, r30
     e14:	88 0f       	add	r24, r24
     e16:	91 1d       	adc	r25, r1
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	97 f9       	bld	r25, 7
     e1e:	08 95       	ret

00000e20 <__fp_mpack>:
     e20:	9f 3f       	cpi	r25, 0xFF	; 255
     e22:	31 f0       	breq	.+12     	; 0xe30 <__fp_mpack_finite+0xc>

00000e24 <__fp_mpack_finite>:
     e24:	91 50       	subi	r25, 0x01	; 1
     e26:	20 f4       	brcc	.+8      	; 0xe30 <__fp_mpack_finite+0xc>
     e28:	87 95       	ror	r24
     e2a:	77 95       	ror	r23
     e2c:	67 95       	ror	r22
     e2e:	b7 95       	ror	r27
     e30:	88 0f       	add	r24, r24
     e32:	91 1d       	adc	r25, r1
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret

00000e3c <__fp_powser>:
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	1f 93       	push	r17
     e42:	0f 93       	push	r16
     e44:	ff 92       	push	r15
     e46:	ef 92       	push	r14
     e48:	df 92       	push	r13
     e4a:	7b 01       	movw	r14, r22
     e4c:	8c 01       	movw	r16, r24
     e4e:	68 94       	set
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <__fp_powser+0x20>
     e52:	da 2e       	mov	r13, r26
     e54:	ef 01       	movw	r28, r30
     e56:	8d df       	rcall	.-230    	; 0xd72 <__mulsf3x>
     e58:	fe 01       	movw	r30, r28
     e5a:	e8 94       	clt
     e5c:	a5 91       	lpm	r26, Z+
     e5e:	25 91       	lpm	r18, Z+
     e60:	35 91       	lpm	r19, Z+
     e62:	45 91       	lpm	r20, Z+
     e64:	55 91       	lpm	r21, Z+
     e66:	ae f3       	brts	.-22     	; 0xe52 <__fp_powser+0x16>
     e68:	ef 01       	movw	r28, r30
     e6a:	91 dd       	rcall	.-1246   	; 0x98e <__addsf3x>
     e6c:	fe 01       	movw	r30, r28
     e6e:	97 01       	movw	r18, r14
     e70:	a8 01       	movw	r20, r16
     e72:	da 94       	dec	r13
     e74:	79 f7       	brne	.-34     	; 0xe54 <__fp_powser+0x18>
     e76:	df 90       	pop	r13
     e78:	ef 90       	pop	r14
     e7a:	ff 90       	pop	r15
     e7c:	0f 91       	pop	r16
     e7e:	1f 91       	pop	r17
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <sprintf>:
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	2e 97       	sbiw	r28, 0x0e	; 14
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	0d 89       	ldd	r16, Y+21	; 0x15
     ea0:	1e 89       	ldd	r17, Y+22	; 0x16
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	8c 83       	std	Y+4, r24	; 0x04
     ea6:	1a 83       	std	Y+2, r17	; 0x02
     ea8:	09 83       	std	Y+1, r16	; 0x01
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9f e7       	ldi	r25, 0x7F	; 127
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	ae 01       	movw	r20, r28
     eb4:	47 5e       	subi	r20, 0xE7	; 231
     eb6:	5f 4f       	sbci	r21, 0xFF	; 255
     eb8:	6f 89       	ldd	r22, Y+23	; 0x17
     eba:	78 8d       	ldd	r23, Y+24	; 0x18
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	10 d0       	rcall	.+32     	; 0xee2 <vfprintf>
     ec2:	ef 81       	ldd	r30, Y+7	; 0x07
     ec4:	f8 85       	ldd	r31, Y+8	; 0x08
     ec6:	e0 0f       	add	r30, r16
     ec8:	f1 1f       	adc	r31, r17
     eca:	10 82       	st	Z, r1
     ecc:	2e 96       	adiw	r28, 0x0e	; 14
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <vfprintf>:
     ee2:	2f 92       	push	r2
     ee4:	3f 92       	push	r3
     ee6:	4f 92       	push	r4
     ee8:	5f 92       	push	r5
     eea:	6f 92       	push	r6
     eec:	7f 92       	push	r7
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2b 97       	sbiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	6c 01       	movw	r12, r24
     f18:	7b 01       	movw	r14, r22
     f1a:	8a 01       	movw	r16, r20
     f1c:	fc 01       	movw	r30, r24
     f1e:	17 82       	std	Z+7, r1	; 0x07
     f20:	16 82       	std	Z+6, r1	; 0x06
     f22:	83 81       	ldd	r24, Z+3	; 0x03
     f24:	81 ff       	sbrs	r24, 1
     f26:	bf c1       	rjmp	.+894    	; 0x12a6 <__stack+0x1a7>
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	3c 01       	movw	r6, r24
     f2e:	f6 01       	movw	r30, r12
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	f7 01       	movw	r30, r14
     f34:	93 fd       	sbrc	r25, 3
     f36:	85 91       	lpm	r24, Z+
     f38:	93 ff       	sbrs	r25, 3
     f3a:	81 91       	ld	r24, Z+
     f3c:	7f 01       	movw	r14, r30
     f3e:	88 23       	and	r24, r24
     f40:	09 f4       	brne	.+2      	; 0xf44 <vfprintf+0x62>
     f42:	ad c1       	rjmp	.+858    	; 0x129e <__stack+0x19f>
     f44:	85 32       	cpi	r24, 0x25	; 37
     f46:	39 f4       	brne	.+14     	; 0xf56 <vfprintf+0x74>
     f48:	93 fd       	sbrc	r25, 3
     f4a:	85 91       	lpm	r24, Z+
     f4c:	93 ff       	sbrs	r25, 3
     f4e:	81 91       	ld	r24, Z+
     f50:	7f 01       	movw	r14, r30
     f52:	85 32       	cpi	r24, 0x25	; 37
     f54:	21 f4       	brne	.+8      	; 0xf5e <vfprintf+0x7c>
     f56:	b6 01       	movw	r22, r12
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	d6 d1       	rcall	.+940    	; 0x1308 <fputc>
     f5c:	e8 cf       	rjmp	.-48     	; 0xf2e <vfprintf+0x4c>
     f5e:	91 2c       	mov	r9, r1
     f60:	21 2c       	mov	r2, r1
     f62:	31 2c       	mov	r3, r1
     f64:	ff e1       	ldi	r31, 0x1F	; 31
     f66:	f3 15       	cp	r31, r3
     f68:	d8 f0       	brcs	.+54     	; 0xfa0 <vfprintf+0xbe>
     f6a:	8b 32       	cpi	r24, 0x2B	; 43
     f6c:	79 f0       	breq	.+30     	; 0xf8c <vfprintf+0xaa>
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <vfprintf+0x9c>
     f70:	80 32       	cpi	r24, 0x20	; 32
     f72:	79 f0       	breq	.+30     	; 0xf92 <vfprintf+0xb0>
     f74:	83 32       	cpi	r24, 0x23	; 35
     f76:	a1 f4       	brne	.+40     	; 0xfa0 <vfprintf+0xbe>
     f78:	23 2d       	mov	r18, r3
     f7a:	20 61       	ori	r18, 0x10	; 16
     f7c:	1d c0       	rjmp	.+58     	; 0xfb8 <vfprintf+0xd6>
     f7e:	8d 32       	cpi	r24, 0x2D	; 45
     f80:	61 f0       	breq	.+24     	; 0xf9a <vfprintf+0xb8>
     f82:	80 33       	cpi	r24, 0x30	; 48
     f84:	69 f4       	brne	.+26     	; 0xfa0 <vfprintf+0xbe>
     f86:	23 2d       	mov	r18, r3
     f88:	21 60       	ori	r18, 0x01	; 1
     f8a:	16 c0       	rjmp	.+44     	; 0xfb8 <vfprintf+0xd6>
     f8c:	83 2d       	mov	r24, r3
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	38 2e       	mov	r3, r24
     f92:	e3 2d       	mov	r30, r3
     f94:	e4 60       	ori	r30, 0x04	; 4
     f96:	3e 2e       	mov	r3, r30
     f98:	2a c0       	rjmp	.+84     	; 0xfee <vfprintf+0x10c>
     f9a:	f3 2d       	mov	r31, r3
     f9c:	f8 60       	ori	r31, 0x08	; 8
     f9e:	1d c0       	rjmp	.+58     	; 0xfda <vfprintf+0xf8>
     fa0:	37 fc       	sbrc	r3, 7
     fa2:	2d c0       	rjmp	.+90     	; 0xffe <vfprintf+0x11c>
     fa4:	20 ed       	ldi	r18, 0xD0	; 208
     fa6:	28 0f       	add	r18, r24
     fa8:	2a 30       	cpi	r18, 0x0A	; 10
     faa:	40 f0       	brcs	.+16     	; 0xfbc <vfprintf+0xda>
     fac:	8e 32       	cpi	r24, 0x2E	; 46
     fae:	b9 f4       	brne	.+46     	; 0xfde <vfprintf+0xfc>
     fb0:	36 fc       	sbrc	r3, 6
     fb2:	75 c1       	rjmp	.+746    	; 0x129e <__stack+0x19f>
     fb4:	23 2d       	mov	r18, r3
     fb6:	20 64       	ori	r18, 0x40	; 64
     fb8:	32 2e       	mov	r3, r18
     fba:	19 c0       	rjmp	.+50     	; 0xfee <vfprintf+0x10c>
     fbc:	36 fe       	sbrs	r3, 6
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <vfprintf+0xea>
     fc0:	8a e0       	ldi	r24, 0x0A	; 10
     fc2:	98 9e       	mul	r9, r24
     fc4:	20 0d       	add	r18, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	92 2e       	mov	r9, r18
     fca:	11 c0       	rjmp	.+34     	; 0xfee <vfprintf+0x10c>
     fcc:	ea e0       	ldi	r30, 0x0A	; 10
     fce:	2e 9e       	mul	r2, r30
     fd0:	20 0d       	add	r18, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	22 2e       	mov	r2, r18
     fd6:	f3 2d       	mov	r31, r3
     fd8:	f0 62       	ori	r31, 0x20	; 32
     fda:	3f 2e       	mov	r3, r31
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <vfprintf+0x10c>
     fde:	8c 36       	cpi	r24, 0x6C	; 108
     fe0:	21 f4       	brne	.+8      	; 0xfea <vfprintf+0x108>
     fe2:	83 2d       	mov	r24, r3
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	38 2e       	mov	r3, r24
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <vfprintf+0x10c>
     fea:	88 36       	cpi	r24, 0x68	; 104
     fec:	41 f4       	brne	.+16     	; 0xffe <vfprintf+0x11c>
     fee:	f7 01       	movw	r30, r14
     ff0:	93 fd       	sbrc	r25, 3
     ff2:	85 91       	lpm	r24, Z+
     ff4:	93 ff       	sbrs	r25, 3
     ff6:	81 91       	ld	r24, Z+
     ff8:	7f 01       	movw	r14, r30
     ffa:	81 11       	cpse	r24, r1
     ffc:	b3 cf       	rjmp	.-154    	; 0xf64 <vfprintf+0x82>
     ffe:	98 2f       	mov	r25, r24
    1000:	9f 7d       	andi	r25, 0xDF	; 223
    1002:	95 54       	subi	r25, 0x45	; 69
    1004:	93 30       	cpi	r25, 0x03	; 3
    1006:	28 f4       	brcc	.+10     	; 0x1012 <vfprintf+0x130>
    1008:	0c 5f       	subi	r16, 0xFC	; 252
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	9f e3       	ldi	r25, 0x3F	; 63
    100e:	99 83       	std	Y+1, r25	; 0x01
    1010:	0d c0       	rjmp	.+26     	; 0x102c <vfprintf+0x14a>
    1012:	83 36       	cpi	r24, 0x63	; 99
    1014:	31 f0       	breq	.+12     	; 0x1022 <vfprintf+0x140>
    1016:	83 37       	cpi	r24, 0x73	; 115
    1018:	71 f0       	breq	.+28     	; 0x1036 <vfprintf+0x154>
    101a:	83 35       	cpi	r24, 0x53	; 83
    101c:	09 f0       	breq	.+2      	; 0x1020 <vfprintf+0x13e>
    101e:	55 c0       	rjmp	.+170    	; 0x10ca <vfprintf+0x1e8>
    1020:	20 c0       	rjmp	.+64     	; 0x1062 <vfprintf+0x180>
    1022:	f8 01       	movw	r30, r16
    1024:	80 81       	ld	r24, Z
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	0e 5f       	subi	r16, 0xFE	; 254
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	88 24       	eor	r8, r8
    102e:	83 94       	inc	r8
    1030:	91 2c       	mov	r9, r1
    1032:	53 01       	movw	r10, r6
    1034:	12 c0       	rjmp	.+36     	; 0x105a <vfprintf+0x178>
    1036:	28 01       	movw	r4, r16
    1038:	f2 e0       	ldi	r31, 0x02	; 2
    103a:	4f 0e       	add	r4, r31
    103c:	51 1c       	adc	r5, r1
    103e:	f8 01       	movw	r30, r16
    1040:	a0 80       	ld	r10, Z
    1042:	b1 80       	ldd	r11, Z+1	; 0x01
    1044:	36 fe       	sbrs	r3, 6
    1046:	03 c0       	rjmp	.+6      	; 0x104e <vfprintf+0x16c>
    1048:	69 2d       	mov	r22, r9
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <vfprintf+0x170>
    104e:	6f ef       	ldi	r22, 0xFF	; 255
    1050:	7f ef       	ldi	r23, 0xFF	; 255
    1052:	c5 01       	movw	r24, r10
    1054:	4e d1       	rcall	.+668    	; 0x12f2 <strnlen>
    1056:	4c 01       	movw	r8, r24
    1058:	82 01       	movw	r16, r4
    105a:	f3 2d       	mov	r31, r3
    105c:	ff 77       	andi	r31, 0x7F	; 127
    105e:	3f 2e       	mov	r3, r31
    1060:	15 c0       	rjmp	.+42     	; 0x108c <vfprintf+0x1aa>
    1062:	28 01       	movw	r4, r16
    1064:	22 e0       	ldi	r18, 0x02	; 2
    1066:	42 0e       	add	r4, r18
    1068:	51 1c       	adc	r5, r1
    106a:	f8 01       	movw	r30, r16
    106c:	a0 80       	ld	r10, Z
    106e:	b1 80       	ldd	r11, Z+1	; 0x01
    1070:	36 fe       	sbrs	r3, 6
    1072:	03 c0       	rjmp	.+6      	; 0x107a <vfprintf+0x198>
    1074:	69 2d       	mov	r22, r9
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x19c>
    107a:	6f ef       	ldi	r22, 0xFF	; 255
    107c:	7f ef       	ldi	r23, 0xFF	; 255
    107e:	c5 01       	movw	r24, r10
    1080:	2d d1       	rcall	.+602    	; 0x12dc <strnlen_P>
    1082:	4c 01       	movw	r8, r24
    1084:	f3 2d       	mov	r31, r3
    1086:	f0 68       	ori	r31, 0x80	; 128
    1088:	3f 2e       	mov	r3, r31
    108a:	82 01       	movw	r16, r4
    108c:	33 fc       	sbrc	r3, 3
    108e:	19 c0       	rjmp	.+50     	; 0x10c2 <vfprintf+0x1e0>
    1090:	82 2d       	mov	r24, r2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 16       	cp	r8, r24
    1096:	99 06       	cpc	r9, r25
    1098:	a0 f4       	brcc	.+40     	; 0x10c2 <vfprintf+0x1e0>
    109a:	b6 01       	movw	r22, r12
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	33 d1       	rcall	.+614    	; 0x1308 <fputc>
    10a2:	2a 94       	dec	r2
    10a4:	f5 cf       	rjmp	.-22     	; 0x1090 <vfprintf+0x1ae>
    10a6:	f5 01       	movw	r30, r10
    10a8:	37 fc       	sbrc	r3, 7
    10aa:	85 91       	lpm	r24, Z+
    10ac:	37 fe       	sbrs	r3, 7
    10ae:	81 91       	ld	r24, Z+
    10b0:	5f 01       	movw	r10, r30
    10b2:	b6 01       	movw	r22, r12
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	28 d1       	rcall	.+592    	; 0x1308 <fputc>
    10b8:	21 10       	cpse	r2, r1
    10ba:	2a 94       	dec	r2
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	82 1a       	sub	r8, r18
    10c0:	91 08       	sbc	r9, r1
    10c2:	81 14       	cp	r8, r1
    10c4:	91 04       	cpc	r9, r1
    10c6:	79 f7       	brne	.-34     	; 0x10a6 <vfprintf+0x1c4>
    10c8:	e1 c0       	rjmp	.+450    	; 0x128c <__stack+0x18d>
    10ca:	84 36       	cpi	r24, 0x64	; 100
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <vfprintf+0x1f0>
    10ce:	89 36       	cpi	r24, 0x69	; 105
    10d0:	39 f5       	brne	.+78     	; 0x1120 <__stack+0x21>
    10d2:	f8 01       	movw	r30, r16
    10d4:	37 fe       	sbrs	r3, 7
    10d6:	07 c0       	rjmp	.+14     	; 0x10e6 <vfprintf+0x204>
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	0c 5f       	subi	r16, 0xFC	; 252
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <vfprintf+0x214>
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	07 2e       	mov	r0, r23
    10ec:	00 0c       	add	r0, r0
    10ee:	88 0b       	sbc	r24, r24
    10f0:	99 0b       	sbc	r25, r25
    10f2:	0e 5f       	subi	r16, 0xFE	; 254
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	f3 2d       	mov	r31, r3
    10f8:	ff 76       	andi	r31, 0x6F	; 111
    10fa:	3f 2e       	mov	r3, r31
    10fc:	97 ff       	sbrs	r25, 7
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__stack+0x13>
    1100:	90 95       	com	r25
    1102:	80 95       	com	r24
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	f0 68       	ori	r31, 0x80	; 128
    1110:	3f 2e       	mov	r3, r31
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	a3 01       	movw	r20, r6
    1118:	33 d1       	rcall	.+614    	; 0x1380 <__ultoa_invert>
    111a:	88 2e       	mov	r8, r24
    111c:	86 18       	sub	r8, r6
    111e:	44 c0       	rjmp	.+136    	; 0x11a8 <__stack+0xa9>
    1120:	85 37       	cpi	r24, 0x75	; 117
    1122:	31 f4       	brne	.+12     	; 0x1130 <__stack+0x31>
    1124:	23 2d       	mov	r18, r3
    1126:	2f 7e       	andi	r18, 0xEF	; 239
    1128:	b2 2e       	mov	r11, r18
    112a:	2a e0       	ldi	r18, 0x0A	; 10
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	25 c0       	rjmp	.+74     	; 0x117a <__stack+0x7b>
    1130:	93 2d       	mov	r25, r3
    1132:	99 7f       	andi	r25, 0xF9	; 249
    1134:	b9 2e       	mov	r11, r25
    1136:	8f 36       	cpi	r24, 0x6F	; 111
    1138:	c1 f0       	breq	.+48     	; 0x116a <__stack+0x6b>
    113a:	18 f4       	brcc	.+6      	; 0x1142 <__stack+0x43>
    113c:	88 35       	cpi	r24, 0x58	; 88
    113e:	79 f0       	breq	.+30     	; 0x115e <__stack+0x5f>
    1140:	ae c0       	rjmp	.+348    	; 0x129e <__stack+0x19f>
    1142:	80 37       	cpi	r24, 0x70	; 112
    1144:	19 f0       	breq	.+6      	; 0x114c <__stack+0x4d>
    1146:	88 37       	cpi	r24, 0x78	; 120
    1148:	21 f0       	breq	.+8      	; 0x1152 <__stack+0x53>
    114a:	a9 c0       	rjmp	.+338    	; 0x129e <__stack+0x19f>
    114c:	e9 2f       	mov	r30, r25
    114e:	e0 61       	ori	r30, 0x10	; 16
    1150:	be 2e       	mov	r11, r30
    1152:	b4 fe       	sbrs	r11, 4
    1154:	0d c0       	rjmp	.+26     	; 0x1170 <__stack+0x71>
    1156:	fb 2d       	mov	r31, r11
    1158:	f4 60       	ori	r31, 0x04	; 4
    115a:	bf 2e       	mov	r11, r31
    115c:	09 c0       	rjmp	.+18     	; 0x1170 <__stack+0x71>
    115e:	34 fe       	sbrs	r3, 4
    1160:	0a c0       	rjmp	.+20     	; 0x1176 <__stack+0x77>
    1162:	29 2f       	mov	r18, r25
    1164:	26 60       	ori	r18, 0x06	; 6
    1166:	b2 2e       	mov	r11, r18
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <__stack+0x77>
    116a:	28 e0       	ldi	r18, 0x08	; 8
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	05 c0       	rjmp	.+10     	; 0x117a <__stack+0x7b>
    1170:	20 e1       	ldi	r18, 0x10	; 16
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <__stack+0x7b>
    1176:	20 e1       	ldi	r18, 0x10	; 16
    1178:	32 e0       	ldi	r19, 0x02	; 2
    117a:	f8 01       	movw	r30, r16
    117c:	b7 fe       	sbrs	r11, 7
    117e:	07 c0       	rjmp	.+14     	; 0x118e <__stack+0x8f>
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	0c 5f       	subi	r16, 0xFC	; 252
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	06 c0       	rjmp	.+12     	; 0x119a <__stack+0x9b>
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 5f       	subi	r16, 0xFE	; 254
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	a3 01       	movw	r20, r6
    119c:	f1 d0       	rcall	.+482    	; 0x1380 <__ultoa_invert>
    119e:	88 2e       	mov	r8, r24
    11a0:	86 18       	sub	r8, r6
    11a2:	fb 2d       	mov	r31, r11
    11a4:	ff 77       	andi	r31, 0x7F	; 127
    11a6:	3f 2e       	mov	r3, r31
    11a8:	36 fe       	sbrs	r3, 6
    11aa:	0d c0       	rjmp	.+26     	; 0x11c6 <__stack+0xc7>
    11ac:	23 2d       	mov	r18, r3
    11ae:	2e 7f       	andi	r18, 0xFE	; 254
    11b0:	a2 2e       	mov	r10, r18
    11b2:	89 14       	cp	r8, r9
    11b4:	58 f4       	brcc	.+22     	; 0x11cc <__stack+0xcd>
    11b6:	34 fe       	sbrs	r3, 4
    11b8:	0b c0       	rjmp	.+22     	; 0x11d0 <__stack+0xd1>
    11ba:	32 fc       	sbrc	r3, 2
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <__stack+0xd1>
    11be:	83 2d       	mov	r24, r3
    11c0:	8e 7e       	andi	r24, 0xEE	; 238
    11c2:	a8 2e       	mov	r10, r24
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <__stack+0xd1>
    11c6:	b8 2c       	mov	r11, r8
    11c8:	a3 2c       	mov	r10, r3
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <__stack+0xd3>
    11cc:	b8 2c       	mov	r11, r8
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <__stack+0xd3>
    11d0:	b9 2c       	mov	r11, r9
    11d2:	a4 fe       	sbrs	r10, 4
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <__stack+0xf5>
    11d6:	fe 01       	movw	r30, r28
    11d8:	e8 0d       	add	r30, r8
    11da:	f1 1d       	adc	r31, r1
    11dc:	80 81       	ld	r24, Z
    11de:	80 33       	cpi	r24, 0x30	; 48
    11e0:	21 f4       	brne	.+8      	; 0x11ea <__stack+0xeb>
    11e2:	9a 2d       	mov	r25, r10
    11e4:	99 7e       	andi	r25, 0xE9	; 233
    11e6:	a9 2e       	mov	r10, r25
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <__stack+0xfd>
    11ea:	a2 fe       	sbrs	r10, 2
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <__stack+0xfb>
    11ee:	b3 94       	inc	r11
    11f0:	b3 94       	inc	r11
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <__stack+0xfd>
    11f4:	8a 2d       	mov	r24, r10
    11f6:	86 78       	andi	r24, 0x86	; 134
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__stack+0xfd>
    11fa:	b3 94       	inc	r11
    11fc:	a3 fc       	sbrc	r10, 3
    11fe:	10 c0       	rjmp	.+32     	; 0x1220 <__stack+0x121>
    1200:	a0 fe       	sbrs	r10, 0
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <__stack+0x111>
    1204:	b2 14       	cp	r11, r2
    1206:	80 f4       	brcc	.+32     	; 0x1228 <__stack+0x129>
    1208:	28 0c       	add	r2, r8
    120a:	92 2c       	mov	r9, r2
    120c:	9b 18       	sub	r9, r11
    120e:	0d c0       	rjmp	.+26     	; 0x122a <__stack+0x12b>
    1210:	b2 14       	cp	r11, r2
    1212:	58 f4       	brcc	.+22     	; 0x122a <__stack+0x12b>
    1214:	b6 01       	movw	r22, r12
    1216:	80 e2       	ldi	r24, 0x20	; 32
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	76 d0       	rcall	.+236    	; 0x1308 <fputc>
    121c:	b3 94       	inc	r11
    121e:	f8 cf       	rjmp	.-16     	; 0x1210 <__stack+0x111>
    1220:	b2 14       	cp	r11, r2
    1222:	18 f4       	brcc	.+6      	; 0x122a <__stack+0x12b>
    1224:	2b 18       	sub	r2, r11
    1226:	02 c0       	rjmp	.+4      	; 0x122c <__stack+0x12d>
    1228:	98 2c       	mov	r9, r8
    122a:	21 2c       	mov	r2, r1
    122c:	a4 fe       	sbrs	r10, 4
    122e:	0f c0       	rjmp	.+30     	; 0x124e <__stack+0x14f>
    1230:	b6 01       	movw	r22, r12
    1232:	80 e3       	ldi	r24, 0x30	; 48
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	68 d0       	rcall	.+208    	; 0x1308 <fputc>
    1238:	a2 fe       	sbrs	r10, 2
    123a:	16 c0       	rjmp	.+44     	; 0x1268 <__stack+0x169>
    123c:	a1 fc       	sbrc	r10, 1
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <__stack+0x147>
    1240:	88 e7       	ldi	r24, 0x78	; 120
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <__stack+0x14b>
    1246:	88 e5       	ldi	r24, 0x58	; 88
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	b6 01       	movw	r22, r12
    124c:	0c c0       	rjmp	.+24     	; 0x1266 <__stack+0x167>
    124e:	8a 2d       	mov	r24, r10
    1250:	86 78       	andi	r24, 0x86	; 134
    1252:	51 f0       	breq	.+20     	; 0x1268 <__stack+0x169>
    1254:	a1 fe       	sbrs	r10, 1
    1256:	02 c0       	rjmp	.+4      	; 0x125c <__stack+0x15d>
    1258:	8b e2       	ldi	r24, 0x2B	; 43
    125a:	01 c0       	rjmp	.+2      	; 0x125e <__stack+0x15f>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	a7 fc       	sbrc	r10, 7
    1260:	8d e2       	ldi	r24, 0x2D	; 45
    1262:	b6 01       	movw	r22, r12
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	50 d0       	rcall	.+160    	; 0x1308 <fputc>
    1268:	89 14       	cp	r8, r9
    126a:	30 f4       	brcc	.+12     	; 0x1278 <__stack+0x179>
    126c:	b6 01       	movw	r22, r12
    126e:	80 e3       	ldi	r24, 0x30	; 48
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	4a d0       	rcall	.+148    	; 0x1308 <fputc>
    1274:	9a 94       	dec	r9
    1276:	f8 cf       	rjmp	.-16     	; 0x1268 <__stack+0x169>
    1278:	8a 94       	dec	r8
    127a:	f3 01       	movw	r30, r6
    127c:	e8 0d       	add	r30, r8
    127e:	f1 1d       	adc	r31, r1
    1280:	80 81       	ld	r24, Z
    1282:	b6 01       	movw	r22, r12
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	40 d0       	rcall	.+128    	; 0x1308 <fputc>
    1288:	81 10       	cpse	r8, r1
    128a:	f6 cf       	rjmp	.-20     	; 0x1278 <__stack+0x179>
    128c:	22 20       	and	r2, r2
    128e:	09 f4       	brne	.+2      	; 0x1292 <__stack+0x193>
    1290:	4e ce       	rjmp	.-868    	; 0xf2e <vfprintf+0x4c>
    1292:	b6 01       	movw	r22, r12
    1294:	80 e2       	ldi	r24, 0x20	; 32
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	37 d0       	rcall	.+110    	; 0x1308 <fputc>
    129a:	2a 94       	dec	r2
    129c:	f7 cf       	rjmp	.-18     	; 0x128c <__stack+0x18d>
    129e:	f6 01       	movw	r30, r12
    12a0:	86 81       	ldd	r24, Z+6	; 0x06
    12a2:	97 81       	ldd	r25, Z+7	; 0x07
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <__stack+0x1ab>
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	2b 96       	adiw	r28, 0x0b	; 11
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	3f 90       	pop	r3
    12d8:	2f 90       	pop	r2
    12da:	08 95       	ret

000012dc <strnlen_P>:
    12dc:	fc 01       	movw	r30, r24
    12de:	05 90       	lpm	r0, Z+
    12e0:	61 50       	subi	r22, 0x01	; 1
    12e2:	70 40       	sbci	r23, 0x00	; 0
    12e4:	01 10       	cpse	r0, r1
    12e6:	d8 f7       	brcc	.-10     	; 0x12de <strnlen_P+0x2>
    12e8:	80 95       	com	r24
    12ea:	90 95       	com	r25
    12ec:	8e 0f       	add	r24, r30
    12ee:	9f 1f       	adc	r25, r31
    12f0:	08 95       	ret

000012f2 <strnlen>:
    12f2:	fc 01       	movw	r30, r24
    12f4:	61 50       	subi	r22, 0x01	; 1
    12f6:	70 40       	sbci	r23, 0x00	; 0
    12f8:	01 90       	ld	r0, Z+
    12fa:	01 10       	cpse	r0, r1
    12fc:	d8 f7       	brcc	.-10     	; 0x12f4 <strnlen+0x2>
    12fe:	80 95       	com	r24
    1300:	90 95       	com	r25
    1302:	8e 0f       	add	r24, r30
    1304:	9f 1f       	adc	r25, r31
    1306:	08 95       	ret

00001308 <fputc>:
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	fb 01       	movw	r30, r22
    1312:	23 81       	ldd	r18, Z+3	; 0x03
    1314:	21 fd       	sbrc	r18, 1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <fputc+0x16>
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	2c c0       	rjmp	.+88     	; 0x1376 <fputc+0x6e>
    131e:	22 ff       	sbrs	r18, 2
    1320:	16 c0       	rjmp	.+44     	; 0x134e <fputc+0x46>
    1322:	46 81       	ldd	r20, Z+6	; 0x06
    1324:	57 81       	ldd	r21, Z+7	; 0x07
    1326:	24 81       	ldd	r18, Z+4	; 0x04
    1328:	35 81       	ldd	r19, Z+5	; 0x05
    132a:	42 17       	cp	r20, r18
    132c:	53 07       	cpc	r21, r19
    132e:	44 f4       	brge	.+16     	; 0x1340 <fputc+0x38>
    1330:	a0 81       	ld	r26, Z
    1332:	b1 81       	ldd	r27, Z+1	; 0x01
    1334:	9d 01       	movw	r18, r26
    1336:	2f 5f       	subi	r18, 0xFF	; 255
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	31 83       	std	Z+1, r19	; 0x01
    133c:	20 83       	st	Z, r18
    133e:	8c 93       	st	X, r24
    1340:	26 81       	ldd	r18, Z+6	; 0x06
    1342:	37 81       	ldd	r19, Z+7	; 0x07
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	37 83       	std	Z+7, r19	; 0x07
    134a:	26 83       	std	Z+6, r18	; 0x06
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <fputc+0x6e>
    134e:	8b 01       	movw	r16, r22
    1350:	ec 01       	movw	r28, r24
    1352:	fb 01       	movw	r30, r22
    1354:	00 84       	ldd	r0, Z+8	; 0x08
    1356:	f1 85       	ldd	r31, Z+9	; 0x09
    1358:	e0 2d       	mov	r30, r0
    135a:	09 95       	icall
    135c:	89 2b       	or	r24, r25
    135e:	e1 f6       	brne	.-72     	; 0x1318 <fputc+0x10>
    1360:	d8 01       	movw	r26, r16
    1362:	16 96       	adiw	r26, 0x06	; 6
    1364:	8d 91       	ld	r24, X+
    1366:	9c 91       	ld	r25, X
    1368:	17 97       	sbiw	r26, 0x07	; 7
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	17 96       	adiw	r26, 0x07	; 7
    136e:	9c 93       	st	X, r25
    1370:	8e 93       	st	-X, r24
    1372:	16 97       	sbiw	r26, 0x06	; 6
    1374:	ce 01       	movw	r24, r28
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <__ultoa_invert>:
    1380:	fa 01       	movw	r30, r20
    1382:	aa 27       	eor	r26, r26
    1384:	28 30       	cpi	r18, 0x08	; 8
    1386:	51 f1       	breq	.+84     	; 0x13dc <__ultoa_invert+0x5c>
    1388:	20 31       	cpi	r18, 0x10	; 16
    138a:	81 f1       	breq	.+96     	; 0x13ec <__ultoa_invert+0x6c>
    138c:	e8 94       	clt
    138e:	6f 93       	push	r22
    1390:	6e 7f       	andi	r22, 0xFE	; 254
    1392:	6e 5f       	subi	r22, 0xFE	; 254
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	8f 4f       	sbci	r24, 0xFF	; 255
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	af 4f       	sbci	r26, 0xFF	; 255
    139c:	b1 e0       	ldi	r27, 0x01	; 1
    139e:	3e d0       	rcall	.+124    	; 0x141c <__ultoa_invert+0x9c>
    13a0:	b4 e0       	ldi	r27, 0x04	; 4
    13a2:	3c d0       	rcall	.+120    	; 0x141c <__ultoa_invert+0x9c>
    13a4:	67 0f       	add	r22, r23
    13a6:	78 1f       	adc	r23, r24
    13a8:	89 1f       	adc	r24, r25
    13aa:	9a 1f       	adc	r25, r26
    13ac:	a1 1d       	adc	r26, r1
    13ae:	68 0f       	add	r22, r24
    13b0:	79 1f       	adc	r23, r25
    13b2:	8a 1f       	adc	r24, r26
    13b4:	91 1d       	adc	r25, r1
    13b6:	a1 1d       	adc	r26, r1
    13b8:	6a 0f       	add	r22, r26
    13ba:	71 1d       	adc	r23, r1
    13bc:	81 1d       	adc	r24, r1
    13be:	91 1d       	adc	r25, r1
    13c0:	a1 1d       	adc	r26, r1
    13c2:	20 d0       	rcall	.+64     	; 0x1404 <__ultoa_invert+0x84>
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <__ultoa_invert+0x48>
    13c6:	68 94       	set
    13c8:	3f 91       	pop	r19
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	26 9f       	mul	r18, r22
    13ce:	11 24       	eor	r1, r1
    13d0:	30 19       	sub	r19, r0
    13d2:	30 5d       	subi	r19, 0xD0	; 208
    13d4:	31 93       	st	Z+, r19
    13d6:	de f6       	brtc	.-74     	; 0x138e <__ultoa_invert+0xe>
    13d8:	cf 01       	movw	r24, r30
    13da:	08 95       	ret
    13dc:	46 2f       	mov	r20, r22
    13de:	47 70       	andi	r20, 0x07	; 7
    13e0:	40 5d       	subi	r20, 0xD0	; 208
    13e2:	41 93       	st	Z+, r20
    13e4:	b3 e0       	ldi	r27, 0x03	; 3
    13e6:	0f d0       	rcall	.+30     	; 0x1406 <__ultoa_invert+0x86>
    13e8:	c9 f7       	brne	.-14     	; 0x13dc <__ultoa_invert+0x5c>
    13ea:	f6 cf       	rjmp	.-20     	; 0x13d8 <__ultoa_invert+0x58>
    13ec:	46 2f       	mov	r20, r22
    13ee:	4f 70       	andi	r20, 0x0F	; 15
    13f0:	40 5d       	subi	r20, 0xD0	; 208
    13f2:	4a 33       	cpi	r20, 0x3A	; 58
    13f4:	18 f0       	brcs	.+6      	; 0x13fc <__ultoa_invert+0x7c>
    13f6:	49 5d       	subi	r20, 0xD9	; 217
    13f8:	31 fd       	sbrc	r19, 1
    13fa:	40 52       	subi	r20, 0x20	; 32
    13fc:	41 93       	st	Z+, r20
    13fe:	02 d0       	rcall	.+4      	; 0x1404 <__ultoa_invert+0x84>
    1400:	a9 f7       	brne	.-22     	; 0x13ec <__ultoa_invert+0x6c>
    1402:	ea cf       	rjmp	.-44     	; 0x13d8 <__ultoa_invert+0x58>
    1404:	b4 e0       	ldi	r27, 0x04	; 4
    1406:	a6 95       	lsr	r26
    1408:	97 95       	ror	r25
    140a:	87 95       	ror	r24
    140c:	77 95       	ror	r23
    140e:	67 95       	ror	r22
    1410:	ba 95       	dec	r27
    1412:	c9 f7       	brne	.-14     	; 0x1406 <__ultoa_invert+0x86>
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	61 05       	cpc	r22, r1
    1418:	71 05       	cpc	r23, r1
    141a:	08 95       	ret
    141c:	9b 01       	movw	r18, r22
    141e:	ac 01       	movw	r20, r24
    1420:	0a 2e       	mov	r0, r26
    1422:	06 94       	lsr	r0
    1424:	57 95       	ror	r21
    1426:	47 95       	ror	r20
    1428:	37 95       	ror	r19
    142a:	27 95       	ror	r18
    142c:	ba 95       	dec	r27
    142e:	c9 f7       	brne	.-14     	; 0x1422 <__ultoa_invert+0xa2>
    1430:	62 0f       	add	r22, r18
    1432:	73 1f       	adc	r23, r19
    1434:	84 1f       	adc	r24, r20
    1436:	95 1f       	adc	r25, r21
    1438:	a0 1d       	adc	r26, r0
    143a:	08 95       	ret

0000143c <_exit>:
    143c:	f8 94       	cli

0000143e <__stop_program>:
    143e:	ff cf       	rjmp	.-2      	; 0x143e <__stop_program>
